/* tslint:disable */
/* eslint-disable */
/**
 * British Geological Survey Sensors API
 * The British Geological Survey (BGS) Sensor API uses Version v1.1 of the OGC SensorThings API.<br><br> Paths/Endpoints that are not currently in use have been excluded, i.e. those relating to Actuators, MultiDatastreams, Tasks and TaskingCapabilities.<br><br> HistoricalLocations have also been removed.<br><br>
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Datastream
 */
export interface Datastream {
    /**
     * The Id of the datastream
     * @type {number}
     * @memberof Datastream
     */
    '@iot.id'?: number;
    /**
     * The direct link to the entity
     * @type {string}
     * @memberof Datastream
     */
    '@iot.selfLink'?: string;
    /**
     * A description of the datastream
     * @type {string}
     * @memberof Datastream
     */
    'description'?: string;
    /**
     * The label or name of the datastream
     * @type {string}
     * @memberof Datastream
     */
    'name'?: string;
    /**
     * The observation type for the datastream, as defined by the OGC Observations and Measurements standard
     * @type {string}
     * @memberof Datastream
     */
    'observationType'?: string;
    /**
     * The bounding box of the spatial extent of all features of interest associated with observations belonging to the Datastream
     * @type {string}
     * @memberof Datastream
     */
    'observedArea'?: string;
    /**
     * The range of phenomenon times from all observations belonging to the datastream
     * @type {string}
     * @memberof Datastream
     */
    'phenomenonTime'?: string;
    /**
     * 
     * @type {DatastreamProperties}
     * @memberof Datastream
     */
    'properties'?: DatastreamProperties;
    /**
     * The range of result times from all observations belonging to the datastream
     * @type {string}
     * @memberof Datastream
     */
    'resultTime'?: string;
    /**
     * 
     * @type {DatastreamUnitOfMeasurement}
     * @memberof Datastream
     */
    'unitOfMeasurement'?: DatastreamUnitOfMeasurement;
}
/**
 * 
 * @export
 * @interface DatastreamProperties
 */
export interface DatastreamProperties {
    /**
     * The Id of the record in the BGS Sensor Database that is the source of information for the datastream (SEN_MEASURE.measure_id)
     * @type {string}
     * @memberof DatastreamProperties
     */
    'sen_id'?: string;
    /**
     * The type of data provided by the datastream (Measured or Calculated), derived from the observed property
     * @type {string}
     * @memberof DatastreamProperties
     */
    'data_type'?: string;
    /**
     * A description of any access restrictions that apply to metadata and observations associated with this datastream
     * @type {string}
     * @memberof DatastreamProperties
     */
    'access_restriction'?: string;
    /**
     * A description of any restrictions that apply to the use of metadata and observations from this datastream
     * @type {string}
     * @memberof DatastreamProperties
     */
    'data_usage'?: string;
    /**
     * A flag to indicate whether details of this datastream can be publicly released (set to Y or N)
     * @type {string}
     * @memberof DatastreamProperties
     */
    'publish_yn&quot;'?: string;
}
/**
 * 
 * @export
 * @interface DatastreamUnitOfMeasurement
 */
export interface DatastreamUnitOfMeasurement {
    /**
     * The full name of the unit of measurement
     * @type {string}
     * @memberof DatastreamUnitOfMeasurement
     */
    'name'?: string;
    /**
     * The symbol of the unit of measurement
     * @type {string}
     * @memberof DatastreamUnitOfMeasurement
     */
    'symbol'?: string;
    /**
     * A URI for the unit of measurement providing a representation of its definition, ideally following the Unified Code for Unit of Measure (UCUM)
     * @type {string}
     * @memberof DatastreamUnitOfMeasurement
     */
    'defintion'?: string;
}
/**
 * 
 * @export
 * @interface Datastreams
 */
export interface Datastreams {
    /**
     * The total number of entities in the entityset
     * @type {number}
     * @memberof Datastreams
     */
    '@iot.count'?: number;
    /**
     * The link to the next page of entities
     * @type {string}
     * @memberof Datastreams
     */
    '@iot.nextLink'?: string;
    /**
     * 
     * @type {Array<Datastream>}
     * @memberof Datastreams
     */
    'value'?: Array<Datastream>;
}
/**
 * 
 * @export
 * @interface FeatureOfInterest
 */
export interface FeatureOfInterest {
    /**
     * The Id of the feature of interest
     * @type {number}
     * @memberof FeatureOfInterest
     */
    '@iot.id'?: number;
    /**
     * The direct link to the entity
     * @type {string}
     * @memberof FeatureOfInterest
     */
    '@iot.selfLink'?: string;
    /**
     * A description of the feature of interest
     * @type {string}
     * @memberof FeatureOfInterest
     */
    'description'?: string;
    /**
     * The encoding type of the \'feature\' property
     * @type {string}
     * @memberof FeatureOfInterest
     */
    'encodingType'?: string;
    /**
     * The detailed description of the feature of interest, recorded in line with the type defined by the \'encodingType\' property
     * @type {string}
     * @memberof FeatureOfInterest
     */
    'feature'?: string;
    /**
     * The label or name of the feature of interest
     * @type {string}
     * @memberof FeatureOfInterest
     */
    'name'?: string;
    /**
     * 
     * @type {FeatureOfInterestProperties}
     * @memberof FeatureOfInterest
     */
    'properties'?: FeatureOfInterestProperties;
}
/**
 * 
 * @export
 * @interface FeatureOfInterestProperties
 */
export interface FeatureOfInterestProperties {
    /**
     * The Id of the record in the BGS Sensor Database that is the source of information for the feature of interest (SEN_FEATURE_OF_INTEREST.foi_id or SEN_SENSOR_LOCATION.sensor_loc_id)
     * @type {string}
     * @memberof FeatureOfInterestProperties
     */
    'sen_id'?: string;
    /**
     * Indicates the feature of interest type, set to \'SEN_LOC\' (Sensor Location) or \'BOREHOLE\'
     * @type {string}
     * @memberof FeatureOfInterestProperties
     */
    'type'?: string;
    /**
     * The elevation (Z) of the sensor location (type \'SEN_LOC\' only)
     * @type {number}
     * @memberof FeatureOfInterestProperties
     */
    'z'?: number;
    /**
     * The vertical co-ordinate reference system of the Z value (type \'SEN_LOC\' only)
     * @type {string}
     * @memberof FeatureOfInterestProperties
     */
    'z_crs'?: string;
    /**
     * The time from which the sensor location is effective (type \'SEN_LOC\' only)
     * @type {string}
     * @memberof FeatureOfInterestProperties
     */
    'from_date'?: string;
    /**
     * The time from which the sensor location is no longer effective, where it is not set the location is still active (type \'SEN_LOC\' only)
     * @type {string}
     * @memberof FeatureOfInterestProperties
     */
    'to_date'?: string;
    /**
     * A flag to indicate whether the sensor location is the active location for a thing (set to Y or N) (type \'SEN_LOC\' only)
     * @type {string}
     * @memberof FeatureOfInterestProperties
     */
    'active_yn&quot;'?: string;
    /**
     * The Id of the record in the BGS SOBI Database that is the source of information for the borehole (type \'BOREHOLE\' only)
     * @type {number}
     * @memberof FeatureOfInterestProperties
     */
    'sobi_bgs_id'?: number;
    /**
     * The Id of the record in the BGS Universal Borehole Index that is the source of information for the borehole (type \'BOREHOLE\' only)
     * @type {number}
     * @memberof FeatureOfInterestProperties
     */
    'borehole_id'?: number;
    /**
     * The drilled length of the borehole in metres (type \'BOREHOLE\' only)
     * @type {number}
     * @memberof FeatureOfInterestProperties
     */
    'drilled_length'?: number;
    /**
     * An alternative name by which the borehole is known (type \'BOREHOLE\' only)
     * @type {string}
     * @memberof FeatureOfInterestProperties
     */
    'reference'?: string;
    /**
     * Indicates the source of the \'reference\' property (type \'BOREHOLE\' only)
     * @type {string}
     * @memberof FeatureOfInterestProperties
     */
    'reference_type'?: string;
    /**
     * A flag to indicate whether details of this feature of interest can be publicly released (set to Y or N)
     * @type {string}
     * @memberof FeatureOfInterestProperties
     */
    'publish_yn'?: string;
}
/**
 * 
 * @export
 * @interface FeaturesOfInterest
 */
export interface FeaturesOfInterest {
    /**
     * The total number of entities in the entityset
     * @type {number}
     * @memberof FeaturesOfInterest
     */
    '@iot.count'?: number;
    /**
     * The link to the next page of entities
     * @type {string}
     * @memberof FeaturesOfInterest
     */
    '@iot.nextLink'?: string;
    /**
     * 
     * @type {Array<FeatureOfInterest>}
     * @memberof FeaturesOfInterest
     */
    'value'?: Array<FeatureOfInterest>;
}
/**
 * 
 * @export
 * @interface Location
 */
export interface Location {
    /**
     * The Id of the location
     * @type {number}
     * @memberof Location
     */
    '@iot.id'?: number;
    /**
     * The direct link to the entity
     * @type {string}
     * @memberof Location
     */
    '@iot.selfLink'?: string;
    /**
     * A description of the location
     * @type {string}
     * @memberof Location
     */
    'description'?: string;
    /**
     * The encoding type of the \'location\' property
     * @type {string}
     * @memberof Location
     */
    'encodingType'?: string;
    /**
     * The location, recorded in line with the type defined by the \'encodingType\' property
     * @type {string}
     * @memberof Location
     */
    'location'?: string;
    /**
     * The label or name of the location
     * @type {string}
     * @memberof Location
     */
    'name'?: string;
    /**
     * 
     * @type {LocationProperties}
     * @memberof Location
     */
    'properties'?: LocationProperties;
}
/**
 * 
 * @export
 * @interface LocationProperties
 */
export interface LocationProperties {
    /**
     * The Id of the record in the BGS Sensor Database that is the source of information for the location (SEN_SENSOR_LOCATION.sensor_loc_id)
     * @type {string}
     * @memberof LocationProperties
     */
    'sen_id'?: string;
    /**
     * The name of the site to which the location belongs
     * @type {string}
     * @memberof LocationProperties
     */
    'site'?: string;
    /**
     * The name of the observatory to which the location belongs
     * @type {string}
     * @memberof LocationProperties
     */
    'observatory'?: string;
    /**
     * The elevation (Z) of the location
     * @type {number}
     * @memberof LocationProperties
     */
    'z'?: number;
    /**
     * The vertical co-ordinate reference system of the Z value
     * @type {string}
     * @memberof LocationProperties
     */
    'z_crs'?: string;
    /**
     * The time from which the location is effective
     * @type {string}
     * @memberof LocationProperties
     */
    'from_date'?: string;
    /**
     * The time from which the location is no longer effective, where it is not set the location is still active
     * @type {string}
     * @memberof LocationProperties
     */
    'to_date'?: string;
    /**
     * Any additional information about the location where available
     * @type {string}
     * @memberof LocationProperties
     */
    'comments'?: string;
    /**
     * A flag to indicate whether the location is the active location for a thing (set to Y or N)
     * @type {string}
     * @memberof LocationProperties
     */
    'active_yn&quot;'?: string;
    /**
     * A flag to indicate whether details of this location can be publicly released (set to Y or N)
     * @type {string}
     * @memberof LocationProperties
     */
    'publish_yn&quot;'?: string;
}
/**
 * 
 * @export
 * @interface Locations
 */
export interface Locations {
    /**
     * The total number of entities in the entityset
     * @type {number}
     * @memberof Locations
     */
    '@iot.count'?: number;
    /**
     * The link to the next page of entities
     * @type {string}
     * @memberof Locations
     */
    '@iot.nextLink'?: string;
    /**
     * 
     * @type {Array<Location>}
     * @memberof Locations
     */
    'value'?: Array<Location>;
}
/**
 * 
 * @export
 * @interface Observation
 */
export interface Observation {
    /**
     * The Id of the observation
     * @type {number}
     * @memberof Observation
     */
    '@iot.id'?: number;
    /**
     * The direct link to the entity
     * @type {string}
     * @memberof Observation
     */
    '@iot.selfLink'?: string;
    /**
     * 
     * @type {ObservationParameters}
     * @memberof Observation
     */
    'parameters'?: ObservationParameters;
    /**
     * The time when the observation happened
     * @type {string}
     * @memberof Observation
     */
    'phenomenonTime'?: string;
    /**
     * The estimated value of the observed property
     * @type {string}
     * @memberof Observation
     */
    'result'?: string;
    /**
     * A description of the quality of the result
     * @type {string}
     * @memberof Observation
     */
    'resultQuality'?: string;
    /**
     * The time the result was generated
     * @type {string}
     * @memberof Observation
     */
    'resultTime'?: string;
    /**
     * The time period during which the result can be used
     * @type {string}
     * @memberof Observation
     */
    'validTime'?: string;
}
/**
 * 
 * @export
 * @interface ObservationParameters
 */
export interface ObservationParameters {
    /**
     * The Id of the record in the BGS Sensor Database that is the source of information for the observation (SEN_SENSOR_DATA.sensor_data_id)
     * @type {string}
     * @memberof ObservationParameters
     */
    'sen_id'?: string;
    /**
     * A flag to indicate whether details of this observation can be publicly released (set to Y or N)
     * @type {string}
     * @memberof ObservationParameters
     */
    'publish_yn&quot;'?: string;
}
/**
 * 
 * @export
 * @interface Observations
 */
export interface Observations {
    /**
     * The total number of entities in the entityset
     * @type {number}
     * @memberof Observations
     */
    '@iot.count'?: number;
    /**
     * The link to the next page of entities
     * @type {string}
     * @memberof Observations
     */
    '@iot.nextLink'?: string;
    /**
     * 
     * @type {Array<Observation>}
     * @memberof Observations
     */
    'value'?: Array<Observation>;
}
/**
 * 
 * @export
 * @interface ObservedProperties
 */
export interface ObservedProperties {
    /**
     * The total number of entities in the entityset
     * @type {number}
     * @memberof ObservedProperties
     */
    '@iot.count'?: number;
    /**
     * The link to the next page of entities
     * @type {string}
     * @memberof ObservedProperties
     */
    '@iot.nextLink'?: string;
    /**
     * 
     * @type {Array<ObservedProperty>}
     * @memberof ObservedProperties
     */
    'value'?: Array<ObservedProperty>;
}
/**
 * 
 * @export
 * @interface ObservedProperty
 */
export interface ObservedProperty {
    /**
     * The Id of the observed property
     * @type {number}
     * @memberof ObservedProperty
     */
    '@iot.id'?: number;
    /**
     * The direct link to the entity
     * @type {string}
     * @memberof ObservedProperty
     */
    '@iot.selfLink'?: string;
    /**
     * A URI for the observed property providing a representation of its definition, ideally through reference to a community based vocabulary
     * @type {string}
     * @memberof ObservedProperty
     */
    'definition'?: string;
    /**
     * A description of the observed property
     * @type {string}
     * @memberof ObservedProperty
     */
    'description'?: string;
    /**
     * The label or name of the observed property
     * @type {string}
     * @memberof ObservedProperty
     */
    'name'?: string;
    /**
     * 
     * @type {ObservedPropertyProperties}
     * @memberof ObservedProperty
     */
    'properties'?: ObservedPropertyProperties;
}
/**
 * 
 * @export
 * @interface ObservedPropertyProperties
 */
export interface ObservedPropertyProperties {
    /**
     * The Id of the record in the BGS Sensor Database that is the source of information for the observed property (DIC_SEN_PROPERTY_TYPE.code)
     * @type {string}
     * @memberof ObservedPropertyProperties
     */
    'sen_id'?: string;
    /**
     * The type of data provided by the observed property (Measured or Calculated)
     * @type {string}
     * @memberof ObservedPropertyProperties
     */
    'data_type'?: string;
    /**
     * A description of the formula used to derive values for the observed property (data type \'Calculated\' only)
     * @type {string}
     * @memberof ObservedPropertyProperties
     */
    'formula'?: string;
    /**
     * A flag to indicate whether details of this observed property can be publicly released (set to Y or N)
     * @type {string}
     * @memberof ObservedPropertyProperties
     */
    'publish_yn&quot;'?: string;
}
/**
 * 
 * @export
 * @interface Sensor
 */
export interface Sensor {
    /**
     * The Id of the sensor type
     * @type {number}
     * @memberof Sensor
     */
    '@iot.id'?: number;
    /**
     * The direct link to the entity
     * @type {string}
     * @memberof Sensor
     */
    '@iot.selfLink'?: string;
    /**
     * A description of the sensor type
     * @type {string}
     * @memberof Sensor
     */
    'description'?: string;
    /**
     * The encoding type of the \'metadata\' property
     * @type {string}
     * @memberof Sensor
     */
    'encodingType'?: string;
    /**
     * A detailed description of the sensor type (style based on \'encodingType\' property)
     * @type {string}
     * @memberof Sensor
     */
    'metadata'?: string;
    /**
     * The label or name of the sensor type
     * @type {string}
     * @memberof Sensor
     */
    'name'?: string;
    /**
     * 
     * @type {SensorProperties}
     * @memberof Sensor
     */
    'properties'?: SensorProperties;
}
/**
 * 
 * @export
 * @interface SensorProperties
 */
export interface SensorProperties {
    /**
     * The Id of the record in the BGS Sensor Database that is the source of information for the sensor type (DIC_SEN_SENSOR_TYPE.code)
     * @type {string}
     * @memberof SensorProperties
     */
    'sen_id'?: string;
    /**
     * A flag to indicate whether data from the sensor type is complex, and its data observations are therefore defined for MultiDatastreams rather than Datastreams (set to Y or N)
     * @type {string}
     * @memberof SensorProperties
     */
    'complex_data_yn&quot;'?: string;
    /**
     * A flag to indicate whether details of this sensor type can be publicly released (set to Y or N)
     * @type {string}
     * @memberof SensorProperties
     */
    'publish_yn&quot;'?: string;
}
/**
 * 
 * @export
 * @interface Sensors
 */
export interface Sensors {
    /**
     * The total number of entities in the entityset
     * @type {number}
     * @memberof Sensors
     */
    '@iot.count'?: number;
    /**
     * The link to the next page of entities
     * @type {string}
     * @memberof Sensors
     */
    '@iot.nextLink'?: string;
    /**
     * 
     * @type {Array<Sensor>}
     * @memberof Sensors
     */
    'value'?: Array<Sensor>;
}
/**
 * 
 * @export
 * @interface Thing
 */
export interface Thing {
    /**
     * The Id of the thing
     * @type {number}
     * @memberof Thing
     */
    '@iot.id'?: number;
    /**
     * The direct link to the entity
     * @type {string}
     * @memberof Thing
     */
    '@iot.selfLink'?: string;
    /**
     * A description of the thing
     * @type {string}
     * @memberof Thing
     */
    'description'?: string;
    /**
     * The label or name of the thing
     * @type {string}
     * @memberof Thing
     */
    'name'?: string;
    /**
     * 
     * @type {ThingProperties}
     * @memberof Thing
     */
    'properties'?: ThingProperties;
}
/**
 * 
 * @export
 * @interface ThingProperties
 */
export interface ThingProperties {
    /**
     * The Id of the record in the BGS Sensor Database that is the source of information for the thing (DIC_SEN_SENSOR.code)
     * @type {string}
     * @memberof ThingProperties
     */
    'sen_id'?: string;
    /**
     * Indicates the type of thing, set to \'SENSOR\'
     * @type {string}
     * @memberof ThingProperties
     */
    'type'?: string;
    /**
     * The serial number of the physical sensor currently installed if known
     * @type {string}
     * @memberof ThingProperties
     */
    'serial_no'?: string;
    /**
     * Indicates how data from the thing is captured (Telemetered, Manual)
     * @type {string}
     * @memberof ThingProperties
     */
    'data_capture'?: string;
    /**
     * The earliest observation date for which data from the thing will be available in the API
     * @type {string}
     * @memberof ThingProperties
     */
    'observation_start_date'?: string;
    /**
     * The elevation (Z) of the thing\'s datum
     * @type {number}
     * @memberof ThingProperties
     */
    'datum_z'?: number;
    /**
     * The vertical co-ordinate reference system of the \'datum_z\' value
     * @type {string}
     * @memberof ThingProperties
     */
    'datum_z_crs'?: string;
    /**
     * The label or name for the thing\'s datum
     * @type {string}
     * @memberof ThingProperties
     */
    'datum_name'?: string;
    /**
     * The Id of the record in the BGS Sensor Database that is the source of information for the thing (DIC_SEN_SENSOR.code)
     * @type {string}
     * @memberof ThingProperties
     */
    'borehole_reference'?: string;
    /**
     * A description of any access restrictions that apply to metadata and observations associated with this thing
     * @type {string}
     * @memberof ThingProperties
     */
    'access_restriction'?: string;
    /**
     * A description of any restrictions that apply to the use of metadata and observations from this thing
     * @type {string}
     * @memberof ThingProperties
     */
    'data_usage'?: string;
    /**
     * A flag to indicate whether details of this thing can be publicly released (set to Y or N)
     * @type {string}
     * @memberof ThingProperties
     */
    'publish_yn&quot;'?: string;
}
/**
 * 
 * @export
 * @interface Things
 */
export interface Things {
    /**
     * The total number of entities in the entityset
     * @type {number}
     * @memberof Things
     */
    '@iot.count'?: number;
    /**
     * The link to the next page of entities
     * @type {string}
     * @memberof Things
     */
    '@iot.nextLink'?: string;
    /**
     * 
     * @type {Array<Thing>}
     * @memberof Things
     */
    'value'?: Array<Thing>;
}

/**
 * DatastreamsApi - axios parameter creator
 * @export
 */
export const DatastreamsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns information about the datastream identified by **entityId**
         * @summary Get information about an individual datastream
         * @param {number} entityId The id of the requested entity
         * @param {string} [$select] The list of properties that need to be returned
         * @param {string} [$expand] The list of related queries that need to be included in the result
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v11DatastreamsEntityIdGet: async (entityId: number, $select?: string, $expand?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'entityId' is not null or undefined
            assertParamExists('v11DatastreamsEntityIdGet', 'entityId', entityId)
            const localVarPath = `/v1.1/Datastreams({entityId})`
                .replace(`{${"entityId"}}`, encodeURIComponent(String(entityId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if ($select !== undefined) {
                localVarQueryParameter['$select'] = $select;
            }

            if ($expand !== undefined) {
                localVarQueryParameter['$expand'] = $expand;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns all observations for the datastream identified by **entityId** (subject to any other parameters set)
         * @summary Get all observations for a datastream
         * @param {number} entityId The id of the requested entity
         * @param {number} [$skip] The number of elements to skip from the collection
         * @param {number} [$top] The number of elements to return
         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.
         * @param {string} [$select] The list of properties that need to be returned
         * @param {string} [$expand] The list of related queries that need to be included in the result
         * @param {string} [$filter] A filter query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v11DatastreamsEntityIdObservationsGet: async (entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'entityId' is not null or undefined
            assertParamExists('v11DatastreamsEntityIdObservationsGet', 'entityId', entityId)
            const localVarPath = `/v1.1/Datastreams({entityId})/Observations`
                .replace(`{${"entityId"}}`, encodeURIComponent(String(entityId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if ($skip !== undefined) {
                localVarQueryParameter['$skip'] = $skip;
            }

            if ($top !== undefined) {
                localVarQueryParameter['$top'] = $top;
            }

            if ($count !== undefined) {
                localVarQueryParameter['$count'] = $count;
            }

            if ($select !== undefined) {
                localVarQueryParameter['$select'] = $select;
            }

            if ($expand !== undefined) {
                localVarQueryParameter['$expand'] = $expand;
            }

            if ($filter !== undefined) {
                localVarQueryParameter['$filter'] = $filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns all datastreams that provide the observed property for the datastream identified by **entityId** (subject to any other parameters set)
         * @summary Get all datastreams that provide a datastream\'s observed property
         * @param {number} entityId The id of the requested entity
         * @param {number} [$skip] The number of elements to skip from the collection
         * @param {number} [$top] The number of elements to return
         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.
         * @param {string} [$select] The list of properties that need to be returned
         * @param {string} [$expand] The list of related queries that need to be included in the result
         * @param {string} [$filter] A filter query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v11DatastreamsEntityIdObservedPropertyDatastreamsGet: async (entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'entityId' is not null or undefined
            assertParamExists('v11DatastreamsEntityIdObservedPropertyDatastreamsGet', 'entityId', entityId)
            const localVarPath = `/v1.1/Datastreams({entityId})/ObservedProperty/Datastreams`
                .replace(`{${"entityId"}}`, encodeURIComponent(String(entityId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if ($skip !== undefined) {
                localVarQueryParameter['$skip'] = $skip;
            }

            if ($top !== undefined) {
                localVarQueryParameter['$top'] = $top;
            }

            if ($count !== undefined) {
                localVarQueryParameter['$count'] = $count;
            }

            if ($select !== undefined) {
                localVarQueryParameter['$select'] = $select;
            }

            if ($expand !== undefined) {
                localVarQueryParameter['$expand'] = $expand;
            }

            if ($filter !== undefined) {
                localVarQueryParameter['$filter'] = $filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns information about the observed property for the datastream identified by **entityId**
         * @summary Get information about a datastream\'s observed property
         * @param {number} entityId The id of the requested entity
         * @param {string} [$select] The list of properties that need to be returned
         * @param {string} [$expand] The list of related queries that need to be included in the result
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v11DatastreamsEntityIdObservedPropertyGet: async (entityId: number, $select?: string, $expand?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'entityId' is not null or undefined
            assertParamExists('v11DatastreamsEntityIdObservedPropertyGet', 'entityId', entityId)
            const localVarPath = `/v1.1/Datastreams({entityId})/ObservedProperty`
                .replace(`{${"entityId"}}`, encodeURIComponent(String(entityId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if ($select !== undefined) {
                localVarQueryParameter['$select'] = $select;
            }

            if ($expand !== undefined) {
                localVarQueryParameter['$expand'] = $expand;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns all datastreams which share the sensor type for the datastream identified by **entityId** (subject to any other parameters set)
         * @summary Get all datastreams which share a datastream\'s sensor type
         * @param {number} entityId The id of the requested entity
         * @param {number} [$skip] The number of elements to skip from the collection
         * @param {number} [$top] The number of elements to return
         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.
         * @param {string} [$select] The list of properties that need to be returned
         * @param {string} [$expand] The list of related queries that need to be included in the result
         * @param {string} [$filter] A filter query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v11DatastreamsEntityIdSensorDatastreamsGet: async (entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'entityId' is not null or undefined
            assertParamExists('v11DatastreamsEntityIdSensorDatastreamsGet', 'entityId', entityId)
            const localVarPath = `/v1.1/Datastreams({entityId})/Sensor/Datastreams`
                .replace(`{${"entityId"}}`, encodeURIComponent(String(entityId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if ($skip !== undefined) {
                localVarQueryParameter['$skip'] = $skip;
            }

            if ($top !== undefined) {
                localVarQueryParameter['$top'] = $top;
            }

            if ($count !== undefined) {
                localVarQueryParameter['$count'] = $count;
            }

            if ($select !== undefined) {
                localVarQueryParameter['$select'] = $select;
            }

            if ($expand !== undefined) {
                localVarQueryParameter['$expand'] = $expand;
            }

            if ($filter !== undefined) {
                localVarQueryParameter['$filter'] = $filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns information about the sensor type for the datastream identified by **entityId**
         * @summary Get information about a datastream\'s sensor type
         * @param {number} entityId The id of the requested entity
         * @param {string} [$select] The list of properties that need to be returned
         * @param {string} [$expand] The list of related queries that need to be included in the result
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v11DatastreamsEntityIdSensorGet: async (entityId: number, $select?: string, $expand?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'entityId' is not null or undefined
            assertParamExists('v11DatastreamsEntityIdSensorGet', 'entityId', entityId)
            const localVarPath = `/v1.1/Datastreams({entityId})/Sensor`
                .replace(`{${"entityId"}}`, encodeURIComponent(String(entityId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if ($select !== undefined) {
                localVarQueryParameter['$select'] = $select;
            }

            if ($expand !== undefined) {
                localVarQueryParameter['$expand'] = $expand;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns all datastreams provided by the thing for the datastream identified by **entityId** (subject to any other parameters set)
         * @summary Get all datastreams provided by a datastream\'s thing
         * @param {number} entityId The id of the requested entity
         * @param {number} [$skip] The number of elements to skip from the collection
         * @param {number} [$top] The number of elements to return
         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.
         * @param {string} [$select] The list of properties that need to be returned
         * @param {string} [$expand] The list of related queries that need to be included in the result
         * @param {string} [$filter] A filter query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v11DatastreamsEntityIdThingDatastreamsGet: async (entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'entityId' is not null or undefined
            assertParamExists('v11DatastreamsEntityIdThingDatastreamsGet', 'entityId', entityId)
            const localVarPath = `/v1.1/Datastreams({entityId})/Thing/Datastreams`
                .replace(`{${"entityId"}}`, encodeURIComponent(String(entityId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if ($skip !== undefined) {
                localVarQueryParameter['$skip'] = $skip;
            }

            if ($top !== undefined) {
                localVarQueryParameter['$top'] = $top;
            }

            if ($count !== undefined) {
                localVarQueryParameter['$count'] = $count;
            }

            if ($select !== undefined) {
                localVarQueryParameter['$select'] = $select;
            }

            if ($expand !== undefined) {
                localVarQueryParameter['$expand'] = $expand;
            }

            if ($filter !== undefined) {
                localVarQueryParameter['$filter'] = $filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns information about the thing for the datastream identified by **entityId**
         * @summary Get information about a datastream\'s thing
         * @param {number} entityId The id of the requested entity
         * @param {string} [$select] The list of properties that need to be returned
         * @param {string} [$expand] The list of related queries that need to be included in the result
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v11DatastreamsEntityIdThingGet: async (entityId: number, $select?: string, $expand?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'entityId' is not null or undefined
            assertParamExists('v11DatastreamsEntityIdThingGet', 'entityId', entityId)
            const localVarPath = `/v1.1/Datastreams({entityId})/Thing`
                .replace(`{${"entityId"}}`, encodeURIComponent(String(entityId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if ($select !== undefined) {
                localVarQueryParameter['$select'] = $select;
            }

            if ($expand !== undefined) {
                localVarQueryParameter['$expand'] = $expand;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns all locations of the thing for the datastream identified by **entityId** (subject to any other parameters set)
         * @summary Get all locations for a datastream\'s thing
         * @param {number} entityId The id of the requested entity
         * @param {number} [$skip] The number of elements to skip from the collection
         * @param {number} [$top] The number of elements to return
         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.
         * @param {string} [$select] The list of properties that need to be returned
         * @param {string} [$expand] The list of related queries that need to be included in the result
         * @param {string} [$filter] A filter query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v11DatastreamsEntityIdThingLocationsGet: async (entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'entityId' is not null or undefined
            assertParamExists('v11DatastreamsEntityIdThingLocationsGet', 'entityId', entityId)
            const localVarPath = `/v1.1/Datastreams({entityId})/Thing/Locations`
                .replace(`{${"entityId"}}`, encodeURIComponent(String(entityId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if ($skip !== undefined) {
                localVarQueryParameter['$skip'] = $skip;
            }

            if ($top !== undefined) {
                localVarQueryParameter['$top'] = $top;
            }

            if ($count !== undefined) {
                localVarQueryParameter['$count'] = $count;
            }

            if ($select !== undefined) {
                localVarQueryParameter['$select'] = $select;
            }

            if ($expand !== undefined) {
                localVarQueryParameter['$expand'] = $expand;
            }

            if ($filter !== undefined) {
                localVarQueryParameter['$filter'] = $filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns all the datastreams provided by this api (subject to any parameters set)
         * @summary Get all datastreams
         * @param {number} [$skip] The number of elements to skip from the collection
         * @param {number} [$top] The number of elements to return
         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.
         * @param {string} [$select] The list of properties that need to be returned
         * @param {string} [$expand] The list of related queries that need to be included in the result
         * @param {string} [$filter] A filter query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v11DatastreamsGet: async ($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1.1/Datastreams`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if ($skip !== undefined) {
                localVarQueryParameter['$skip'] = $skip;
            }

            if ($top !== undefined) {
                localVarQueryParameter['$top'] = $top;
            }

            if ($count !== undefined) {
                localVarQueryParameter['$count'] = $count;
            }

            if ($select !== undefined) {
                localVarQueryParameter['$select'] = $select;
            }

            if ($expand !== undefined) {
                localVarQueryParameter['$expand'] = $expand;
            }

            if ($filter !== undefined) {
                localVarQueryParameter['$filter'] = $filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DatastreamsApi - functional programming interface
 * @export
 */
export const DatastreamsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DatastreamsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns information about the datastream identified by **entityId**
         * @summary Get information about an individual datastream
         * @param {number} entityId The id of the requested entity
         * @param {string} [$select] The list of properties that need to be returned
         * @param {string} [$expand] The list of related queries that need to be included in the result
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v11DatastreamsEntityIdGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Datastream>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v11DatastreamsEntityIdGet(entityId, $select, $expand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns all observations for the datastream identified by **entityId** (subject to any other parameters set)
         * @summary Get all observations for a datastream
         * @param {number} entityId The id of the requested entity
         * @param {number} [$skip] The number of elements to skip from the collection
         * @param {number} [$top] The number of elements to return
         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.
         * @param {string} [$select] The list of properties that need to be returned
         * @param {string} [$expand] The list of related queries that need to be included in the result
         * @param {string} [$filter] A filter query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v11DatastreamsEntityIdObservationsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Observations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v11DatastreamsEntityIdObservationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns all datastreams that provide the observed property for the datastream identified by **entityId** (subject to any other parameters set)
         * @summary Get all datastreams that provide a datastream\'s observed property
         * @param {number} entityId The id of the requested entity
         * @param {number} [$skip] The number of elements to skip from the collection
         * @param {number} [$top] The number of elements to return
         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.
         * @param {string} [$select] The list of properties that need to be returned
         * @param {string} [$expand] The list of related queries that need to be included in the result
         * @param {string} [$filter] A filter query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v11DatastreamsEntityIdObservedPropertyDatastreamsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Datastreams>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v11DatastreamsEntityIdObservedPropertyDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns information about the observed property for the datastream identified by **entityId**
         * @summary Get information about a datastream\'s observed property
         * @param {number} entityId The id of the requested entity
         * @param {string} [$select] The list of properties that need to be returned
         * @param {string} [$expand] The list of related queries that need to be included in the result
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v11DatastreamsEntityIdObservedPropertyGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ObservedProperty>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v11DatastreamsEntityIdObservedPropertyGet(entityId, $select, $expand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns all datastreams which share the sensor type for the datastream identified by **entityId** (subject to any other parameters set)
         * @summary Get all datastreams which share a datastream\'s sensor type
         * @param {number} entityId The id of the requested entity
         * @param {number} [$skip] The number of elements to skip from the collection
         * @param {number} [$top] The number of elements to return
         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.
         * @param {string} [$select] The list of properties that need to be returned
         * @param {string} [$expand] The list of related queries that need to be included in the result
         * @param {string} [$filter] A filter query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v11DatastreamsEntityIdSensorDatastreamsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Datastreams>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v11DatastreamsEntityIdSensorDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns information about the sensor type for the datastream identified by **entityId**
         * @summary Get information about a datastream\'s sensor type
         * @param {number} entityId The id of the requested entity
         * @param {string} [$select] The list of properties that need to be returned
         * @param {string} [$expand] The list of related queries that need to be included in the result
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v11DatastreamsEntityIdSensorGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Sensor>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v11DatastreamsEntityIdSensorGet(entityId, $select, $expand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns all datastreams provided by the thing for the datastream identified by **entityId** (subject to any other parameters set)
         * @summary Get all datastreams provided by a datastream\'s thing
         * @param {number} entityId The id of the requested entity
         * @param {number} [$skip] The number of elements to skip from the collection
         * @param {number} [$top] The number of elements to return
         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.
         * @param {string} [$select] The list of properties that need to be returned
         * @param {string} [$expand] The list of related queries that need to be included in the result
         * @param {string} [$filter] A filter query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v11DatastreamsEntityIdThingDatastreamsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Datastreams>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v11DatastreamsEntityIdThingDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns information about the thing for the datastream identified by **entityId**
         * @summary Get information about a datastream\'s thing
         * @param {number} entityId The id of the requested entity
         * @param {string} [$select] The list of properties that need to be returned
         * @param {string} [$expand] The list of related queries that need to be included in the result
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v11DatastreamsEntityIdThingGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Thing>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v11DatastreamsEntityIdThingGet(entityId, $select, $expand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns all locations of the thing for the datastream identified by **entityId** (subject to any other parameters set)
         * @summary Get all locations for a datastream\'s thing
         * @param {number} entityId The id of the requested entity
         * @param {number} [$skip] The number of elements to skip from the collection
         * @param {number} [$top] The number of elements to return
         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.
         * @param {string} [$select] The list of properties that need to be returned
         * @param {string} [$expand] The list of related queries that need to be included in the result
         * @param {string} [$filter] A filter query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v11DatastreamsEntityIdThingLocationsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Locations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v11DatastreamsEntityIdThingLocationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns all the datastreams provided by this api (subject to any parameters set)
         * @summary Get all datastreams
         * @param {number} [$skip] The number of elements to skip from the collection
         * @param {number} [$top] The number of elements to return
         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.
         * @param {string} [$select] The list of properties that need to be returned
         * @param {string} [$expand] The list of related queries that need to be included in the result
         * @param {string} [$filter] A filter query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v11DatastreamsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Datastreams>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v11DatastreamsGet($skip, $top, $count, $select, $expand, $filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DatastreamsApi - factory interface
 * @export
 */
export const DatastreamsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DatastreamsApiFp(configuration)
    return {
        /**
         * Returns information about the datastream identified by **entityId**
         * @summary Get information about an individual datastream
         * @param {number} entityId The id of the requested entity
         * @param {string} [$select] The list of properties that need to be returned
         * @param {string} [$expand] The list of related queries that need to be included in the result
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v11DatastreamsEntityIdGet(entityId: number, $select?: string, $expand?: string, options?: any): AxiosPromise<Datastream> {
            return localVarFp.v11DatastreamsEntityIdGet(entityId, $select, $expand, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns all observations for the datastream identified by **entityId** (subject to any other parameters set)
         * @summary Get all observations for a datastream
         * @param {number} entityId The id of the requested entity
         * @param {number} [$skip] The number of elements to skip from the collection
         * @param {number} [$top] The number of elements to return
         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.
         * @param {string} [$select] The list of properties that need to be returned
         * @param {string} [$expand] The list of related queries that need to be included in the result
         * @param {string} [$filter] A filter query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v11DatastreamsEntityIdObservationsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Observations> {
            return localVarFp.v11DatastreamsEntityIdObservationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns all datastreams that provide the observed property for the datastream identified by **entityId** (subject to any other parameters set)
         * @summary Get all datastreams that provide a datastream\'s observed property
         * @param {number} entityId The id of the requested entity
         * @param {number} [$skip] The number of elements to skip from the collection
         * @param {number} [$top] The number of elements to return
         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.
         * @param {string} [$select] The list of properties that need to be returned
         * @param {string} [$expand] The list of related queries that need to be included in the result
         * @param {string} [$filter] A filter query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v11DatastreamsEntityIdObservedPropertyDatastreamsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Datastreams> {
            return localVarFp.v11DatastreamsEntityIdObservedPropertyDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns information about the observed property for the datastream identified by **entityId**
         * @summary Get information about a datastream\'s observed property
         * @param {number} entityId The id of the requested entity
         * @param {string} [$select] The list of properties that need to be returned
         * @param {string} [$expand] The list of related queries that need to be included in the result
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v11DatastreamsEntityIdObservedPropertyGet(entityId: number, $select?: string, $expand?: string, options?: any): AxiosPromise<ObservedProperty> {
            return localVarFp.v11DatastreamsEntityIdObservedPropertyGet(entityId, $select, $expand, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns all datastreams which share the sensor type for the datastream identified by **entityId** (subject to any other parameters set)
         * @summary Get all datastreams which share a datastream\'s sensor type
         * @param {number} entityId The id of the requested entity
         * @param {number} [$skip] The number of elements to skip from the collection
         * @param {number} [$top] The number of elements to return
         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.
         * @param {string} [$select] The list of properties that need to be returned
         * @param {string} [$expand] The list of related queries that need to be included in the result
         * @param {string} [$filter] A filter query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v11DatastreamsEntityIdSensorDatastreamsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Datastreams> {
            return localVarFp.v11DatastreamsEntityIdSensorDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns information about the sensor type for the datastream identified by **entityId**
         * @summary Get information about a datastream\'s sensor type
         * @param {number} entityId The id of the requested entity
         * @param {string} [$select] The list of properties that need to be returned
         * @param {string} [$expand] The list of related queries that need to be included in the result
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v11DatastreamsEntityIdSensorGet(entityId: number, $select?: string, $expand?: string, options?: any): AxiosPromise<Sensor> {
            return localVarFp.v11DatastreamsEntityIdSensorGet(entityId, $select, $expand, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns all datastreams provided by the thing for the datastream identified by **entityId** (subject to any other parameters set)
         * @summary Get all datastreams provided by a datastream\'s thing
         * @param {number} entityId The id of the requested entity
         * @param {number} [$skip] The number of elements to skip from the collection
         * @param {number} [$top] The number of elements to return
         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.
         * @param {string} [$select] The list of properties that need to be returned
         * @param {string} [$expand] The list of related queries that need to be included in the result
         * @param {string} [$filter] A filter query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v11DatastreamsEntityIdThingDatastreamsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Datastreams> {
            return localVarFp.v11DatastreamsEntityIdThingDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns information about the thing for the datastream identified by **entityId**
         * @summary Get information about a datastream\'s thing
         * @param {number} entityId The id of the requested entity
         * @param {string} [$select] The list of properties that need to be returned
         * @param {string} [$expand] The list of related queries that need to be included in the result
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v11DatastreamsEntityIdThingGet(entityId: number, $select?: string, $expand?: string, options?: any): AxiosPromise<Thing> {
            return localVarFp.v11DatastreamsEntityIdThingGet(entityId, $select, $expand, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns all locations of the thing for the datastream identified by **entityId** (subject to any other parameters set)
         * @summary Get all locations for a datastream\'s thing
         * @param {number} entityId The id of the requested entity
         * @param {number} [$skip] The number of elements to skip from the collection
         * @param {number} [$top] The number of elements to return
         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.
         * @param {string} [$select] The list of properties that need to be returned
         * @param {string} [$expand] The list of related queries that need to be included in the result
         * @param {string} [$filter] A filter query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v11DatastreamsEntityIdThingLocationsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Locations> {
            return localVarFp.v11DatastreamsEntityIdThingLocationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns all the datastreams provided by this api (subject to any parameters set)
         * @summary Get all datastreams
         * @param {number} [$skip] The number of elements to skip from the collection
         * @param {number} [$top] The number of elements to return
         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.
         * @param {string} [$select] The list of properties that need to be returned
         * @param {string} [$expand] The list of related queries that need to be included in the result
         * @param {string} [$filter] A filter query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v11DatastreamsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Datastreams> {
            return localVarFp.v11DatastreamsGet($skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DatastreamsApi - interface
 * @export
 * @interface DatastreamsApi
 */
export interface DatastreamsApiInterface {
    /**
     * Returns information about the datastream identified by **entityId**
     * @summary Get information about an individual datastream
     * @param {number} entityId The id of the requested entity
     * @param {string} [$select] The list of properties that need to be returned
     * @param {string} [$expand] The list of related queries that need to be included in the result
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatastreamsApiInterface
     */
    v11DatastreamsEntityIdGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig): AxiosPromise<Datastream>;

    /**
     * Returns all observations for the datastream identified by **entityId** (subject to any other parameters set)
     * @summary Get all observations for a datastream
     * @param {number} entityId The id of the requested entity
     * @param {number} [$skip] The number of elements to skip from the collection
     * @param {number} [$top] The number of elements to return
     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.
     * @param {string} [$select] The list of properties that need to be returned
     * @param {string} [$expand] The list of related queries that need to be included in the result
     * @param {string} [$filter] A filter query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatastreamsApiInterface
     */
    v11DatastreamsEntityIdObservationsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Observations>;

    /**
     * Returns all datastreams that provide the observed property for the datastream identified by **entityId** (subject to any other parameters set)
     * @summary Get all datastreams that provide a datastream\'s observed property
     * @param {number} entityId The id of the requested entity
     * @param {number} [$skip] The number of elements to skip from the collection
     * @param {number} [$top] The number of elements to return
     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.
     * @param {string} [$select] The list of properties that need to be returned
     * @param {string} [$expand] The list of related queries that need to be included in the result
     * @param {string} [$filter] A filter query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatastreamsApiInterface
     */
    v11DatastreamsEntityIdObservedPropertyDatastreamsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Datastreams>;

    /**
     * Returns information about the observed property for the datastream identified by **entityId**
     * @summary Get information about a datastream\'s observed property
     * @param {number} entityId The id of the requested entity
     * @param {string} [$select] The list of properties that need to be returned
     * @param {string} [$expand] The list of related queries that need to be included in the result
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatastreamsApiInterface
     */
    v11DatastreamsEntityIdObservedPropertyGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig): AxiosPromise<ObservedProperty>;

    /**
     * Returns all datastreams which share the sensor type for the datastream identified by **entityId** (subject to any other parameters set)
     * @summary Get all datastreams which share a datastream\'s sensor type
     * @param {number} entityId The id of the requested entity
     * @param {number} [$skip] The number of elements to skip from the collection
     * @param {number} [$top] The number of elements to return
     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.
     * @param {string} [$select] The list of properties that need to be returned
     * @param {string} [$expand] The list of related queries that need to be included in the result
     * @param {string} [$filter] A filter query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatastreamsApiInterface
     */
    v11DatastreamsEntityIdSensorDatastreamsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Datastreams>;

    /**
     * Returns information about the sensor type for the datastream identified by **entityId**
     * @summary Get information about a datastream\'s sensor type
     * @param {number} entityId The id of the requested entity
     * @param {string} [$select] The list of properties that need to be returned
     * @param {string} [$expand] The list of related queries that need to be included in the result
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatastreamsApiInterface
     */
    v11DatastreamsEntityIdSensorGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig): AxiosPromise<Sensor>;

    /**
     * Returns all datastreams provided by the thing for the datastream identified by **entityId** (subject to any other parameters set)
     * @summary Get all datastreams provided by a datastream\'s thing
     * @param {number} entityId The id of the requested entity
     * @param {number} [$skip] The number of elements to skip from the collection
     * @param {number} [$top] The number of elements to return
     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.
     * @param {string} [$select] The list of properties that need to be returned
     * @param {string} [$expand] The list of related queries that need to be included in the result
     * @param {string} [$filter] A filter query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatastreamsApiInterface
     */
    v11DatastreamsEntityIdThingDatastreamsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Datastreams>;

    /**
     * Returns information about the thing for the datastream identified by **entityId**
     * @summary Get information about a datastream\'s thing
     * @param {number} entityId The id of the requested entity
     * @param {string} [$select] The list of properties that need to be returned
     * @param {string} [$expand] The list of related queries that need to be included in the result
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatastreamsApiInterface
     */
    v11DatastreamsEntityIdThingGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig): AxiosPromise<Thing>;

    /**
     * Returns all locations of the thing for the datastream identified by **entityId** (subject to any other parameters set)
     * @summary Get all locations for a datastream\'s thing
     * @param {number} entityId The id of the requested entity
     * @param {number} [$skip] The number of elements to skip from the collection
     * @param {number} [$top] The number of elements to return
     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.
     * @param {string} [$select] The list of properties that need to be returned
     * @param {string} [$expand] The list of related queries that need to be included in the result
     * @param {string} [$filter] A filter query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatastreamsApiInterface
     */
    v11DatastreamsEntityIdThingLocationsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Locations>;

    /**
     * Returns all the datastreams provided by this api (subject to any parameters set)
     * @summary Get all datastreams
     * @param {number} [$skip] The number of elements to skip from the collection
     * @param {number} [$top] The number of elements to return
     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.
     * @param {string} [$select] The list of properties that need to be returned
     * @param {string} [$expand] The list of related queries that need to be included in the result
     * @param {string} [$filter] A filter query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatastreamsApiInterface
     */
    v11DatastreamsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Datastreams>;

}

/**
 * DatastreamsApi - object-oriented interface
 * @export
 * @class DatastreamsApi
 * @extends {BaseAPI}
 */
export class DatastreamsApi extends BaseAPI implements DatastreamsApiInterface {
    /**
     * Returns information about the datastream identified by **entityId**
     * @summary Get information about an individual datastream
     * @param {number} entityId The id of the requested entity
     * @param {string} [$select] The list of properties that need to be returned
     * @param {string} [$expand] The list of related queries that need to be included in the result
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatastreamsApi
     */
    public v11DatastreamsEntityIdGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig) {
        return DatastreamsApiFp(this.configuration).v11DatastreamsEntityIdGet(entityId, $select, $expand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns all observations for the datastream identified by **entityId** (subject to any other parameters set)
     * @summary Get all observations for a datastream
     * @param {number} entityId The id of the requested entity
     * @param {number} [$skip] The number of elements to skip from the collection
     * @param {number} [$top] The number of elements to return
     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.
     * @param {string} [$select] The list of properties that need to be returned
     * @param {string} [$expand] The list of related queries that need to be included in the result
     * @param {string} [$filter] A filter query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatastreamsApi
     */
    public v11DatastreamsEntityIdObservationsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {
        return DatastreamsApiFp(this.configuration).v11DatastreamsEntityIdObservationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns all datastreams that provide the observed property for the datastream identified by **entityId** (subject to any other parameters set)
     * @summary Get all datastreams that provide a datastream\'s observed property
     * @param {number} entityId The id of the requested entity
     * @param {number} [$skip] The number of elements to skip from the collection
     * @param {number} [$top] The number of elements to return
     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.
     * @param {string} [$select] The list of properties that need to be returned
     * @param {string} [$expand] The list of related queries that need to be included in the result
     * @param {string} [$filter] A filter query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatastreamsApi
     */
    public v11DatastreamsEntityIdObservedPropertyDatastreamsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {
        return DatastreamsApiFp(this.configuration).v11DatastreamsEntityIdObservedPropertyDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns information about the observed property for the datastream identified by **entityId**
     * @summary Get information about a datastream\'s observed property
     * @param {number} entityId The id of the requested entity
     * @param {string} [$select] The list of properties that need to be returned
     * @param {string} [$expand] The list of related queries that need to be included in the result
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatastreamsApi
     */
    public v11DatastreamsEntityIdObservedPropertyGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig) {
        return DatastreamsApiFp(this.configuration).v11DatastreamsEntityIdObservedPropertyGet(entityId, $select, $expand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns all datastreams which share the sensor type for the datastream identified by **entityId** (subject to any other parameters set)
     * @summary Get all datastreams which share a datastream\'s sensor type
     * @param {number} entityId The id of the requested entity
     * @param {number} [$skip] The number of elements to skip from the collection
     * @param {number} [$top] The number of elements to return
     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.
     * @param {string} [$select] The list of properties that need to be returned
     * @param {string} [$expand] The list of related queries that need to be included in the result
     * @param {string} [$filter] A filter query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatastreamsApi
     */
    public v11DatastreamsEntityIdSensorDatastreamsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {
        return DatastreamsApiFp(this.configuration).v11DatastreamsEntityIdSensorDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns information about the sensor type for the datastream identified by **entityId**
     * @summary Get information about a datastream\'s sensor type
     * @param {number} entityId The id of the requested entity
     * @param {string} [$select] The list of properties that need to be returned
     * @param {string} [$expand] The list of related queries that need to be included in the result
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatastreamsApi
     */
    public v11DatastreamsEntityIdSensorGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig) {
        return DatastreamsApiFp(this.configuration).v11DatastreamsEntityIdSensorGet(entityId, $select, $expand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns all datastreams provided by the thing for the datastream identified by **entityId** (subject to any other parameters set)
     * @summary Get all datastreams provided by a datastream\'s thing
     * @param {number} entityId The id of the requested entity
     * @param {number} [$skip] The number of elements to skip from the collection
     * @param {number} [$top] The number of elements to return
     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.
     * @param {string} [$select] The list of properties that need to be returned
     * @param {string} [$expand] The list of related queries that need to be included in the result
     * @param {string} [$filter] A filter query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatastreamsApi
     */
    public v11DatastreamsEntityIdThingDatastreamsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {
        return DatastreamsApiFp(this.configuration).v11DatastreamsEntityIdThingDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns information about the thing for the datastream identified by **entityId**
     * @summary Get information about a datastream\'s thing
     * @param {number} entityId The id of the requested entity
     * @param {string} [$select] The list of properties that need to be returned
     * @param {string} [$expand] The list of related queries that need to be included in the result
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatastreamsApi
     */
    public v11DatastreamsEntityIdThingGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig) {
        return DatastreamsApiFp(this.configuration).v11DatastreamsEntityIdThingGet(entityId, $select, $expand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns all locations of the thing for the datastream identified by **entityId** (subject to any other parameters set)
     * @summary Get all locations for a datastream\'s thing
     * @param {number} entityId The id of the requested entity
     * @param {number} [$skip] The number of elements to skip from the collection
     * @param {number} [$top] The number of elements to return
     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.
     * @param {string} [$select] The list of properties that need to be returned
     * @param {string} [$expand] The list of related queries that need to be included in the result
     * @param {string} [$filter] A filter query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatastreamsApi
     */
    public v11DatastreamsEntityIdThingLocationsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {
        return DatastreamsApiFp(this.configuration).v11DatastreamsEntityIdThingLocationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns all the datastreams provided by this api (subject to any parameters set)
     * @summary Get all datastreams
     * @param {number} [$skip] The number of elements to skip from the collection
     * @param {number} [$top] The number of elements to return
     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.
     * @param {string} [$select] The list of properties that need to be returned
     * @param {string} [$expand] The list of related queries that need to be included in the result
     * @param {string} [$filter] A filter query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatastreamsApi
     */
    public v11DatastreamsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {
        return DatastreamsApiFp(this.configuration).v11DatastreamsGet($skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * FeaturesOfInterestApi - axios parameter creator
 * @export
 */
export const FeaturesOfInterestApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns information about the feature of interest identified by **entityId**
         * @summary Get information about an individual feature of interest
         * @param {number} entityId The id of the requested entity
         * @param {string} [$select] The list of properties that need to be returned
         * @param {string} [$expand] The list of related queries that need to be included in the result
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v11FeaturesOfInterestEntityIdGet: async (entityId: number, $select?: string, $expand?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'entityId' is not null or undefined
            assertParamExists('v11FeaturesOfInterestEntityIdGet', 'entityId', entityId)
            const localVarPath = `/v1.1/FeaturesOfInterest({entityId})`
                .replace(`{${"entityId"}}`, encodeURIComponent(String(entityId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if ($select !== undefined) {
                localVarQueryParameter['$select'] = $select;
            }

            if ($expand !== undefined) {
                localVarQueryParameter['$expand'] = $expand;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns all observations for the feature of interest identified by **entityId** (subject to any other parameters set)
         * @summary Get all observations for a feature of interest
         * @param {number} entityId The id of the requested entity
         * @param {number} [$skip] The number of elements to skip from the collection
         * @param {number} [$top] The number of elements to return
         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.
         * @param {string} [$select] The list of properties that need to be returned
         * @param {string} [$expand] The list of related queries that need to be included in the result
         * @param {string} [$filter] A filter query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v11FeaturesOfInterestEntityIdObservationsGet: async (entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'entityId' is not null or undefined
            assertParamExists('v11FeaturesOfInterestEntityIdObservationsGet', 'entityId', entityId)
            const localVarPath = `/v1.1/FeaturesOfInterest({entityId})/Observations`
                .replace(`{${"entityId"}}`, encodeURIComponent(String(entityId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if ($skip !== undefined) {
                localVarQueryParameter['$skip'] = $skip;
            }

            if ($top !== undefined) {
                localVarQueryParameter['$top'] = $top;
            }

            if ($count !== undefined) {
                localVarQueryParameter['$count'] = $count;
            }

            if ($select !== undefined) {
                localVarQueryParameter['$select'] = $select;
            }

            if ($expand !== undefined) {
                localVarQueryParameter['$expand'] = $expand;
            }

            if ($filter !== undefined) {
                localVarQueryParameter['$filter'] = $filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns all the features of interest provided by this api (subject to any parameters set)
         * @summary Get all features of interest
         * @param {number} [$skip] The number of elements to skip from the collection
         * @param {number} [$top] The number of elements to return
         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.
         * @param {string} [$select] The list of properties that need to be returned
         * @param {string} [$expand] The list of related queries that need to be included in the result
         * @param {string} [$filter] A filter query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v11FeaturesOfInterestGet: async ($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1.1/FeaturesOfInterest`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if ($skip !== undefined) {
                localVarQueryParameter['$skip'] = $skip;
            }

            if ($top !== undefined) {
                localVarQueryParameter['$top'] = $top;
            }

            if ($count !== undefined) {
                localVarQueryParameter['$count'] = $count;
            }

            if ($select !== undefined) {
                localVarQueryParameter['$select'] = $select;
            }

            if ($expand !== undefined) {
                localVarQueryParameter['$expand'] = $expand;
            }

            if ($filter !== undefined) {
                localVarQueryParameter['$filter'] = $filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FeaturesOfInterestApi - functional programming interface
 * @export
 */
export const FeaturesOfInterestApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FeaturesOfInterestApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns information about the feature of interest identified by **entityId**
         * @summary Get information about an individual feature of interest
         * @param {number} entityId The id of the requested entity
         * @param {string} [$select] The list of properties that need to be returned
         * @param {string} [$expand] The list of related queries that need to be included in the result
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v11FeaturesOfInterestEntityIdGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeatureOfInterest>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v11FeaturesOfInterestEntityIdGet(entityId, $select, $expand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns all observations for the feature of interest identified by **entityId** (subject to any other parameters set)
         * @summary Get all observations for a feature of interest
         * @param {number} entityId The id of the requested entity
         * @param {number} [$skip] The number of elements to skip from the collection
         * @param {number} [$top] The number of elements to return
         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.
         * @param {string} [$select] The list of properties that need to be returned
         * @param {string} [$expand] The list of related queries that need to be included in the result
         * @param {string} [$filter] A filter query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v11FeaturesOfInterestEntityIdObservationsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Observations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v11FeaturesOfInterestEntityIdObservationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns all the features of interest provided by this api (subject to any parameters set)
         * @summary Get all features of interest
         * @param {number} [$skip] The number of elements to skip from the collection
         * @param {number} [$top] The number of elements to return
         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.
         * @param {string} [$select] The list of properties that need to be returned
         * @param {string} [$expand] The list of related queries that need to be included in the result
         * @param {string} [$filter] A filter query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v11FeaturesOfInterestGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeaturesOfInterest>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v11FeaturesOfInterestGet($skip, $top, $count, $select, $expand, $filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FeaturesOfInterestApi - factory interface
 * @export
 */
export const FeaturesOfInterestApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FeaturesOfInterestApiFp(configuration)
    return {
        /**
         * Returns information about the feature of interest identified by **entityId**
         * @summary Get information about an individual feature of interest
         * @param {number} entityId The id of the requested entity
         * @param {string} [$select] The list of properties that need to be returned
         * @param {string} [$expand] The list of related queries that need to be included in the result
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v11FeaturesOfInterestEntityIdGet(entityId: number, $select?: string, $expand?: string, options?: any): AxiosPromise<FeatureOfInterest> {
            return localVarFp.v11FeaturesOfInterestEntityIdGet(entityId, $select, $expand, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns all observations for the feature of interest identified by **entityId** (subject to any other parameters set)
         * @summary Get all observations for a feature of interest
         * @param {number} entityId The id of the requested entity
         * @param {number} [$skip] The number of elements to skip from the collection
         * @param {number} [$top] The number of elements to return
         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.
         * @param {string} [$select] The list of properties that need to be returned
         * @param {string} [$expand] The list of related queries that need to be included in the result
         * @param {string} [$filter] A filter query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v11FeaturesOfInterestEntityIdObservationsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Observations> {
            return localVarFp.v11FeaturesOfInterestEntityIdObservationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns all the features of interest provided by this api (subject to any parameters set)
         * @summary Get all features of interest
         * @param {number} [$skip] The number of elements to skip from the collection
         * @param {number} [$top] The number of elements to return
         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.
         * @param {string} [$select] The list of properties that need to be returned
         * @param {string} [$expand] The list of related queries that need to be included in the result
         * @param {string} [$filter] A filter query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v11FeaturesOfInterestGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<FeaturesOfInterest> {
            return localVarFp.v11FeaturesOfInterestGet($skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FeaturesOfInterestApi - interface
 * @export
 * @interface FeaturesOfInterestApi
 */
export interface FeaturesOfInterestApiInterface {
    /**
     * Returns information about the feature of interest identified by **entityId**
     * @summary Get information about an individual feature of interest
     * @param {number} entityId The id of the requested entity
     * @param {string} [$select] The list of properties that need to be returned
     * @param {string} [$expand] The list of related queries that need to be included in the result
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesOfInterestApiInterface
     */
    v11FeaturesOfInterestEntityIdGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig): AxiosPromise<FeatureOfInterest>;

    /**
     * Returns all observations for the feature of interest identified by **entityId** (subject to any other parameters set)
     * @summary Get all observations for a feature of interest
     * @param {number} entityId The id of the requested entity
     * @param {number} [$skip] The number of elements to skip from the collection
     * @param {number} [$top] The number of elements to return
     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.
     * @param {string} [$select] The list of properties that need to be returned
     * @param {string} [$expand] The list of related queries that need to be included in the result
     * @param {string} [$filter] A filter query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesOfInterestApiInterface
     */
    v11FeaturesOfInterestEntityIdObservationsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Observations>;

    /**
     * Returns all the features of interest provided by this api (subject to any parameters set)
     * @summary Get all features of interest
     * @param {number} [$skip] The number of elements to skip from the collection
     * @param {number} [$top] The number of elements to return
     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.
     * @param {string} [$select] The list of properties that need to be returned
     * @param {string} [$expand] The list of related queries that need to be included in the result
     * @param {string} [$filter] A filter query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesOfInterestApiInterface
     */
    v11FeaturesOfInterestGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<FeaturesOfInterest>;

}

/**
 * FeaturesOfInterestApi - object-oriented interface
 * @export
 * @class FeaturesOfInterestApi
 * @extends {BaseAPI}
 */
export class FeaturesOfInterestApi extends BaseAPI implements FeaturesOfInterestApiInterface {
    /**
     * Returns information about the feature of interest identified by **entityId**
     * @summary Get information about an individual feature of interest
     * @param {number} entityId The id of the requested entity
     * @param {string} [$select] The list of properties that need to be returned
     * @param {string} [$expand] The list of related queries that need to be included in the result
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesOfInterestApi
     */
    public v11FeaturesOfInterestEntityIdGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig) {
        return FeaturesOfInterestApiFp(this.configuration).v11FeaturesOfInterestEntityIdGet(entityId, $select, $expand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns all observations for the feature of interest identified by **entityId** (subject to any other parameters set)
     * @summary Get all observations for a feature of interest
     * @param {number} entityId The id of the requested entity
     * @param {number} [$skip] The number of elements to skip from the collection
     * @param {number} [$top] The number of elements to return
     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.
     * @param {string} [$select] The list of properties that need to be returned
     * @param {string} [$expand] The list of related queries that need to be included in the result
     * @param {string} [$filter] A filter query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesOfInterestApi
     */
    public v11FeaturesOfInterestEntityIdObservationsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {
        return FeaturesOfInterestApiFp(this.configuration).v11FeaturesOfInterestEntityIdObservationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns all the features of interest provided by this api (subject to any parameters set)
     * @summary Get all features of interest
     * @param {number} [$skip] The number of elements to skip from the collection
     * @param {number} [$top] The number of elements to return
     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.
     * @param {string} [$select] The list of properties that need to be returned
     * @param {string} [$expand] The list of related queries that need to be included in the result
     * @param {string} [$filter] A filter query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesOfInterestApi
     */
    public v11FeaturesOfInterestGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {
        return FeaturesOfInterestApiFp(this.configuration).v11FeaturesOfInterestGet($skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * LocationsApi - axios parameter creator
 * @export
 */
export const LocationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns information about the location identified by **entityId**
         * @summary Get information about an individual location
         * @param {number} entityId The id of the requested entity
         * @param {string} [$select] The list of properties that need to be returned
         * @param {string} [$expand] The list of related queries that need to be included in the result
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v11LocationsEntityIdGet: async (entityId: number, $select?: string, $expand?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'entityId' is not null or undefined
            assertParamExists('v11LocationsEntityIdGet', 'entityId', entityId)
            const localVarPath = `/v1.1/Locations({entityId})`
                .replace(`{${"entityId"}}`, encodeURIComponent(String(entityId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if ($select !== undefined) {
                localVarQueryParameter['$select'] = $select;
            }

            if ($expand !== undefined) {
                localVarQueryParameter['$expand'] = $expand;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns information about the thing at the location identified by **entityId**
         * @summary Get information about the thing at the location
         * @param {number} entityId The id of the requested entity
         * @param {number} [$skip] The number of elements to skip from the collection
         * @param {number} [$top] The number of elements to return
         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.
         * @param {string} [$select] The list of properties that need to be returned
         * @param {string} [$expand] The list of related queries that need to be included in the result
         * @param {string} [$filter] A filter query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v11LocationsEntityIdThingsGet: async (entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'entityId' is not null or undefined
            assertParamExists('v11LocationsEntityIdThingsGet', 'entityId', entityId)
            const localVarPath = `/v1.1/Locations({entityId})/Things`
                .replace(`{${"entityId"}}`, encodeURIComponent(String(entityId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if ($skip !== undefined) {
                localVarQueryParameter['$skip'] = $skip;
            }

            if ($top !== undefined) {
                localVarQueryParameter['$top'] = $top;
            }

            if ($count !== undefined) {
                localVarQueryParameter['$count'] = $count;
            }

            if ($select !== undefined) {
                localVarQueryParameter['$select'] = $select;
            }

            if ($expand !== undefined) {
                localVarQueryParameter['$expand'] = $expand;
            }

            if ($filter !== undefined) {
                localVarQueryParameter['$filter'] = $filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns all the locations provided by this api (subject to any parameters set)
         * @summary Get all locations
         * @param {number} [$skip] The number of elements to skip from the collection
         * @param {number} [$top] The number of elements to return
         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.
         * @param {string} [$select] The list of properties that need to be returned
         * @param {string} [$expand] The list of related queries that need to be included in the result
         * @param {string} [$filter] A filter query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v11LocationsGet: async ($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1.1/Locations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if ($skip !== undefined) {
                localVarQueryParameter['$skip'] = $skip;
            }

            if ($top !== undefined) {
                localVarQueryParameter['$top'] = $top;
            }

            if ($count !== undefined) {
                localVarQueryParameter['$count'] = $count;
            }

            if ($select !== undefined) {
                localVarQueryParameter['$select'] = $select;
            }

            if ($expand !== undefined) {
                localVarQueryParameter['$expand'] = $expand;
            }

            if ($filter !== undefined) {
                localVarQueryParameter['$filter'] = $filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LocationsApi - functional programming interface
 * @export
 */
export const LocationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LocationsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns information about the location identified by **entityId**
         * @summary Get information about an individual location
         * @param {number} entityId The id of the requested entity
         * @param {string} [$select] The list of properties that need to be returned
         * @param {string} [$expand] The list of related queries that need to be included in the result
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v11LocationsEntityIdGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Location>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v11LocationsEntityIdGet(entityId, $select, $expand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns information about the thing at the location identified by **entityId**
         * @summary Get information about the thing at the location
         * @param {number} entityId The id of the requested entity
         * @param {number} [$skip] The number of elements to skip from the collection
         * @param {number} [$top] The number of elements to return
         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.
         * @param {string} [$select] The list of properties that need to be returned
         * @param {string} [$expand] The list of related queries that need to be included in the result
         * @param {string} [$filter] A filter query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v11LocationsEntityIdThingsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Things>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v11LocationsEntityIdThingsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns all the locations provided by this api (subject to any parameters set)
         * @summary Get all locations
         * @param {number} [$skip] The number of elements to skip from the collection
         * @param {number} [$top] The number of elements to return
         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.
         * @param {string} [$select] The list of properties that need to be returned
         * @param {string} [$expand] The list of related queries that need to be included in the result
         * @param {string} [$filter] A filter query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v11LocationsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Locations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v11LocationsGet($skip, $top, $count, $select, $expand, $filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LocationsApi - factory interface
 * @export
 */
export const LocationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LocationsApiFp(configuration)
    return {
        /**
         * Returns information about the location identified by **entityId**
         * @summary Get information about an individual location
         * @param {number} entityId The id of the requested entity
         * @param {string} [$select] The list of properties that need to be returned
         * @param {string} [$expand] The list of related queries that need to be included in the result
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v11LocationsEntityIdGet(entityId: number, $select?: string, $expand?: string, options?: any): AxiosPromise<Location> {
            return localVarFp.v11LocationsEntityIdGet(entityId, $select, $expand, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns information about the thing at the location identified by **entityId**
         * @summary Get information about the thing at the location
         * @param {number} entityId The id of the requested entity
         * @param {number} [$skip] The number of elements to skip from the collection
         * @param {number} [$top] The number of elements to return
         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.
         * @param {string} [$select] The list of properties that need to be returned
         * @param {string} [$expand] The list of related queries that need to be included in the result
         * @param {string} [$filter] A filter query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v11LocationsEntityIdThingsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Things> {
            return localVarFp.v11LocationsEntityIdThingsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns all the locations provided by this api (subject to any parameters set)
         * @summary Get all locations
         * @param {number} [$skip] The number of elements to skip from the collection
         * @param {number} [$top] The number of elements to return
         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.
         * @param {string} [$select] The list of properties that need to be returned
         * @param {string} [$expand] The list of related queries that need to be included in the result
         * @param {string} [$filter] A filter query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v11LocationsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Locations> {
            return localVarFp.v11LocationsGet($skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LocationsApi - interface
 * @export
 * @interface LocationsApi
 */
export interface LocationsApiInterface {
    /**
     * Returns information about the location identified by **entityId**
     * @summary Get information about an individual location
     * @param {number} entityId The id of the requested entity
     * @param {string} [$select] The list of properties that need to be returned
     * @param {string} [$expand] The list of related queries that need to be included in the result
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApiInterface
     */
    v11LocationsEntityIdGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig): AxiosPromise<Location>;

    /**
     * Returns information about the thing at the location identified by **entityId**
     * @summary Get information about the thing at the location
     * @param {number} entityId The id of the requested entity
     * @param {number} [$skip] The number of elements to skip from the collection
     * @param {number} [$top] The number of elements to return
     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.
     * @param {string} [$select] The list of properties that need to be returned
     * @param {string} [$expand] The list of related queries that need to be included in the result
     * @param {string} [$filter] A filter query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApiInterface
     */
    v11LocationsEntityIdThingsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Things>;

    /**
     * Returns all the locations provided by this api (subject to any parameters set)
     * @summary Get all locations
     * @param {number} [$skip] The number of elements to skip from the collection
     * @param {number} [$top] The number of elements to return
     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.
     * @param {string} [$select] The list of properties that need to be returned
     * @param {string} [$expand] The list of related queries that need to be included in the result
     * @param {string} [$filter] A filter query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApiInterface
     */
    v11LocationsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Locations>;

}

/**
 * LocationsApi - object-oriented interface
 * @export
 * @class LocationsApi
 * @extends {BaseAPI}
 */
export class LocationsApi extends BaseAPI implements LocationsApiInterface {
    /**
     * Returns information about the location identified by **entityId**
     * @summary Get information about an individual location
     * @param {number} entityId The id of the requested entity
     * @param {string} [$select] The list of properties that need to be returned
     * @param {string} [$expand] The list of related queries that need to be included in the result
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApi
     */
    public v11LocationsEntityIdGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig) {
        return LocationsApiFp(this.configuration).v11LocationsEntityIdGet(entityId, $select, $expand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns information about the thing at the location identified by **entityId**
     * @summary Get information about the thing at the location
     * @param {number} entityId The id of the requested entity
     * @param {number} [$skip] The number of elements to skip from the collection
     * @param {number} [$top] The number of elements to return
     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.
     * @param {string} [$select] The list of properties that need to be returned
     * @param {string} [$expand] The list of related queries that need to be included in the result
     * @param {string} [$filter] A filter query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApi
     */
    public v11LocationsEntityIdThingsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {
        return LocationsApiFp(this.configuration).v11LocationsEntityIdThingsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns all the locations provided by this api (subject to any parameters set)
     * @summary Get all locations
     * @param {number} [$skip] The number of elements to skip from the collection
     * @param {number} [$top] The number of elements to return
     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.
     * @param {string} [$select] The list of properties that need to be returned
     * @param {string} [$expand] The list of related queries that need to be included in the result
     * @param {string} [$filter] A filter query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApi
     */
    public v11LocationsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {
        return LocationsApiFp(this.configuration).v11LocationsGet($skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ObservationsApi - axios parameter creator
 * @export
 */
export const ObservationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns information about the datastream for the observation identified by **entityId**
         * @summary Get information about an observation\'s datastream
         * @param {number} entityId The id of the requested entity
         * @param {string} [$select] The list of properties that need to be returned
         * @param {string} [$expand] The list of related queries that need to be included in the result
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v11ObservationsEntityIdDatastreamGet: async (entityId: number, $select?: string, $expand?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'entityId' is not null or undefined
            assertParamExists('v11ObservationsEntityIdDatastreamGet', 'entityId', entityId)
            const localVarPath = `/v1.1/Observations({entityId})/Datastream`
                .replace(`{${"entityId"}}`, encodeURIComponent(String(entityId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if ($select !== undefined) {
                localVarQueryParameter['$select'] = $select;
            }

            if ($expand !== undefined) {
                localVarQueryParameter['$expand'] = $expand;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns all observations for the datastream of the observation identified by **entityId** (subject to any other parameters set)
         * @summary Get all observations for an observations\'s datastream
         * @param {number} entityId The id of the requested entity
         * @param {number} [$skip] The number of elements to skip from the collection
         * @param {number} [$top] The number of elements to return
         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.
         * @param {string} [$select] The list of properties that need to be returned
         * @param {string} [$expand] The list of related queries that need to be included in the result
         * @param {string} [$filter] A filter query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v11ObservationsEntityIdDatastreamObservationsGet: async (entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'entityId' is not null or undefined
            assertParamExists('v11ObservationsEntityIdDatastreamObservationsGet', 'entityId', entityId)
            const localVarPath = `/v1.1/Observations({entityId})/Datastream/Observations`
                .replace(`{${"entityId"}}`, encodeURIComponent(String(entityId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if ($skip !== undefined) {
                localVarQueryParameter['$skip'] = $skip;
            }

            if ($top !== undefined) {
                localVarQueryParameter['$top'] = $top;
            }

            if ($count !== undefined) {
                localVarQueryParameter['$count'] = $count;
            }

            if ($select !== undefined) {
                localVarQueryParameter['$select'] = $select;
            }

            if ($expand !== undefined) {
                localVarQueryParameter['$expand'] = $expand;
            }

            if ($filter !== undefined) {
                localVarQueryParameter['$filter'] = $filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} entityId The id of the requested entity
         * @param {number} [$skip] The number of elements to skip from the collection
         * @param {number} [$top] The number of elements to return
         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.
         * @param {string} [$select] The list of properties that need to be returned
         * @param {string} [$expand] The list of related queries that need to be included in the result
         * @param {string} [$filter] A filter query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v11ObservationsEntityIdDatastreamObservedPropertyDatastreamsGet: async (entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'entityId' is not null or undefined
            assertParamExists('v11ObservationsEntityIdDatastreamObservedPropertyDatastreamsGet', 'entityId', entityId)
            const localVarPath = `/v1.1/Observations({entityId})/Datastream/ObservedProperty/Datastreams`
                .replace(`{${"entityId"}}`, encodeURIComponent(String(entityId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if ($skip !== undefined) {
                localVarQueryParameter['$skip'] = $skip;
            }

            if ($top !== undefined) {
                localVarQueryParameter['$top'] = $top;
            }

            if ($count !== undefined) {
                localVarQueryParameter['$count'] = $count;
            }

            if ($select !== undefined) {
                localVarQueryParameter['$select'] = $select;
            }

            if ($expand !== undefined) {
                localVarQueryParameter['$expand'] = $expand;
            }

            if ($filter !== undefined) {
                localVarQueryParameter['$filter'] = $filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} entityId The id of the requested entity
         * @param {string} [$select] The list of properties that need to be returned
         * @param {string} [$expand] The list of related queries that need to be included in the result
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v11ObservationsEntityIdDatastreamObservedPropertyGet: async (entityId: number, $select?: string, $expand?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'entityId' is not null or undefined
            assertParamExists('v11ObservationsEntityIdDatastreamObservedPropertyGet', 'entityId', entityId)
            const localVarPath = `/v1.1/Observations({entityId})/Datastream/ObservedProperty`
                .replace(`{${"entityId"}}`, encodeURIComponent(String(entityId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if ($select !== undefined) {
                localVarQueryParameter['$select'] = $select;
            }

            if ($expand !== undefined) {
                localVarQueryParameter['$expand'] = $expand;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} entityId The id of the requested entity
         * @param {number} [$skip] The number of elements to skip from the collection
         * @param {number} [$top] The number of elements to return
         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.
         * @param {string} [$select] The list of properties that need to be returned
         * @param {string} [$expand] The list of related queries that need to be included in the result
         * @param {string} [$filter] A filter query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v11ObservationsEntityIdDatastreamSensorDatastreamsGet: async (entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'entityId' is not null or undefined
            assertParamExists('v11ObservationsEntityIdDatastreamSensorDatastreamsGet', 'entityId', entityId)
            const localVarPath = `/v1.1/Observations({entityId})/Datastream/Sensor/Datastreams`
                .replace(`{${"entityId"}}`, encodeURIComponent(String(entityId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if ($skip !== undefined) {
                localVarQueryParameter['$skip'] = $skip;
            }

            if ($top !== undefined) {
                localVarQueryParameter['$top'] = $top;
            }

            if ($count !== undefined) {
                localVarQueryParameter['$count'] = $count;
            }

            if ($select !== undefined) {
                localVarQueryParameter['$select'] = $select;
            }

            if ($expand !== undefined) {
                localVarQueryParameter['$expand'] = $expand;
            }

            if ($filter !== undefined) {
                localVarQueryParameter['$filter'] = $filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} entityId The id of the requested entity
         * @param {string} [$select] The list of properties that need to be returned
         * @param {string} [$expand] The list of related queries that need to be included in the result
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v11ObservationsEntityIdDatastreamSensorGet: async (entityId: number, $select?: string, $expand?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'entityId' is not null or undefined
            assertParamExists('v11ObservationsEntityIdDatastreamSensorGet', 'entityId', entityId)
            const localVarPath = `/v1.1/Observations({entityId})/Datastream/Sensor`
                .replace(`{${"entityId"}}`, encodeURIComponent(String(entityId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if ($select !== undefined) {
                localVarQueryParameter['$select'] = $select;
            }

            if ($expand !== undefined) {
                localVarQueryParameter['$expand'] = $expand;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} entityId The id of the requested entity
         * @param {number} [$skip] The number of elements to skip from the collection
         * @param {number} [$top] The number of elements to return
         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.
         * @param {string} [$select] The list of properties that need to be returned
         * @param {string} [$expand] The list of related queries that need to be included in the result
         * @param {string} [$filter] A filter query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v11ObservationsEntityIdDatastreamThingDatastreamsGet: async (entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'entityId' is not null or undefined
            assertParamExists('v11ObservationsEntityIdDatastreamThingDatastreamsGet', 'entityId', entityId)
            const localVarPath = `/v1.1/Observations({entityId})/Datastream/Thing/Datastreams`
                .replace(`{${"entityId"}}`, encodeURIComponent(String(entityId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if ($skip !== undefined) {
                localVarQueryParameter['$skip'] = $skip;
            }

            if ($top !== undefined) {
                localVarQueryParameter['$top'] = $top;
            }

            if ($count !== undefined) {
                localVarQueryParameter['$count'] = $count;
            }

            if ($select !== undefined) {
                localVarQueryParameter['$select'] = $select;
            }

            if ($expand !== undefined) {
                localVarQueryParameter['$expand'] = $expand;
            }

            if ($filter !== undefined) {
                localVarQueryParameter['$filter'] = $filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} entityId The id of the requested entity
         * @param {string} [$select] The list of properties that need to be returned
         * @param {string} [$expand] The list of related queries that need to be included in the result
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v11ObservationsEntityIdDatastreamThingGet: async (entityId: number, $select?: string, $expand?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'entityId' is not null or undefined
            assertParamExists('v11ObservationsEntityIdDatastreamThingGet', 'entityId', entityId)
            const localVarPath = `/v1.1/Observations({entityId})/Datastream/Thing`
                .replace(`{${"entityId"}}`, encodeURIComponent(String(entityId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if ($select !== undefined) {
                localVarQueryParameter['$select'] = $select;
            }

            if ($expand !== undefined) {
                localVarQueryParameter['$expand'] = $expand;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} entityId The id of the requested entity
         * @param {number} [$skip] The number of elements to skip from the collection
         * @param {number} [$top] The number of elements to return
         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.
         * @param {string} [$select] The list of properties that need to be returned
         * @param {string} [$expand] The list of related queries that need to be included in the result
         * @param {string} [$filter] A filter query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v11ObservationsEntityIdDatastreamThingLocationsGet: async (entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'entityId' is not null or undefined
            assertParamExists('v11ObservationsEntityIdDatastreamThingLocationsGet', 'entityId', entityId)
            const localVarPath = `/v1.1/Observations({entityId})/Datastream/Thing/Locations`
                .replace(`{${"entityId"}}`, encodeURIComponent(String(entityId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if ($skip !== undefined) {
                localVarQueryParameter['$skip'] = $skip;
            }

            if ($top !== undefined) {
                localVarQueryParameter['$top'] = $top;
            }

            if ($count !== undefined) {
                localVarQueryParameter['$count'] = $count;
            }

            if ($select !== undefined) {
                localVarQueryParameter['$select'] = $select;
            }

            if ($expand !== undefined) {
                localVarQueryParameter['$expand'] = $expand;
            }

            if ($filter !== undefined) {
                localVarQueryParameter['$filter'] = $filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns information about the feature of interest for the observation identified by **entityId**
         * @summary Get information about an observation\'s feature of interest
         * @param {number} entityId The id of the requested entity
         * @param {string} [$select] The list of properties that need to be returned
         * @param {string} [$expand] The list of related queries that need to be included in the result
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v11ObservationsEntityIdFeatureOfInterestGet: async (entityId: number, $select?: string, $expand?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'entityId' is not null or undefined
            assertParamExists('v11ObservationsEntityIdFeatureOfInterestGet', 'entityId', entityId)
            const localVarPath = `/v1.1/Observations({entityId})/FeatureOfInterest`
                .replace(`{${"entityId"}}`, encodeURIComponent(String(entityId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if ($select !== undefined) {
                localVarQueryParameter['$select'] = $select;
            }

            if ($expand !== undefined) {
                localVarQueryParameter['$expand'] = $expand;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} entityId The id of the requested entity
         * @param {number} [$skip] The number of elements to skip from the collection
         * @param {number} [$top] The number of elements to return
         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.
         * @param {string} [$select] The list of properties that need to be returned
         * @param {string} [$expand] The list of related queries that need to be included in the result
         * @param {string} [$filter] A filter query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v11ObservationsEntityIdFeatureOfInterestObservationsGet: async (entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'entityId' is not null or undefined
            assertParamExists('v11ObservationsEntityIdFeatureOfInterestObservationsGet', 'entityId', entityId)
            const localVarPath = `/v1.1/Observations({entityId})/FeatureOfInterest/Observations`
                .replace(`{${"entityId"}}`, encodeURIComponent(String(entityId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if ($skip !== undefined) {
                localVarQueryParameter['$skip'] = $skip;
            }

            if ($top !== undefined) {
                localVarQueryParameter['$top'] = $top;
            }

            if ($count !== undefined) {
                localVarQueryParameter['$count'] = $count;
            }

            if ($select !== undefined) {
                localVarQueryParameter['$select'] = $select;
            }

            if ($expand !== undefined) {
                localVarQueryParameter['$expand'] = $expand;
            }

            if ($filter !== undefined) {
                localVarQueryParameter['$filter'] = $filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns information about the observation identified by **entityId**
         * @summary Get information about an individual observation
         * @param {number} entityId The id of the requested entity
         * @param {string} [$select] The list of properties that need to be returned
         * @param {string} [$expand] The list of related queries that need to be included in the result
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v11ObservationsEntityIdGet: async (entityId: number, $select?: string, $expand?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'entityId' is not null or undefined
            assertParamExists('v11ObservationsEntityIdGet', 'entityId', entityId)
            const localVarPath = `/v1.1/Observations({entityId})`
                .replace(`{${"entityId"}}`, encodeURIComponent(String(entityId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if ($select !== undefined) {
                localVarQueryParameter['$select'] = $select;
            }

            if ($expand !== undefined) {
                localVarQueryParameter['$expand'] = $expand;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns all the observations provided by this api (subject to any parameters set)
         * @summary Get all observations
         * @param {number} [$skip] The number of elements to skip from the collection
         * @param {number} [$top] The number of elements to return
         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.
         * @param {string} [$select] The list of properties that need to be returned
         * @param {string} [$expand] The list of related queries that need to be included in the result
         * @param {string} [$filter] A filter query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v11ObservationsGet: async ($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1.1/Observations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if ($skip !== undefined) {
                localVarQueryParameter['$skip'] = $skip;
            }

            if ($top !== undefined) {
                localVarQueryParameter['$top'] = $top;
            }

            if ($count !== undefined) {
                localVarQueryParameter['$count'] = $count;
            }

            if ($select !== undefined) {
                localVarQueryParameter['$select'] = $select;
            }

            if ($expand !== undefined) {
                localVarQueryParameter['$expand'] = $expand;
            }

            if ($filter !== undefined) {
                localVarQueryParameter['$filter'] = $filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ObservationsApi - functional programming interface
 * @export
 */
export const ObservationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ObservationsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns information about the datastream for the observation identified by **entityId**
         * @summary Get information about an observation\'s datastream
         * @param {number} entityId The id of the requested entity
         * @param {string} [$select] The list of properties that need to be returned
         * @param {string} [$expand] The list of related queries that need to be included in the result
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v11ObservationsEntityIdDatastreamGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Datastream>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ObservationsEntityIdDatastreamGet(entityId, $select, $expand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns all observations for the datastream of the observation identified by **entityId** (subject to any other parameters set)
         * @summary Get all observations for an observations\'s datastream
         * @param {number} entityId The id of the requested entity
         * @param {number} [$skip] The number of elements to skip from the collection
         * @param {number} [$top] The number of elements to return
         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.
         * @param {string} [$select] The list of properties that need to be returned
         * @param {string} [$expand] The list of related queries that need to be included in the result
         * @param {string} [$filter] A filter query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v11ObservationsEntityIdDatastreamObservationsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Observations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ObservationsEntityIdDatastreamObservationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} entityId The id of the requested entity
         * @param {number} [$skip] The number of elements to skip from the collection
         * @param {number} [$top] The number of elements to return
         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.
         * @param {string} [$select] The list of properties that need to be returned
         * @param {string} [$expand] The list of related queries that need to be included in the result
         * @param {string} [$filter] A filter query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v11ObservationsEntityIdDatastreamObservedPropertyDatastreamsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Datastreams>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ObservationsEntityIdDatastreamObservedPropertyDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} entityId The id of the requested entity
         * @param {string} [$select] The list of properties that need to be returned
         * @param {string} [$expand] The list of related queries that need to be included in the result
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v11ObservationsEntityIdDatastreamObservedPropertyGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ObservedProperty>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ObservationsEntityIdDatastreamObservedPropertyGet(entityId, $select, $expand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} entityId The id of the requested entity
         * @param {number} [$skip] The number of elements to skip from the collection
         * @param {number} [$top] The number of elements to return
         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.
         * @param {string} [$select] The list of properties that need to be returned
         * @param {string} [$expand] The list of related queries that need to be included in the result
         * @param {string} [$filter] A filter query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v11ObservationsEntityIdDatastreamSensorDatastreamsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Datastreams>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ObservationsEntityIdDatastreamSensorDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} entityId The id of the requested entity
         * @param {string} [$select] The list of properties that need to be returned
         * @param {string} [$expand] The list of related queries that need to be included in the result
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v11ObservationsEntityIdDatastreamSensorGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Sensor>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ObservationsEntityIdDatastreamSensorGet(entityId, $select, $expand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} entityId The id of the requested entity
         * @param {number} [$skip] The number of elements to skip from the collection
         * @param {number} [$top] The number of elements to return
         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.
         * @param {string} [$select] The list of properties that need to be returned
         * @param {string} [$expand] The list of related queries that need to be included in the result
         * @param {string} [$filter] A filter query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v11ObservationsEntityIdDatastreamThingDatastreamsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Datastreams>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ObservationsEntityIdDatastreamThingDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} entityId The id of the requested entity
         * @param {string} [$select] The list of properties that need to be returned
         * @param {string} [$expand] The list of related queries that need to be included in the result
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v11ObservationsEntityIdDatastreamThingGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Thing>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ObservationsEntityIdDatastreamThingGet(entityId, $select, $expand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} entityId The id of the requested entity
         * @param {number} [$skip] The number of elements to skip from the collection
         * @param {number} [$top] The number of elements to return
         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.
         * @param {string} [$select] The list of properties that need to be returned
         * @param {string} [$expand] The list of related queries that need to be included in the result
         * @param {string} [$filter] A filter query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v11ObservationsEntityIdDatastreamThingLocationsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Locations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ObservationsEntityIdDatastreamThingLocationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns information about the feature of interest for the observation identified by **entityId**
         * @summary Get information about an observation\'s feature of interest
         * @param {number} entityId The id of the requested entity
         * @param {string} [$select] The list of properties that need to be returned
         * @param {string} [$expand] The list of related queries that need to be included in the result
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v11ObservationsEntityIdFeatureOfInterestGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeatureOfInterest>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ObservationsEntityIdFeatureOfInterestGet(entityId, $select, $expand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} entityId The id of the requested entity
         * @param {number} [$skip] The number of elements to skip from the collection
         * @param {number} [$top] The number of elements to return
         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.
         * @param {string} [$select] The list of properties that need to be returned
         * @param {string} [$expand] The list of related queries that need to be included in the result
         * @param {string} [$filter] A filter query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v11ObservationsEntityIdFeatureOfInterestObservationsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Observations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ObservationsEntityIdFeatureOfInterestObservationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns information about the observation identified by **entityId**
         * @summary Get information about an individual observation
         * @param {number} entityId The id of the requested entity
         * @param {string} [$select] The list of properties that need to be returned
         * @param {string} [$expand] The list of related queries that need to be included in the result
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v11ObservationsEntityIdGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Observation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ObservationsEntityIdGet(entityId, $select, $expand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns all the observations provided by this api (subject to any parameters set)
         * @summary Get all observations
         * @param {number} [$skip] The number of elements to skip from the collection
         * @param {number} [$top] The number of elements to return
         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.
         * @param {string} [$select] The list of properties that need to be returned
         * @param {string} [$expand] The list of related queries that need to be included in the result
         * @param {string} [$filter] A filter query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v11ObservationsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Observations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ObservationsGet($skip, $top, $count, $select, $expand, $filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ObservationsApi - factory interface
 * @export
 */
export const ObservationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ObservationsApiFp(configuration)
    return {
        /**
         * Returns information about the datastream for the observation identified by **entityId**
         * @summary Get information about an observation\'s datastream
         * @param {number} entityId The id of the requested entity
         * @param {string} [$select] The list of properties that need to be returned
         * @param {string} [$expand] The list of related queries that need to be included in the result
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v11ObservationsEntityIdDatastreamGet(entityId: number, $select?: string, $expand?: string, options?: any): AxiosPromise<Datastream> {
            return localVarFp.v11ObservationsEntityIdDatastreamGet(entityId, $select, $expand, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns all observations for the datastream of the observation identified by **entityId** (subject to any other parameters set)
         * @summary Get all observations for an observations\'s datastream
         * @param {number} entityId The id of the requested entity
         * @param {number} [$skip] The number of elements to skip from the collection
         * @param {number} [$top] The number of elements to return
         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.
         * @param {string} [$select] The list of properties that need to be returned
         * @param {string} [$expand] The list of related queries that need to be included in the result
         * @param {string} [$filter] A filter query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v11ObservationsEntityIdDatastreamObservationsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Observations> {
            return localVarFp.v11ObservationsEntityIdDatastreamObservationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} entityId The id of the requested entity
         * @param {number} [$skip] The number of elements to skip from the collection
         * @param {number} [$top] The number of elements to return
         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.
         * @param {string} [$select] The list of properties that need to be returned
         * @param {string} [$expand] The list of related queries that need to be included in the result
         * @param {string} [$filter] A filter query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v11ObservationsEntityIdDatastreamObservedPropertyDatastreamsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Datastreams> {
            return localVarFp.v11ObservationsEntityIdDatastreamObservedPropertyDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} entityId The id of the requested entity
         * @param {string} [$select] The list of properties that need to be returned
         * @param {string} [$expand] The list of related queries that need to be included in the result
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v11ObservationsEntityIdDatastreamObservedPropertyGet(entityId: number, $select?: string, $expand?: string, options?: any): AxiosPromise<ObservedProperty> {
            return localVarFp.v11ObservationsEntityIdDatastreamObservedPropertyGet(entityId, $select, $expand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} entityId The id of the requested entity
         * @param {number} [$skip] The number of elements to skip from the collection
         * @param {number} [$top] The number of elements to return
         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.
         * @param {string} [$select] The list of properties that need to be returned
         * @param {string} [$expand] The list of related queries that need to be included in the result
         * @param {string} [$filter] A filter query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v11ObservationsEntityIdDatastreamSensorDatastreamsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Datastreams> {
            return localVarFp.v11ObservationsEntityIdDatastreamSensorDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} entityId The id of the requested entity
         * @param {string} [$select] The list of properties that need to be returned
         * @param {string} [$expand] The list of related queries that need to be included in the result
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v11ObservationsEntityIdDatastreamSensorGet(entityId: number, $select?: string, $expand?: string, options?: any): AxiosPromise<Sensor> {
            return localVarFp.v11ObservationsEntityIdDatastreamSensorGet(entityId, $select, $expand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} entityId The id of the requested entity
         * @param {number} [$skip] The number of elements to skip from the collection
         * @param {number} [$top] The number of elements to return
         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.
         * @param {string} [$select] The list of properties that need to be returned
         * @param {string} [$expand] The list of related queries that need to be included in the result
         * @param {string} [$filter] A filter query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v11ObservationsEntityIdDatastreamThingDatastreamsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Datastreams> {
            return localVarFp.v11ObservationsEntityIdDatastreamThingDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} entityId The id of the requested entity
         * @param {string} [$select] The list of properties that need to be returned
         * @param {string} [$expand] The list of related queries that need to be included in the result
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v11ObservationsEntityIdDatastreamThingGet(entityId: number, $select?: string, $expand?: string, options?: any): AxiosPromise<Thing> {
            return localVarFp.v11ObservationsEntityIdDatastreamThingGet(entityId, $select, $expand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} entityId The id of the requested entity
         * @param {number} [$skip] The number of elements to skip from the collection
         * @param {number} [$top] The number of elements to return
         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.
         * @param {string} [$select] The list of properties that need to be returned
         * @param {string} [$expand] The list of related queries that need to be included in the result
         * @param {string} [$filter] A filter query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v11ObservationsEntityIdDatastreamThingLocationsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Locations> {
            return localVarFp.v11ObservationsEntityIdDatastreamThingLocationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns information about the feature of interest for the observation identified by **entityId**
         * @summary Get information about an observation\'s feature of interest
         * @param {number} entityId The id of the requested entity
         * @param {string} [$select] The list of properties that need to be returned
         * @param {string} [$expand] The list of related queries that need to be included in the result
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v11ObservationsEntityIdFeatureOfInterestGet(entityId: number, $select?: string, $expand?: string, options?: any): AxiosPromise<FeatureOfInterest> {
            return localVarFp.v11ObservationsEntityIdFeatureOfInterestGet(entityId, $select, $expand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} entityId The id of the requested entity
         * @param {number} [$skip] The number of elements to skip from the collection
         * @param {number} [$top] The number of elements to return
         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.
         * @param {string} [$select] The list of properties that need to be returned
         * @param {string} [$expand] The list of related queries that need to be included in the result
         * @param {string} [$filter] A filter query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v11ObservationsEntityIdFeatureOfInterestObservationsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Observations> {
            return localVarFp.v11ObservationsEntityIdFeatureOfInterestObservationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns information about the observation identified by **entityId**
         * @summary Get information about an individual observation
         * @param {number} entityId The id of the requested entity
         * @param {string} [$select] The list of properties that need to be returned
         * @param {string} [$expand] The list of related queries that need to be included in the result
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v11ObservationsEntityIdGet(entityId: number, $select?: string, $expand?: string, options?: any): AxiosPromise<Observation> {
            return localVarFp.v11ObservationsEntityIdGet(entityId, $select, $expand, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns all the observations provided by this api (subject to any parameters set)
         * @summary Get all observations
         * @param {number} [$skip] The number of elements to skip from the collection
         * @param {number} [$top] The number of elements to return
         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.
         * @param {string} [$select] The list of properties that need to be returned
         * @param {string} [$expand] The list of related queries that need to be included in the result
         * @param {string} [$filter] A filter query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v11ObservationsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Observations> {
            return localVarFp.v11ObservationsGet($skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ObservationsApi - interface
 * @export
 * @interface ObservationsApi
 */
export interface ObservationsApiInterface {
    /**
     * Returns information about the datastream for the observation identified by **entityId**
     * @summary Get information about an observation\'s datastream
     * @param {number} entityId The id of the requested entity
     * @param {string} [$select] The list of properties that need to be returned
     * @param {string} [$expand] The list of related queries that need to be included in the result
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObservationsApiInterface
     */
    v11ObservationsEntityIdDatastreamGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig): AxiosPromise<Datastream>;

    /**
     * Returns all observations for the datastream of the observation identified by **entityId** (subject to any other parameters set)
     * @summary Get all observations for an observations\'s datastream
     * @param {number} entityId The id of the requested entity
     * @param {number} [$skip] The number of elements to skip from the collection
     * @param {number} [$top] The number of elements to return
     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.
     * @param {string} [$select] The list of properties that need to be returned
     * @param {string} [$expand] The list of related queries that need to be included in the result
     * @param {string} [$filter] A filter query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObservationsApiInterface
     */
    v11ObservationsEntityIdDatastreamObservationsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Observations>;

    /**
     * 
     * @param {number} entityId The id of the requested entity
     * @param {number} [$skip] The number of elements to skip from the collection
     * @param {number} [$top] The number of elements to return
     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.
     * @param {string} [$select] The list of properties that need to be returned
     * @param {string} [$expand] The list of related queries that need to be included in the result
     * @param {string} [$filter] A filter query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObservationsApiInterface
     */
    v11ObservationsEntityIdDatastreamObservedPropertyDatastreamsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Datastreams>;

    /**
     * 
     * @param {number} entityId The id of the requested entity
     * @param {string} [$select] The list of properties that need to be returned
     * @param {string} [$expand] The list of related queries that need to be included in the result
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObservationsApiInterface
     */
    v11ObservationsEntityIdDatastreamObservedPropertyGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig): AxiosPromise<ObservedProperty>;

    /**
     * 
     * @param {number} entityId The id of the requested entity
     * @param {number} [$skip] The number of elements to skip from the collection
     * @param {number} [$top] The number of elements to return
     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.
     * @param {string} [$select] The list of properties that need to be returned
     * @param {string} [$expand] The list of related queries that need to be included in the result
     * @param {string} [$filter] A filter query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObservationsApiInterface
     */
    v11ObservationsEntityIdDatastreamSensorDatastreamsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Datastreams>;

    /**
     * 
     * @param {number} entityId The id of the requested entity
     * @param {string} [$select] The list of properties that need to be returned
     * @param {string} [$expand] The list of related queries that need to be included in the result
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObservationsApiInterface
     */
    v11ObservationsEntityIdDatastreamSensorGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig): AxiosPromise<Sensor>;

    /**
     * 
     * @param {number} entityId The id of the requested entity
     * @param {number} [$skip] The number of elements to skip from the collection
     * @param {number} [$top] The number of elements to return
     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.
     * @param {string} [$select] The list of properties that need to be returned
     * @param {string} [$expand] The list of related queries that need to be included in the result
     * @param {string} [$filter] A filter query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObservationsApiInterface
     */
    v11ObservationsEntityIdDatastreamThingDatastreamsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Datastreams>;

    /**
     * 
     * @param {number} entityId The id of the requested entity
     * @param {string} [$select] The list of properties that need to be returned
     * @param {string} [$expand] The list of related queries that need to be included in the result
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObservationsApiInterface
     */
    v11ObservationsEntityIdDatastreamThingGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig): AxiosPromise<Thing>;

    /**
     * 
     * @param {number} entityId The id of the requested entity
     * @param {number} [$skip] The number of elements to skip from the collection
     * @param {number} [$top] The number of elements to return
     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.
     * @param {string} [$select] The list of properties that need to be returned
     * @param {string} [$expand] The list of related queries that need to be included in the result
     * @param {string} [$filter] A filter query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObservationsApiInterface
     */
    v11ObservationsEntityIdDatastreamThingLocationsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Locations>;

    /**
     * Returns information about the feature of interest for the observation identified by **entityId**
     * @summary Get information about an observation\'s feature of interest
     * @param {number} entityId The id of the requested entity
     * @param {string} [$select] The list of properties that need to be returned
     * @param {string} [$expand] The list of related queries that need to be included in the result
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObservationsApiInterface
     */
    v11ObservationsEntityIdFeatureOfInterestGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig): AxiosPromise<FeatureOfInterest>;

    /**
     * 
     * @param {number} entityId The id of the requested entity
     * @param {number} [$skip] The number of elements to skip from the collection
     * @param {number} [$top] The number of elements to return
     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.
     * @param {string} [$select] The list of properties that need to be returned
     * @param {string} [$expand] The list of related queries that need to be included in the result
     * @param {string} [$filter] A filter query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObservationsApiInterface
     */
    v11ObservationsEntityIdFeatureOfInterestObservationsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Observations>;

    /**
     * Returns information about the observation identified by **entityId**
     * @summary Get information about an individual observation
     * @param {number} entityId The id of the requested entity
     * @param {string} [$select] The list of properties that need to be returned
     * @param {string} [$expand] The list of related queries that need to be included in the result
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObservationsApiInterface
     */
    v11ObservationsEntityIdGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig): AxiosPromise<Observation>;

    /**
     * Returns all the observations provided by this api (subject to any parameters set)
     * @summary Get all observations
     * @param {number} [$skip] The number of elements to skip from the collection
     * @param {number} [$top] The number of elements to return
     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.
     * @param {string} [$select] The list of properties that need to be returned
     * @param {string} [$expand] The list of related queries that need to be included in the result
     * @param {string} [$filter] A filter query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObservationsApiInterface
     */
    v11ObservationsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Observations>;

}

/**
 * ObservationsApi - object-oriented interface
 * @export
 * @class ObservationsApi
 * @extends {BaseAPI}
 */
export class ObservationsApi extends BaseAPI implements ObservationsApiInterface {
    /**
     * Returns information about the datastream for the observation identified by **entityId**
     * @summary Get information about an observation\'s datastream
     * @param {number} entityId The id of the requested entity
     * @param {string} [$select] The list of properties that need to be returned
     * @param {string} [$expand] The list of related queries that need to be included in the result
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObservationsApi
     */
    public v11ObservationsEntityIdDatastreamGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig) {
        return ObservationsApiFp(this.configuration).v11ObservationsEntityIdDatastreamGet(entityId, $select, $expand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns all observations for the datastream of the observation identified by **entityId** (subject to any other parameters set)
     * @summary Get all observations for an observations\'s datastream
     * @param {number} entityId The id of the requested entity
     * @param {number} [$skip] The number of elements to skip from the collection
     * @param {number} [$top] The number of elements to return
     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.
     * @param {string} [$select] The list of properties that need to be returned
     * @param {string} [$expand] The list of related queries that need to be included in the result
     * @param {string} [$filter] A filter query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObservationsApi
     */
    public v11ObservationsEntityIdDatastreamObservationsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {
        return ObservationsApiFp(this.configuration).v11ObservationsEntityIdDatastreamObservationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} entityId The id of the requested entity
     * @param {number} [$skip] The number of elements to skip from the collection
     * @param {number} [$top] The number of elements to return
     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.
     * @param {string} [$select] The list of properties that need to be returned
     * @param {string} [$expand] The list of related queries that need to be included in the result
     * @param {string} [$filter] A filter query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObservationsApi
     */
    public v11ObservationsEntityIdDatastreamObservedPropertyDatastreamsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {
        return ObservationsApiFp(this.configuration).v11ObservationsEntityIdDatastreamObservedPropertyDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} entityId The id of the requested entity
     * @param {string} [$select] The list of properties that need to be returned
     * @param {string} [$expand] The list of related queries that need to be included in the result
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObservationsApi
     */
    public v11ObservationsEntityIdDatastreamObservedPropertyGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig) {
        return ObservationsApiFp(this.configuration).v11ObservationsEntityIdDatastreamObservedPropertyGet(entityId, $select, $expand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} entityId The id of the requested entity
     * @param {number} [$skip] The number of elements to skip from the collection
     * @param {number} [$top] The number of elements to return
     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.
     * @param {string} [$select] The list of properties that need to be returned
     * @param {string} [$expand] The list of related queries that need to be included in the result
     * @param {string} [$filter] A filter query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObservationsApi
     */
    public v11ObservationsEntityIdDatastreamSensorDatastreamsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {
        return ObservationsApiFp(this.configuration).v11ObservationsEntityIdDatastreamSensorDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} entityId The id of the requested entity
     * @param {string} [$select] The list of properties that need to be returned
     * @param {string} [$expand] The list of related queries that need to be included in the result
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObservationsApi
     */
    public v11ObservationsEntityIdDatastreamSensorGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig) {
        return ObservationsApiFp(this.configuration).v11ObservationsEntityIdDatastreamSensorGet(entityId, $select, $expand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} entityId The id of the requested entity
     * @param {number} [$skip] The number of elements to skip from the collection
     * @param {number} [$top] The number of elements to return
     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.
     * @param {string} [$select] The list of properties that need to be returned
     * @param {string} [$expand] The list of related queries that need to be included in the result
     * @param {string} [$filter] A filter query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObservationsApi
     */
    public v11ObservationsEntityIdDatastreamThingDatastreamsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {
        return ObservationsApiFp(this.configuration).v11ObservationsEntityIdDatastreamThingDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} entityId The id of the requested entity
     * @param {string} [$select] The list of properties that need to be returned
     * @param {string} [$expand] The list of related queries that need to be included in the result
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObservationsApi
     */
    public v11ObservationsEntityIdDatastreamThingGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig) {
        return ObservationsApiFp(this.configuration).v11ObservationsEntityIdDatastreamThingGet(entityId, $select, $expand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} entityId The id of the requested entity
     * @param {number} [$skip] The number of elements to skip from the collection
     * @param {number} [$top] The number of elements to return
     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.
     * @param {string} [$select] The list of properties that need to be returned
     * @param {string} [$expand] The list of related queries that need to be included in the result
     * @param {string} [$filter] A filter query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObservationsApi
     */
    public v11ObservationsEntityIdDatastreamThingLocationsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {
        return ObservationsApiFp(this.configuration).v11ObservationsEntityIdDatastreamThingLocationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns information about the feature of interest for the observation identified by **entityId**
     * @summary Get information about an observation\'s feature of interest
     * @param {number} entityId The id of the requested entity
     * @param {string} [$select] The list of properties that need to be returned
     * @param {string} [$expand] The list of related queries that need to be included in the result
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObservationsApi
     */
    public v11ObservationsEntityIdFeatureOfInterestGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig) {
        return ObservationsApiFp(this.configuration).v11ObservationsEntityIdFeatureOfInterestGet(entityId, $select, $expand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} entityId The id of the requested entity
     * @param {number} [$skip] The number of elements to skip from the collection
     * @param {number} [$top] The number of elements to return
     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.
     * @param {string} [$select] The list of properties that need to be returned
     * @param {string} [$expand] The list of related queries that need to be included in the result
     * @param {string} [$filter] A filter query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObservationsApi
     */
    public v11ObservationsEntityIdFeatureOfInterestObservationsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {
        return ObservationsApiFp(this.configuration).v11ObservationsEntityIdFeatureOfInterestObservationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns information about the observation identified by **entityId**
     * @summary Get information about an individual observation
     * @param {number} entityId The id of the requested entity
     * @param {string} [$select] The list of properties that need to be returned
     * @param {string} [$expand] The list of related queries that need to be included in the result
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObservationsApi
     */
    public v11ObservationsEntityIdGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig) {
        return ObservationsApiFp(this.configuration).v11ObservationsEntityIdGet(entityId, $select, $expand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns all the observations provided by this api (subject to any parameters set)
     * @summary Get all observations
     * @param {number} [$skip] The number of elements to skip from the collection
     * @param {number} [$top] The number of elements to return
     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.
     * @param {string} [$select] The list of properties that need to be returned
     * @param {string} [$expand] The list of related queries that need to be included in the result
     * @param {string} [$filter] A filter query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObservationsApi
     */
    public v11ObservationsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {
        return ObservationsApiFp(this.configuration).v11ObservationsGet($skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ObservedPropertiesApi - axios parameter creator
 * @export
 */
export const ObservedPropertiesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns all datastreams for the observed property identified by **entityId** (subject to any other parameters set)
         * @summary Get all datastreams for an observed property
         * @param {number} entityId The id of the requested entity
         * @param {number} [$skip] The number of elements to skip from the collection
         * @param {number} [$top] The number of elements to return
         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.
         * @param {string} [$select] The list of properties that need to be returned
         * @param {string} [$expand] The list of related queries that need to be included in the result
         * @param {string} [$filter] A filter query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v11ObservedPropertiesEntityIdDatastreamsGet: async (entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'entityId' is not null or undefined
            assertParamExists('v11ObservedPropertiesEntityIdDatastreamsGet', 'entityId', entityId)
            const localVarPath = `/v1.1/ObservedProperties({entityId})/Datastreams`
                .replace(`{${"entityId"}}`, encodeURIComponent(String(entityId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if ($skip !== undefined) {
                localVarQueryParameter['$skip'] = $skip;
            }

            if ($top !== undefined) {
                localVarQueryParameter['$top'] = $top;
            }

            if ($count !== undefined) {
                localVarQueryParameter['$count'] = $count;
            }

            if ($select !== undefined) {
                localVarQueryParameter['$select'] = $select;
            }

            if ($expand !== undefined) {
                localVarQueryParameter['$expand'] = $expand;
            }

            if ($filter !== undefined) {
                localVarQueryParameter['$filter'] = $filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns information about the observed property identified by **entityId**
         * @summary Get information about an individual observed property
         * @param {number} entityId The id of the requested entity
         * @param {string} [$select] The list of properties that need to be returned
         * @param {string} [$expand] The list of related queries that need to be included in the result
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v11ObservedPropertiesEntityIdGet: async (entityId: number, $select?: string, $expand?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'entityId' is not null or undefined
            assertParamExists('v11ObservedPropertiesEntityIdGet', 'entityId', entityId)
            const localVarPath = `/v1.1/ObservedProperties({entityId})`
                .replace(`{${"entityId"}}`, encodeURIComponent(String(entityId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if ($select !== undefined) {
                localVarQueryParameter['$select'] = $select;
            }

            if ($expand !== undefined) {
                localVarQueryParameter['$expand'] = $expand;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns all the observed properties provided by this api (subject to any parameters set)
         * @summary Get all observed properties
         * @param {number} [$skip] The number of elements to skip from the collection
         * @param {number} [$top] The number of elements to return
         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.
         * @param {string} [$select] The list of properties that need to be returned
         * @param {string} [$expand] The list of related queries that need to be included in the result
         * @param {string} [$filter] A filter query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v11ObservedPropertiesGet: async ($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1.1/ObservedProperties`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if ($skip !== undefined) {
                localVarQueryParameter['$skip'] = $skip;
            }

            if ($top !== undefined) {
                localVarQueryParameter['$top'] = $top;
            }

            if ($count !== undefined) {
                localVarQueryParameter['$count'] = $count;
            }

            if ($select !== undefined) {
                localVarQueryParameter['$select'] = $select;
            }

            if ($expand !== undefined) {
                localVarQueryParameter['$expand'] = $expand;
            }

            if ($filter !== undefined) {
                localVarQueryParameter['$filter'] = $filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ObservedPropertiesApi - functional programming interface
 * @export
 */
export const ObservedPropertiesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ObservedPropertiesApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns all datastreams for the observed property identified by **entityId** (subject to any other parameters set)
         * @summary Get all datastreams for an observed property
         * @param {number} entityId The id of the requested entity
         * @param {number} [$skip] The number of elements to skip from the collection
         * @param {number} [$top] The number of elements to return
         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.
         * @param {string} [$select] The list of properties that need to be returned
         * @param {string} [$expand] The list of related queries that need to be included in the result
         * @param {string} [$filter] A filter query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v11ObservedPropertiesEntityIdDatastreamsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Datastreams>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ObservedPropertiesEntityIdDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns information about the observed property identified by **entityId**
         * @summary Get information about an individual observed property
         * @param {number} entityId The id of the requested entity
         * @param {string} [$select] The list of properties that need to be returned
         * @param {string} [$expand] The list of related queries that need to be included in the result
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v11ObservedPropertiesEntityIdGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ObservedProperty>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ObservedPropertiesEntityIdGet(entityId, $select, $expand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns all the observed properties provided by this api (subject to any parameters set)
         * @summary Get all observed properties
         * @param {number} [$skip] The number of elements to skip from the collection
         * @param {number} [$top] The number of elements to return
         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.
         * @param {string} [$select] The list of properties that need to be returned
         * @param {string} [$expand] The list of related queries that need to be included in the result
         * @param {string} [$filter] A filter query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v11ObservedPropertiesGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ObservedProperties>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ObservedPropertiesGet($skip, $top, $count, $select, $expand, $filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ObservedPropertiesApi - factory interface
 * @export
 */
export const ObservedPropertiesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ObservedPropertiesApiFp(configuration)
    return {
        /**
         * Returns all datastreams for the observed property identified by **entityId** (subject to any other parameters set)
         * @summary Get all datastreams for an observed property
         * @param {number} entityId The id of the requested entity
         * @param {number} [$skip] The number of elements to skip from the collection
         * @param {number} [$top] The number of elements to return
         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.
         * @param {string} [$select] The list of properties that need to be returned
         * @param {string} [$expand] The list of related queries that need to be included in the result
         * @param {string} [$filter] A filter query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v11ObservedPropertiesEntityIdDatastreamsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Datastreams> {
            return localVarFp.v11ObservedPropertiesEntityIdDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns information about the observed property identified by **entityId**
         * @summary Get information about an individual observed property
         * @param {number} entityId The id of the requested entity
         * @param {string} [$select] The list of properties that need to be returned
         * @param {string} [$expand] The list of related queries that need to be included in the result
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v11ObservedPropertiesEntityIdGet(entityId: number, $select?: string, $expand?: string, options?: any): AxiosPromise<ObservedProperty> {
            return localVarFp.v11ObservedPropertiesEntityIdGet(entityId, $select, $expand, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns all the observed properties provided by this api (subject to any parameters set)
         * @summary Get all observed properties
         * @param {number} [$skip] The number of elements to skip from the collection
         * @param {number} [$top] The number of elements to return
         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.
         * @param {string} [$select] The list of properties that need to be returned
         * @param {string} [$expand] The list of related queries that need to be included in the result
         * @param {string} [$filter] A filter query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v11ObservedPropertiesGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<ObservedProperties> {
            return localVarFp.v11ObservedPropertiesGet($skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ObservedPropertiesApi - interface
 * @export
 * @interface ObservedPropertiesApi
 */
export interface ObservedPropertiesApiInterface {
    /**
     * Returns all datastreams for the observed property identified by **entityId** (subject to any other parameters set)
     * @summary Get all datastreams for an observed property
     * @param {number} entityId The id of the requested entity
     * @param {number} [$skip] The number of elements to skip from the collection
     * @param {number} [$top] The number of elements to return
     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.
     * @param {string} [$select] The list of properties that need to be returned
     * @param {string} [$expand] The list of related queries that need to be included in the result
     * @param {string} [$filter] A filter query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObservedPropertiesApiInterface
     */
    v11ObservedPropertiesEntityIdDatastreamsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Datastreams>;

    /**
     * Returns information about the observed property identified by **entityId**
     * @summary Get information about an individual observed property
     * @param {number} entityId The id of the requested entity
     * @param {string} [$select] The list of properties that need to be returned
     * @param {string} [$expand] The list of related queries that need to be included in the result
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObservedPropertiesApiInterface
     */
    v11ObservedPropertiesEntityIdGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig): AxiosPromise<ObservedProperty>;

    /**
     * Returns all the observed properties provided by this api (subject to any parameters set)
     * @summary Get all observed properties
     * @param {number} [$skip] The number of elements to skip from the collection
     * @param {number} [$top] The number of elements to return
     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.
     * @param {string} [$select] The list of properties that need to be returned
     * @param {string} [$expand] The list of related queries that need to be included in the result
     * @param {string} [$filter] A filter query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObservedPropertiesApiInterface
     */
    v11ObservedPropertiesGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<ObservedProperties>;

}

/**
 * ObservedPropertiesApi - object-oriented interface
 * @export
 * @class ObservedPropertiesApi
 * @extends {BaseAPI}
 */
export class ObservedPropertiesApi extends BaseAPI implements ObservedPropertiesApiInterface {
    /**
     * Returns all datastreams for the observed property identified by **entityId** (subject to any other parameters set)
     * @summary Get all datastreams for an observed property
     * @param {number} entityId The id of the requested entity
     * @param {number} [$skip] The number of elements to skip from the collection
     * @param {number} [$top] The number of elements to return
     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.
     * @param {string} [$select] The list of properties that need to be returned
     * @param {string} [$expand] The list of related queries that need to be included in the result
     * @param {string} [$filter] A filter query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObservedPropertiesApi
     */
    public v11ObservedPropertiesEntityIdDatastreamsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {
        return ObservedPropertiesApiFp(this.configuration).v11ObservedPropertiesEntityIdDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns information about the observed property identified by **entityId**
     * @summary Get information about an individual observed property
     * @param {number} entityId The id of the requested entity
     * @param {string} [$select] The list of properties that need to be returned
     * @param {string} [$expand] The list of related queries that need to be included in the result
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObservedPropertiesApi
     */
    public v11ObservedPropertiesEntityIdGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig) {
        return ObservedPropertiesApiFp(this.configuration).v11ObservedPropertiesEntityIdGet(entityId, $select, $expand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns all the observed properties provided by this api (subject to any parameters set)
     * @summary Get all observed properties
     * @param {number} [$skip] The number of elements to skip from the collection
     * @param {number} [$top] The number of elements to return
     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.
     * @param {string} [$select] The list of properties that need to be returned
     * @param {string} [$expand] The list of related queries that need to be included in the result
     * @param {string} [$filter] A filter query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObservedPropertiesApi
     */
    public v11ObservedPropertiesGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {
        return ObservedPropertiesApiFp(this.configuration).v11ObservedPropertiesGet($skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SensorsApi - axios parameter creator
 * @export
 */
export const SensorsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns all datastreams for the sensor type identified by **entityId** (subject to any other parameters set)
         * @summary Get all datastreams for a sensor type
         * @param {number} entityId The id of the requested entity
         * @param {number} [$skip] The number of elements to skip from the collection
         * @param {number} [$top] The number of elements to return
         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.
         * @param {string} [$select] The list of properties that need to be returned
         * @param {string} [$expand] The list of related queries that need to be included in the result
         * @param {string} [$filter] A filter query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v11SensorsEntityIdDatastreamsGet: async (entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'entityId' is not null or undefined
            assertParamExists('v11SensorsEntityIdDatastreamsGet', 'entityId', entityId)
            const localVarPath = `/v1.1/Sensors({entityId})/Datastreams`
                .replace(`{${"entityId"}}`, encodeURIComponent(String(entityId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if ($skip !== undefined) {
                localVarQueryParameter['$skip'] = $skip;
            }

            if ($top !== undefined) {
                localVarQueryParameter['$top'] = $top;
            }

            if ($count !== undefined) {
                localVarQueryParameter['$count'] = $count;
            }

            if ($select !== undefined) {
                localVarQueryParameter['$select'] = $select;
            }

            if ($expand !== undefined) {
                localVarQueryParameter['$expand'] = $expand;
            }

            if ($filter !== undefined) {
                localVarQueryParameter['$filter'] = $filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns information about the sensor type identified by **entityId**
         * @summary Get information about an individual sensor type
         * @param {number} entityId The id of the requested entity
         * @param {string} [$select] The list of properties that need to be returned
         * @param {string} [$expand] The list of related queries that need to be included in the result
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v11SensorsEntityIdGet: async (entityId: number, $select?: string, $expand?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'entityId' is not null or undefined
            assertParamExists('v11SensorsEntityIdGet', 'entityId', entityId)
            const localVarPath = `/v1.1/Sensors({entityId})`
                .replace(`{${"entityId"}}`, encodeURIComponent(String(entityId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if ($select !== undefined) {
                localVarQueryParameter['$select'] = $select;
            }

            if ($expand !== undefined) {
                localVarQueryParameter['$expand'] = $expand;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns all the sensor types provided by this api (subject to any parameters set)
         * @summary Get all sensor types
         * @param {number} [$skip] The number of elements to skip from the collection
         * @param {number} [$top] The number of elements to return
         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.
         * @param {string} [$select] The list of properties that need to be returned
         * @param {string} [$expand] The list of related queries that need to be included in the result
         * @param {string} [$filter] A filter query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v11SensorsGet: async ($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1.1/Sensors`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if ($skip !== undefined) {
                localVarQueryParameter['$skip'] = $skip;
            }

            if ($top !== undefined) {
                localVarQueryParameter['$top'] = $top;
            }

            if ($count !== undefined) {
                localVarQueryParameter['$count'] = $count;
            }

            if ($select !== undefined) {
                localVarQueryParameter['$select'] = $select;
            }

            if ($expand !== undefined) {
                localVarQueryParameter['$expand'] = $expand;
            }

            if ($filter !== undefined) {
                localVarQueryParameter['$filter'] = $filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SensorsApi - functional programming interface
 * @export
 */
export const SensorsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SensorsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns all datastreams for the sensor type identified by **entityId** (subject to any other parameters set)
         * @summary Get all datastreams for a sensor type
         * @param {number} entityId The id of the requested entity
         * @param {number} [$skip] The number of elements to skip from the collection
         * @param {number} [$top] The number of elements to return
         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.
         * @param {string} [$select] The list of properties that need to be returned
         * @param {string} [$expand] The list of related queries that need to be included in the result
         * @param {string} [$filter] A filter query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v11SensorsEntityIdDatastreamsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Datastreams>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v11SensorsEntityIdDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns information about the sensor type identified by **entityId**
         * @summary Get information about an individual sensor type
         * @param {number} entityId The id of the requested entity
         * @param {string} [$select] The list of properties that need to be returned
         * @param {string} [$expand] The list of related queries that need to be included in the result
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v11SensorsEntityIdGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Sensor>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v11SensorsEntityIdGet(entityId, $select, $expand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns all the sensor types provided by this api (subject to any parameters set)
         * @summary Get all sensor types
         * @param {number} [$skip] The number of elements to skip from the collection
         * @param {number} [$top] The number of elements to return
         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.
         * @param {string} [$select] The list of properties that need to be returned
         * @param {string} [$expand] The list of related queries that need to be included in the result
         * @param {string} [$filter] A filter query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v11SensorsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Sensors>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v11SensorsGet($skip, $top, $count, $select, $expand, $filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SensorsApi - factory interface
 * @export
 */
export const SensorsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SensorsApiFp(configuration)
    return {
        /**
         * Returns all datastreams for the sensor type identified by **entityId** (subject to any other parameters set)
         * @summary Get all datastreams for a sensor type
         * @param {number} entityId The id of the requested entity
         * @param {number} [$skip] The number of elements to skip from the collection
         * @param {number} [$top] The number of elements to return
         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.
         * @param {string} [$select] The list of properties that need to be returned
         * @param {string} [$expand] The list of related queries that need to be included in the result
         * @param {string} [$filter] A filter query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v11SensorsEntityIdDatastreamsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Datastreams> {
            return localVarFp.v11SensorsEntityIdDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns information about the sensor type identified by **entityId**
         * @summary Get information about an individual sensor type
         * @param {number} entityId The id of the requested entity
         * @param {string} [$select] The list of properties that need to be returned
         * @param {string} [$expand] The list of related queries that need to be included in the result
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v11SensorsEntityIdGet(entityId: number, $select?: string, $expand?: string, options?: any): AxiosPromise<Sensor> {
            return localVarFp.v11SensorsEntityIdGet(entityId, $select, $expand, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns all the sensor types provided by this api (subject to any parameters set)
         * @summary Get all sensor types
         * @param {number} [$skip] The number of elements to skip from the collection
         * @param {number} [$top] The number of elements to return
         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.
         * @param {string} [$select] The list of properties that need to be returned
         * @param {string} [$expand] The list of related queries that need to be included in the result
         * @param {string} [$filter] A filter query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v11SensorsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Sensors> {
            return localVarFp.v11SensorsGet($skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SensorsApi - interface
 * @export
 * @interface SensorsApi
 */
export interface SensorsApiInterface {
    /**
     * Returns all datastreams for the sensor type identified by **entityId** (subject to any other parameters set)
     * @summary Get all datastreams for a sensor type
     * @param {number} entityId The id of the requested entity
     * @param {number} [$skip] The number of elements to skip from the collection
     * @param {number} [$top] The number of elements to return
     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.
     * @param {string} [$select] The list of properties that need to be returned
     * @param {string} [$expand] The list of related queries that need to be included in the result
     * @param {string} [$filter] A filter query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SensorsApiInterface
     */
    v11SensorsEntityIdDatastreamsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Datastreams>;

    /**
     * Returns information about the sensor type identified by **entityId**
     * @summary Get information about an individual sensor type
     * @param {number} entityId The id of the requested entity
     * @param {string} [$select] The list of properties that need to be returned
     * @param {string} [$expand] The list of related queries that need to be included in the result
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SensorsApiInterface
     */
    v11SensorsEntityIdGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig): AxiosPromise<Sensor>;

    /**
     * Returns all the sensor types provided by this api (subject to any parameters set)
     * @summary Get all sensor types
     * @param {number} [$skip] The number of elements to skip from the collection
     * @param {number} [$top] The number of elements to return
     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.
     * @param {string} [$select] The list of properties that need to be returned
     * @param {string} [$expand] The list of related queries that need to be included in the result
     * @param {string} [$filter] A filter query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SensorsApiInterface
     */
    v11SensorsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Sensors>;

}

/**
 * SensorsApi - object-oriented interface
 * @export
 * @class SensorsApi
 * @extends {BaseAPI}
 */
export class SensorsApi extends BaseAPI implements SensorsApiInterface {
    /**
     * Returns all datastreams for the sensor type identified by **entityId** (subject to any other parameters set)
     * @summary Get all datastreams for a sensor type
     * @param {number} entityId The id of the requested entity
     * @param {number} [$skip] The number of elements to skip from the collection
     * @param {number} [$top] The number of elements to return
     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.
     * @param {string} [$select] The list of properties that need to be returned
     * @param {string} [$expand] The list of related queries that need to be included in the result
     * @param {string} [$filter] A filter query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SensorsApi
     */
    public v11SensorsEntityIdDatastreamsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {
        return SensorsApiFp(this.configuration).v11SensorsEntityIdDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns information about the sensor type identified by **entityId**
     * @summary Get information about an individual sensor type
     * @param {number} entityId The id of the requested entity
     * @param {string} [$select] The list of properties that need to be returned
     * @param {string} [$expand] The list of related queries that need to be included in the result
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SensorsApi
     */
    public v11SensorsEntityIdGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig) {
        return SensorsApiFp(this.configuration).v11SensorsEntityIdGet(entityId, $select, $expand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns all the sensor types provided by this api (subject to any parameters set)
     * @summary Get all sensor types
     * @param {number} [$skip] The number of elements to skip from the collection
     * @param {number} [$top] The number of elements to return
     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.
     * @param {string} [$select] The list of properties that need to be returned
     * @param {string} [$expand] The list of related queries that need to be included in the result
     * @param {string} [$filter] A filter query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SensorsApi
     */
    public v11SensorsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {
        return SensorsApiFp(this.configuration).v11SensorsGet($skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ThingsApi - axios parameter creator
 * @export
 */
export const ThingsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns all datastreams for the thing identified by **entityId** (subject to any other parameters set)
         * @summary Get all datastreams for a thing
         * @param {number} entityId The id of the requested entity
         * @param {number} [$skip] The number of elements to skip from the collection
         * @param {number} [$top] The number of elements to return
         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.
         * @param {string} [$select] The list of properties that need to be returned
         * @param {string} [$expand] The list of related queries that need to be included in the result
         * @param {string} [$filter] A filter query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v11ThingsEntityIdDatastreamsGet: async (entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'entityId' is not null or undefined
            assertParamExists('v11ThingsEntityIdDatastreamsGet', 'entityId', entityId)
            const localVarPath = `/v1.1/Things({entityId})/Datastreams`
                .replace(`{${"entityId"}}`, encodeURIComponent(String(entityId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if ($skip !== undefined) {
                localVarQueryParameter['$skip'] = $skip;
            }

            if ($top !== undefined) {
                localVarQueryParameter['$top'] = $top;
            }

            if ($count !== undefined) {
                localVarQueryParameter['$count'] = $count;
            }

            if ($select !== undefined) {
                localVarQueryParameter['$select'] = $select;
            }

            if ($expand !== undefined) {
                localVarQueryParameter['$expand'] = $expand;
            }

            if ($filter !== undefined) {
                localVarQueryParameter['$filter'] = $filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns information about the thing identified by **entityId**
         * @summary Get information about an individual thing
         * @param {number} entityId The id of the requested entity
         * @param {string} [$select] The list of properties that need to be returned
         * @param {string} [$expand] The list of related queries that need to be included in the result
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v11ThingsEntityIdGet: async (entityId: number, $select?: string, $expand?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'entityId' is not null or undefined
            assertParamExists('v11ThingsEntityIdGet', 'entityId', entityId)
            const localVarPath = `/v1.1/Things({entityId})`
                .replace(`{${"entityId"}}`, encodeURIComponent(String(entityId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if ($select !== undefined) {
                localVarQueryParameter['$select'] = $select;
            }

            if ($expand !== undefined) {
                localVarQueryParameter['$expand'] = $expand;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns information about the location for the thing identified by **entityId**
         * @summary Get information about a things\'s location
         * @param {number} entityId The id of the requested entity
         * @param {number} [$skip] The number of elements to skip from the collection
         * @param {number} [$top] The number of elements to return
         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.
         * @param {string} [$select] The list of properties that need to be returned
         * @param {string} [$expand] The list of related queries that need to be included in the result
         * @param {string} [$filter] A filter query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v11ThingsEntityIdLocationsGet: async (entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'entityId' is not null or undefined
            assertParamExists('v11ThingsEntityIdLocationsGet', 'entityId', entityId)
            const localVarPath = `/v1.1/Things({entityId})/Locations`
                .replace(`{${"entityId"}}`, encodeURIComponent(String(entityId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if ($skip !== undefined) {
                localVarQueryParameter['$skip'] = $skip;
            }

            if ($top !== undefined) {
                localVarQueryParameter['$top'] = $top;
            }

            if ($count !== undefined) {
                localVarQueryParameter['$count'] = $count;
            }

            if ($select !== undefined) {
                localVarQueryParameter['$select'] = $select;
            }

            if ($expand !== undefined) {
                localVarQueryParameter['$expand'] = $expand;
            }

            if ($filter !== undefined) {
                localVarQueryParameter['$filter'] = $filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns all the things provided by this api (subject to any parameters set)
         * @summary Get all things
         * @param {number} [$skip] The number of elements to skip from the collection
         * @param {number} [$top] The number of elements to return
         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.
         * @param {string} [$select] The list of properties that need to be returned
         * @param {string} [$expand] The list of related queries that need to be included in the result
         * @param {string} [$filter] A filter query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v11ThingsGet: async ($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1.1/Things`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if ($skip !== undefined) {
                localVarQueryParameter['$skip'] = $skip;
            }

            if ($top !== undefined) {
                localVarQueryParameter['$top'] = $top;
            }

            if ($count !== undefined) {
                localVarQueryParameter['$count'] = $count;
            }

            if ($select !== undefined) {
                localVarQueryParameter['$select'] = $select;
            }

            if ($expand !== undefined) {
                localVarQueryParameter['$expand'] = $expand;
            }

            if ($filter !== undefined) {
                localVarQueryParameter['$filter'] = $filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ThingsApi - functional programming interface
 * @export
 */
export const ThingsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ThingsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns all datastreams for the thing identified by **entityId** (subject to any other parameters set)
         * @summary Get all datastreams for a thing
         * @param {number} entityId The id of the requested entity
         * @param {number} [$skip] The number of elements to skip from the collection
         * @param {number} [$top] The number of elements to return
         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.
         * @param {string} [$select] The list of properties that need to be returned
         * @param {string} [$expand] The list of related queries that need to be included in the result
         * @param {string} [$filter] A filter query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v11ThingsEntityIdDatastreamsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Datastreams>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ThingsEntityIdDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns information about the thing identified by **entityId**
         * @summary Get information about an individual thing
         * @param {number} entityId The id of the requested entity
         * @param {string} [$select] The list of properties that need to be returned
         * @param {string} [$expand] The list of related queries that need to be included in the result
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v11ThingsEntityIdGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Thing>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ThingsEntityIdGet(entityId, $select, $expand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns information about the location for the thing identified by **entityId**
         * @summary Get information about a things\'s location
         * @param {number} entityId The id of the requested entity
         * @param {number} [$skip] The number of elements to skip from the collection
         * @param {number} [$top] The number of elements to return
         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.
         * @param {string} [$select] The list of properties that need to be returned
         * @param {string} [$expand] The list of related queries that need to be included in the result
         * @param {string} [$filter] A filter query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v11ThingsEntityIdLocationsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Locations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ThingsEntityIdLocationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns all the things provided by this api (subject to any parameters set)
         * @summary Get all things
         * @param {number} [$skip] The number of elements to skip from the collection
         * @param {number} [$top] The number of elements to return
         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.
         * @param {string} [$select] The list of properties that need to be returned
         * @param {string} [$expand] The list of related queries that need to be included in the result
         * @param {string} [$filter] A filter query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v11ThingsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Things>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ThingsGet($skip, $top, $count, $select, $expand, $filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ThingsApi - factory interface
 * @export
 */
export const ThingsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ThingsApiFp(configuration)
    return {
        /**
         * Returns all datastreams for the thing identified by **entityId** (subject to any other parameters set)
         * @summary Get all datastreams for a thing
         * @param {number} entityId The id of the requested entity
         * @param {number} [$skip] The number of elements to skip from the collection
         * @param {number} [$top] The number of elements to return
         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.
         * @param {string} [$select] The list of properties that need to be returned
         * @param {string} [$expand] The list of related queries that need to be included in the result
         * @param {string} [$filter] A filter query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v11ThingsEntityIdDatastreamsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Datastreams> {
            return localVarFp.v11ThingsEntityIdDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns information about the thing identified by **entityId**
         * @summary Get information about an individual thing
         * @param {number} entityId The id of the requested entity
         * @param {string} [$select] The list of properties that need to be returned
         * @param {string} [$expand] The list of related queries that need to be included in the result
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v11ThingsEntityIdGet(entityId: number, $select?: string, $expand?: string, options?: any): AxiosPromise<Thing> {
            return localVarFp.v11ThingsEntityIdGet(entityId, $select, $expand, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns information about the location for the thing identified by **entityId**
         * @summary Get information about a things\'s location
         * @param {number} entityId The id of the requested entity
         * @param {number} [$skip] The number of elements to skip from the collection
         * @param {number} [$top] The number of elements to return
         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.
         * @param {string} [$select] The list of properties that need to be returned
         * @param {string} [$expand] The list of related queries that need to be included in the result
         * @param {string} [$filter] A filter query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v11ThingsEntityIdLocationsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Locations> {
            return localVarFp.v11ThingsEntityIdLocationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns all the things provided by this api (subject to any parameters set)
         * @summary Get all things
         * @param {number} [$skip] The number of elements to skip from the collection
         * @param {number} [$top] The number of elements to return
         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.
         * @param {string} [$select] The list of properties that need to be returned
         * @param {string} [$expand] The list of related queries that need to be included in the result
         * @param {string} [$filter] A filter query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v11ThingsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Things> {
            return localVarFp.v11ThingsGet($skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ThingsApi - interface
 * @export
 * @interface ThingsApi
 */
export interface ThingsApiInterface {
    /**
     * Returns all datastreams for the thing identified by **entityId** (subject to any other parameters set)
     * @summary Get all datastreams for a thing
     * @param {number} entityId The id of the requested entity
     * @param {number} [$skip] The number of elements to skip from the collection
     * @param {number} [$top] The number of elements to return
     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.
     * @param {string} [$select] The list of properties that need to be returned
     * @param {string} [$expand] The list of related queries that need to be included in the result
     * @param {string} [$filter] A filter query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ThingsApiInterface
     */
    v11ThingsEntityIdDatastreamsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Datastreams>;

    /**
     * Returns information about the thing identified by **entityId**
     * @summary Get information about an individual thing
     * @param {number} entityId The id of the requested entity
     * @param {string} [$select] The list of properties that need to be returned
     * @param {string} [$expand] The list of related queries that need to be included in the result
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ThingsApiInterface
     */
    v11ThingsEntityIdGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig): AxiosPromise<Thing>;

    /**
     * Returns information about the location for the thing identified by **entityId**
     * @summary Get information about a things\'s location
     * @param {number} entityId The id of the requested entity
     * @param {number} [$skip] The number of elements to skip from the collection
     * @param {number} [$top] The number of elements to return
     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.
     * @param {string} [$select] The list of properties that need to be returned
     * @param {string} [$expand] The list of related queries that need to be included in the result
     * @param {string} [$filter] A filter query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ThingsApiInterface
     */
    v11ThingsEntityIdLocationsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Locations>;

    /**
     * Returns all the things provided by this api (subject to any parameters set)
     * @summary Get all things
     * @param {number} [$skip] The number of elements to skip from the collection
     * @param {number} [$top] The number of elements to return
     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.
     * @param {string} [$select] The list of properties that need to be returned
     * @param {string} [$expand] The list of related queries that need to be included in the result
     * @param {string} [$filter] A filter query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ThingsApiInterface
     */
    v11ThingsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Things>;

}

/**
 * ThingsApi - object-oriented interface
 * @export
 * @class ThingsApi
 * @extends {BaseAPI}
 */
export class ThingsApi extends BaseAPI implements ThingsApiInterface {
    /**
     * Returns all datastreams for the thing identified by **entityId** (subject to any other parameters set)
     * @summary Get all datastreams for a thing
     * @param {number} entityId The id of the requested entity
     * @param {number} [$skip] The number of elements to skip from the collection
     * @param {number} [$top] The number of elements to return
     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.
     * @param {string} [$select] The list of properties that need to be returned
     * @param {string} [$expand] The list of related queries that need to be included in the result
     * @param {string} [$filter] A filter query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ThingsApi
     */
    public v11ThingsEntityIdDatastreamsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {
        return ThingsApiFp(this.configuration).v11ThingsEntityIdDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns information about the thing identified by **entityId**
     * @summary Get information about an individual thing
     * @param {number} entityId The id of the requested entity
     * @param {string} [$select] The list of properties that need to be returned
     * @param {string} [$expand] The list of related queries that need to be included in the result
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ThingsApi
     */
    public v11ThingsEntityIdGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig) {
        return ThingsApiFp(this.configuration).v11ThingsEntityIdGet(entityId, $select, $expand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns information about the location for the thing identified by **entityId**
     * @summary Get information about a things\'s location
     * @param {number} entityId The id of the requested entity
     * @param {number} [$skip] The number of elements to skip from the collection
     * @param {number} [$top] The number of elements to return
     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.
     * @param {string} [$select] The list of properties that need to be returned
     * @param {string} [$expand] The list of related queries that need to be included in the result
     * @param {string} [$filter] A filter query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ThingsApi
     */
    public v11ThingsEntityIdLocationsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {
        return ThingsApiFp(this.configuration).v11ThingsEntityIdLocationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns all the things provided by this api (subject to any parameters set)
     * @summary Get all things
     * @param {number} [$skip] The number of elements to skip from the collection
     * @param {number} [$top] The number of elements to return
     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.
     * @param {string} [$select] The list of properties that need to be returned
     * @param {string} [$expand] The list of related queries that need to be included in the result
     * @param {string} [$filter] A filter query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ThingsApi
     */
    public v11ThingsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {
        return ThingsApiFp(this.configuration).v11ThingsGet($skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));
    }
}


