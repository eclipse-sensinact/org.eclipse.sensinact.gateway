{"version":3,"file":"js/app.60e5d50b.js","mappings":"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","sources":["webpack://sensor_thing_api_map/./src/App.vue","webpack://sensor_thing_api_map/./src/App.vue?0e40","webpack://sensor_thing_api_map/./src/views/Map.vue","webpack://sensor_thing_api_map/./openapi/client/base.ts","webpack://sensor_thing_api_map/./openapi/client/common.ts","webpack://sensor_thing_api_map/./openapi/client/api.ts","webpack://sensor_thing_api_map/./src/components/PropertiesView/Properties.vue","webpack://sensor_thing_api_map/./src/components/Location.vue","webpack://sensor_thing_api_map/./src/components/Thing.vue","webpack://sensor_thing_api_map/./src/components/Thing.vue?ef77","webpack://sensor_thing_api_map/./src/components/Thing.vue?d8aa","webpack://sensor_thing_api_map/./src/components/Thing.vue?050e","webpack://sensor_thing_api_map/./src/components/Location.vue?7f00","webpack://sensor_thing_api_map/./src/components/Location.vue?7b65","webpack://sensor_thing_api_map/./src/components/Location.vue?7275","webpack://sensor_thing_api_map/./src/components/Datastreams.vue","webpack://sensor_thing_api_map/./src/components/Observations.vue","webpack://sensor_thing_api_map/./src/components/Observations.vue?3bdf","webpack://sensor_thing_api_map/./src/components/Observations.vue?0eac","webpack://sensor_thing_api_map/./src/components/Observations.vue?a087","webpack://sensor_thing_api_map/./src/components/Datastreams.vue?8a70","webpack://sensor_thing_api_map/./src/components/Datastreams.vue?8cc0","webpack://sensor_thing_api_map/./src/components/Datastreams.vue?f6d9","webpack://sensor_thing_api_map/./src/components/PropertiesView/Properties.vue?6a7d","webpack://sensor_thing_api_map/./src/components/PropertiesView/Properties.vue?b895","webpack://sensor_thing_api_map/./src/components/PropertiesView/Properties.vue?3e6e","webpack://sensor_thing_api_map/./src/views/Map.vue?1271","webpack://sensor_thing_api_map/./src/views/Map.vue?ad3d","webpack://sensor_thing_api_map/./src/views/Map.vue?a06f","webpack://sensor_thing_api_map/./src/components/Tree.vue","webpack://sensor_thing_api_map/./src/components/Tree.vue?8df7","webpack://sensor_thing_api_map/./src/components/Tree.vue?68f9","webpack://sensor_thing_api_map/./src/components/Tree.vue?d009","webpack://sensor_thing_api_map/./src/router/index.ts","webpack://sensor_thing_api_map/./src/i18n.ts","webpack://sensor_thing_api_map/./src/main.ts","webpack://sensor_thing_api_map/./node_modules/moment/locale/ sync ^\\.\\/.*$","webpack://sensor_thing_api_map/webpack/bootstrap","webpack://sensor_thing_api_map/webpack/runtime/chunk loaded","webpack://sensor_thing_api_map/webpack/runtime/compat get default export","webpack://sensor_thing_api_map/webpack/runtime/define property getters","webpack://sensor_thing_api_map/webpack/runtime/global","webpack://sensor_thing_api_map/webpack/runtime/hasOwnProperty shorthand","webpack://sensor_thing_api_map/webpack/runtime/node module decorator","webpack://sensor_thing_api_map/webpack/runtime/jsonp chunk loading","webpack://sensor_thing_api_map/webpack/startup"],"sourcesContent":["var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{attrs:{\"id\":\"app\"}},[_c('nav',[_c('router-link',{attrs:{\"to\":\"/\"}},[_vm._v(\"Home\")]),_vm._v(\" | \"),_c('router-link',{attrs:{\"to\":\"/about\"}},[_vm._v(\"About\")])],1),_c('router-view')],1)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","import { render, staticRenderFns } from \"./App.vue?vue&type=template&id=4af15295&\"\nvar script = {}\nimport style0 from \"./App.vue?vue&type=style&index=0&id=4af15295&prod&lang=scss&\"\n\n\n/* normalize component */\nimport normalizer from \"!../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","var render = function render(){var _vm=this,_c=_vm._self._c,_setup=_vm._self._setupProxy;return _c('div',{staticClass:\"grid\"},[_c('div',{staticClass:\"map_holder rim\"},[_c('l-map',{attrs:{\"id\":\"map\",\"zoom\":_vm.zoom,\"center\":_vm.center}},[_c('l-tile-layer',{attrs:{\"url\":_vm.url,\"attribution\":_vm.attribution}}),_vm._l((_vm.points),function(point){return _c('l-marker',{key:point['@iot.id'],attrs:{\"lat-lng\":_vm.res(point.location.coordinates)},on:{\"click\":function($event){return _vm.markerWasClicked(point)}}},[_c('l-icon',{attrs:{\"class-name\":\"custom-div-icon\"}},[_c('div',{staticClass:\"marker-pin\",class:{'selected':point['@iot.id']==_vm.selected}},[_c('i',{staticClass:\"mdi mdi-radio-tower\"})])])],1)})],2)],1),_c('div',{staticClass:\"sidebar_holder rim\"},[_c('router-view',{attrs:{\"id\":\"sidebar\"},on:{\"TreeSelect\":(data)=>_vm.treeData=data}})],1),_c('div',{staticClass:\"propertie_holder rim\"},[_c('PropertiesC',{attrs:{\"data\":_vm.treeData}})],1),_c('div',{staticClass:\"corner\"})])\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","/* tslint:disable */\n/* eslint-disable */\n/**\n * British Geological Survey Sensors API\n * The British Geological Survey (BGS) Sensor API uses Version v1.1 of the OGC SensorThings API.<br><br> Paths/Endpoints that are not currently in use have been excluded, i.e. those relating to Actuators, MultiDatastreams, Tasks and TaskingCapabilities.<br><br> HistoricalLocations have also been removed.<br><br>\n *\n * The version of the OpenAPI document: 0.1.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport type { Configuration } from './configuration';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';\nimport globalAxios from 'axios';\n\nexport const BASE_PATH = \"https://sensors.bgs.ac.uk/FROST-Server\".replace(/\\/+$/, \"\");\n\n/**\n *\n * @export\n */\nexport const COLLECTION_FORMATS = {\n    csv: \",\",\n    ssv: \" \",\n    tsv: \"\\t\",\n    pipes: \"|\",\n};\n\n/**\n *\n * @export\n * @interface RequestArgs\n */\nexport interface RequestArgs {\n    url: string;\n    options: AxiosRequestConfig;\n}\n\n/**\n *\n * @export\n * @class BaseAPI\n */\nexport class BaseAPI {\n    protected configuration: Configuration | undefined;\n\n    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = configuration.basePath || this.basePath;\n        }\n    }\n};\n\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nexport class RequiredError extends Error {\n    constructor(public field: string, msg?: string) {\n        super(msg);\n        this.name = \"RequiredError\"\n    }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * British Geological Survey Sensors API\n * The British Geological Survey (BGS) Sensor API uses Version v1.1 of the OGC SensorThings API.<br><br> Paths/Endpoints that are not currently in use have been excluded, i.e. those relating to Actuators, MultiDatastreams, Tasks and TaskingCapabilities.<br><br> HistoricalLocations have also been removed.<br><br>\n *\n * The version of the OpenAPI document: 0.1.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport type { Configuration } from \"./configuration\";\nimport type { RequestArgs } from \"./base\";\nimport type { AxiosInstance, AxiosResponse } from 'axios';\nimport { RequiredError } from \"./base\";\n\n/**\n *\n * @export\n */\nexport const DUMMY_BASE_URL = 'https://example.com'\n\n/**\n *\n * @throws {RequiredError}\n * @export\n */\nexport const assertParamExists = function (functionName: string, paramName: string, paramValue: unknown) {\n    if (paramValue === null || paramValue === undefined) {\n        throw new RequiredError(paramName, `Required parameter ${paramName} was null or undefined when calling ${functionName}.`);\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setApiKeyToObject = async function (object: any, keyParamName: string, configuration?: Configuration) {\n    if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n            ? await configuration.apiKey(keyParamName)\n            : await configuration.apiKey;\n        object[keyParamName] = localVarApiKeyValue;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setBasicAuthToObject = function (object: any, configuration?: Configuration) {\n    if (configuration && (configuration.username || configuration.password)) {\n        object[\"auth\"] = { username: configuration.username, password: configuration.password };\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setBearerAuthToObject = async function (object: any, configuration?: Configuration) {\n    if (configuration && configuration.accessToken) {\n        const accessToken = typeof configuration.accessToken === 'function'\n            ? await configuration.accessToken()\n            : await configuration.accessToken;\n        object[\"Authorization\"] = \"Bearer \" + accessToken;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setOAuthToObject = async function (object: any, name: string, scopes: string[], configuration?: Configuration) {\n    if (configuration && configuration.accessToken) {\n        const localVarAccessTokenValue = typeof configuration.accessToken === 'function'\n            ? await configuration.accessToken(name, scopes)\n            : await configuration.accessToken;\n        object[\"Authorization\"] = \"Bearer \" + localVarAccessTokenValue;\n    }\n}\n\nfunction setFlattenedQueryParams(urlSearchParams: URLSearchParams, parameter: any, key: string = \"\"): void {\n    if (parameter == null) return;\n    if (typeof parameter === \"object\") {\n        if (Array.isArray(parameter)) {\n            (parameter as any[]).forEach(item => setFlattenedQueryParams(urlSearchParams, item, key));\n        } \n        else {\n            Object.keys(parameter).forEach(currentKey => \n                setFlattenedQueryParams(urlSearchParams, parameter[currentKey], `${key}${key !== '' ? '.' : ''}${currentKey}`)\n            );\n        }\n    } \n    else {\n        if (urlSearchParams.has(key)) {\n            urlSearchParams.append(key, parameter);\n        } \n        else {\n            urlSearchParams.set(key, parameter);\n        }\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setSearchParams = function (url: URL, ...objects: any[]) {\n    const searchParams = new URLSearchParams(url.search);\n    setFlattenedQueryParams(searchParams, objects);\n    url.search = searchParams.toString();\n}\n\n/**\n *\n * @export\n */\nexport const serializeDataIfNeeded = function (value: any, requestOptions: any, configuration?: Configuration) {\n    const nonString = typeof value !== 'string';\n    const needsSerialization = nonString && configuration && configuration.isJsonMime\n        ? configuration.isJsonMime(requestOptions.headers['Content-Type'])\n        : nonString;\n    return needsSerialization\n        ? JSON.stringify(value !== undefined ? value : {})\n        : (value || \"\");\n}\n\n/**\n *\n * @export\n */\nexport const toPathString = function (url: URL) {\n    return url.pathname + url.search + url.hash\n}\n\n/**\n *\n * @export\n */\nexport const createRequestFunction = function (axiosArgs: RequestArgs, globalAxios: AxiosInstance, BASE_PATH: string, configuration?: Configuration) {\n    return <T = unknown, R = AxiosResponse<T>>(axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n        const axiosRequestArgs = {...axiosArgs.options, url: (configuration?.basePath || basePath) + axiosArgs.url};\n        return axios.request<T, R>(axiosRequestArgs);\n    };\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * British Geological Survey Sensors API\n * The British Geological Survey (BGS) Sensor API uses Version v1.1 of the OGC SensorThings API.<br><br> Paths/Endpoints that are not currently in use have been excluded, i.e. those relating to Actuators, MultiDatastreams, Tasks and TaskingCapabilities.<br><br> HistoricalLocations have also been removed.<br><br>\n *\n * The version of the OpenAPI document: 0.1.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport type { Configuration } from './configuration';\nimport type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';\nimport globalAxios from 'axios';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';\nimport type { RequestArgs } from './base';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';\n\n/**\n * \n * @export\n * @interface Datastream\n */\nexport interface Datastream {\n    /**\n     * The Id of the datastream\n     * @type {number}\n     * @memberof Datastream\n     */\n    '@iot.id'?: number;\n    /**\n     * The direct link to the entity\n     * @type {string}\n     * @memberof Datastream\n     */\n    '@iot.selfLink'?: string;\n    /**\n     * A description of the datastream\n     * @type {string}\n     * @memberof Datastream\n     */\n    'description'?: string;\n    /**\n     * The label or name of the datastream\n     * @type {string}\n     * @memberof Datastream\n     */\n    'name'?: string;\n    /**\n     * The observation type for the datastream, as defined by the OGC Observations and Measurements standard\n     * @type {string}\n     * @memberof Datastream\n     */\n    'observationType'?: string;\n    /**\n     * The bounding box of the spatial extent of all features of interest associated with observations belonging to the Datastream\n     * @type {string}\n     * @memberof Datastream\n     */\n    'observedArea'?: string;\n    /**\n     * The range of phenomenon times from all observations belonging to the datastream\n     * @type {string}\n     * @memberof Datastream\n     */\n    'phenomenonTime'?: string;\n    /**\n     * \n     * @type {DatastreamProperties}\n     * @memberof Datastream\n     */\n    'properties'?: DatastreamProperties;\n    /**\n     * The range of result times from all observations belonging to the datastream\n     * @type {string}\n     * @memberof Datastream\n     */\n    'resultTime'?: string;\n    /**\n     * \n     * @type {DatastreamUnitOfMeasurement}\n     * @memberof Datastream\n     */\n    'unitOfMeasurement'?: DatastreamUnitOfMeasurement;\n}\n/**\n * \n * @export\n * @interface DatastreamProperties\n */\nexport interface DatastreamProperties {\n    /**\n     * The Id of the record in the BGS Sensor Database that is the source of information for the datastream (SEN_MEASURE.measure_id)\n     * @type {string}\n     * @memberof DatastreamProperties\n     */\n    'sen_id'?: string;\n    /**\n     * The type of data provided by the datastream (Measured or Calculated), derived from the observed property\n     * @type {string}\n     * @memberof DatastreamProperties\n     */\n    'data_type'?: string;\n    /**\n     * A description of any access restrictions that apply to metadata and observations associated with this datastream\n     * @type {string}\n     * @memberof DatastreamProperties\n     */\n    'access_restriction'?: string;\n    /**\n     * A description of any restrictions that apply to the use of metadata and observations from this datastream\n     * @type {string}\n     * @memberof DatastreamProperties\n     */\n    'data_usage'?: string;\n    /**\n     * A flag to indicate whether details of this datastream can be publicly released (set to Y or N)\n     * @type {string}\n     * @memberof DatastreamProperties\n     */\n    'publish_yn&quot;'?: string;\n}\n/**\n * \n * @export\n * @interface DatastreamUnitOfMeasurement\n */\nexport interface DatastreamUnitOfMeasurement {\n    /**\n     * The full name of the unit of measurement\n     * @type {string}\n     * @memberof DatastreamUnitOfMeasurement\n     */\n    'name'?: string;\n    /**\n     * The symbol of the unit of measurement\n     * @type {string}\n     * @memberof DatastreamUnitOfMeasurement\n     */\n    'symbol'?: string;\n    /**\n     * A URI for the unit of measurement providing a representation of its definition, ideally following the Unified Code for Unit of Measure (UCUM)\n     * @type {string}\n     * @memberof DatastreamUnitOfMeasurement\n     */\n    'defintion'?: string;\n}\n/**\n * \n * @export\n * @interface Datastreams\n */\nexport interface Datastreams {\n    /**\n     * The total number of entities in the entityset\n     * @type {number}\n     * @memberof Datastreams\n     */\n    '@iot.count'?: number;\n    /**\n     * The link to the next page of entities\n     * @type {string}\n     * @memberof Datastreams\n     */\n    '@iot.nextLink'?: string;\n    /**\n     * \n     * @type {Array<Datastream>}\n     * @memberof Datastreams\n     */\n    'value'?: Array<Datastream>;\n}\n/**\n * \n * @export\n * @interface FeatureOfInterest\n */\nexport interface FeatureOfInterest {\n    /**\n     * The Id of the feature of interest\n     * @type {number}\n     * @memberof FeatureOfInterest\n     */\n    '@iot.id'?: number;\n    /**\n     * The direct link to the entity\n     * @type {string}\n     * @memberof FeatureOfInterest\n     */\n    '@iot.selfLink'?: string;\n    /**\n     * A description of the feature of interest\n     * @type {string}\n     * @memberof FeatureOfInterest\n     */\n    'description'?: string;\n    /**\n     * The encoding type of the \\'feature\\' property\n     * @type {string}\n     * @memberof FeatureOfInterest\n     */\n    'encodingType'?: string;\n    /**\n     * The detailed description of the feature of interest, recorded in line with the type defined by the \\'encodingType\\' property\n     * @type {string}\n     * @memberof FeatureOfInterest\n     */\n    'feature'?: string;\n    /**\n     * The label or name of the feature of interest\n     * @type {string}\n     * @memberof FeatureOfInterest\n     */\n    'name'?: string;\n    /**\n     * \n     * @type {FeatureOfInterestProperties}\n     * @memberof FeatureOfInterest\n     */\n    'properties'?: FeatureOfInterestProperties;\n}\n/**\n * \n * @export\n * @interface FeatureOfInterestProperties\n */\nexport interface FeatureOfInterestProperties {\n    /**\n     * The Id of the record in the BGS Sensor Database that is the source of information for the feature of interest (SEN_FEATURE_OF_INTEREST.foi_id or SEN_SENSOR_LOCATION.sensor_loc_id)\n     * @type {string}\n     * @memberof FeatureOfInterestProperties\n     */\n    'sen_id'?: string;\n    /**\n     * Indicates the feature of interest type, set to \\'SEN_LOC\\' (Sensor Location) or \\'BOREHOLE\\'\n     * @type {string}\n     * @memberof FeatureOfInterestProperties\n     */\n    'type'?: string;\n    /**\n     * The elevation (Z) of the sensor location (type \\'SEN_LOC\\' only)\n     * @type {number}\n     * @memberof FeatureOfInterestProperties\n     */\n    'z'?: number;\n    /**\n     * The vertical co-ordinate reference system of the Z value (type \\'SEN_LOC\\' only)\n     * @type {string}\n     * @memberof FeatureOfInterestProperties\n     */\n    'z_crs'?: string;\n    /**\n     * The time from which the sensor location is effective (type \\'SEN_LOC\\' only)\n     * @type {string}\n     * @memberof FeatureOfInterestProperties\n     */\n    'from_date'?: string;\n    /**\n     * The time from which the sensor location is no longer effective, where it is not set the location is still active (type \\'SEN_LOC\\' only)\n     * @type {string}\n     * @memberof FeatureOfInterestProperties\n     */\n    'to_date'?: string;\n    /**\n     * A flag to indicate whether the sensor location is the active location for a thing (set to Y or N) (type \\'SEN_LOC\\' only)\n     * @type {string}\n     * @memberof FeatureOfInterestProperties\n     */\n    'active_yn&quot;'?: string;\n    /**\n     * The Id of the record in the BGS SOBI Database that is the source of information for the borehole (type \\'BOREHOLE\\' only)\n     * @type {number}\n     * @memberof FeatureOfInterestProperties\n     */\n    'sobi_bgs_id'?: number;\n    /**\n     * The Id of the record in the BGS Universal Borehole Index that is the source of information for the borehole (type \\'BOREHOLE\\' only)\n     * @type {number}\n     * @memberof FeatureOfInterestProperties\n     */\n    'borehole_id'?: number;\n    /**\n     * The drilled length of the borehole in metres (type \\'BOREHOLE\\' only)\n     * @type {number}\n     * @memberof FeatureOfInterestProperties\n     */\n    'drilled_length'?: number;\n    /**\n     * An alternative name by which the borehole is known (type \\'BOREHOLE\\' only)\n     * @type {string}\n     * @memberof FeatureOfInterestProperties\n     */\n    'reference'?: string;\n    /**\n     * Indicates the source of the \\'reference\\' property (type \\'BOREHOLE\\' only)\n     * @type {string}\n     * @memberof FeatureOfInterestProperties\n     */\n    'reference_type'?: string;\n    /**\n     * A flag to indicate whether details of this feature of interest can be publicly released (set to Y or N)\n     * @type {string}\n     * @memberof FeatureOfInterestProperties\n     */\n    'publish_yn'?: string;\n}\n/**\n * \n * @export\n * @interface FeaturesOfInterest\n */\nexport interface FeaturesOfInterest {\n    /**\n     * The total number of entities in the entityset\n     * @type {number}\n     * @memberof FeaturesOfInterest\n     */\n    '@iot.count'?: number;\n    /**\n     * The link to the next page of entities\n     * @type {string}\n     * @memberof FeaturesOfInterest\n     */\n    '@iot.nextLink'?: string;\n    /**\n     * \n     * @type {Array<FeatureOfInterest>}\n     * @memberof FeaturesOfInterest\n     */\n    'value'?: Array<FeatureOfInterest>;\n}\n/**\n * \n * @export\n * @interface Location\n */\nexport interface Location {\n    /**\n     * The Id of the location\n     * @type {number}\n     * @memberof Location\n     */\n    '@iot.id'?: number;\n    /**\n     * The direct link to the entity\n     * @type {string}\n     * @memberof Location\n     */\n    '@iot.selfLink'?: string;\n    /**\n     * A description of the location\n     * @type {string}\n     * @memberof Location\n     */\n    'description'?: string;\n    /**\n     * The encoding type of the \\'location\\' property\n     * @type {string}\n     * @memberof Location\n     */\n    'encodingType'?: string;\n    /**\n     * The location, recorded in line with the type defined by the \\'encodingType\\' property\n     * @type {string}\n     * @memberof Location\n     */\n    'location'?: string;\n    /**\n     * The label or name of the location\n     * @type {string}\n     * @memberof Location\n     */\n    'name'?: string;\n    /**\n     * \n     * @type {LocationProperties}\n     * @memberof Location\n     */\n    'properties'?: LocationProperties;\n}\n/**\n * \n * @export\n * @interface LocationProperties\n */\nexport interface LocationProperties {\n    /**\n     * The Id of the record in the BGS Sensor Database that is the source of information for the location (SEN_SENSOR_LOCATION.sensor_loc_id)\n     * @type {string}\n     * @memberof LocationProperties\n     */\n    'sen_id'?: string;\n    /**\n     * The name of the site to which the location belongs\n     * @type {string}\n     * @memberof LocationProperties\n     */\n    'site'?: string;\n    /**\n     * The name of the observatory to which the location belongs\n     * @type {string}\n     * @memberof LocationProperties\n     */\n    'observatory'?: string;\n    /**\n     * The elevation (Z) of the location\n     * @type {number}\n     * @memberof LocationProperties\n     */\n    'z'?: number;\n    /**\n     * The vertical co-ordinate reference system of the Z value\n     * @type {string}\n     * @memberof LocationProperties\n     */\n    'z_crs'?: string;\n    /**\n     * The time from which the location is effective\n     * @type {string}\n     * @memberof LocationProperties\n     */\n    'from_date'?: string;\n    /**\n     * The time from which the location is no longer effective, where it is not set the location is still active\n     * @type {string}\n     * @memberof LocationProperties\n     */\n    'to_date'?: string;\n    /**\n     * Any additional information about the location where available\n     * @type {string}\n     * @memberof LocationProperties\n     */\n    'comments'?: string;\n    /**\n     * A flag to indicate whether the location is the active location for a thing (set to Y or N)\n     * @type {string}\n     * @memberof LocationProperties\n     */\n    'active_yn&quot;'?: string;\n    /**\n     * A flag to indicate whether details of this location can be publicly released (set to Y or N)\n     * @type {string}\n     * @memberof LocationProperties\n     */\n    'publish_yn&quot;'?: string;\n}\n/**\n * \n * @export\n * @interface Locations\n */\nexport interface Locations {\n    /**\n     * The total number of entities in the entityset\n     * @type {number}\n     * @memberof Locations\n     */\n    '@iot.count'?: number;\n    /**\n     * The link to the next page of entities\n     * @type {string}\n     * @memberof Locations\n     */\n    '@iot.nextLink'?: string;\n    /**\n     * \n     * @type {Array<Location>}\n     * @memberof Locations\n     */\n    'value'?: Array<Location>;\n}\n/**\n * \n * @export\n * @interface Observation\n */\nexport interface Observation {\n    /**\n     * The Id of the observation\n     * @type {number}\n     * @memberof Observation\n     */\n    '@iot.id'?: number;\n    /**\n     * The direct link to the entity\n     * @type {string}\n     * @memberof Observation\n     */\n    '@iot.selfLink'?: string;\n    /**\n     * \n     * @type {ObservationParameters}\n     * @memberof Observation\n     */\n    'parameters'?: ObservationParameters;\n    /**\n     * The time when the observation happened\n     * @type {string}\n     * @memberof Observation\n     */\n    'phenomenonTime'?: string;\n    /**\n     * The estimated value of the observed property\n     * @type {string}\n     * @memberof Observation\n     */\n    'result'?: string;\n    /**\n     * A description of the quality of the result\n     * @type {string}\n     * @memberof Observation\n     */\n    'resultQuality'?: string;\n    /**\n     * The time the result was generated\n     * @type {string}\n     * @memberof Observation\n     */\n    'resultTime'?: string;\n    /**\n     * The time period during which the result can be used\n     * @type {string}\n     * @memberof Observation\n     */\n    'validTime'?: string;\n}\n/**\n * \n * @export\n * @interface ObservationParameters\n */\nexport interface ObservationParameters {\n    /**\n     * The Id of the record in the BGS Sensor Database that is the source of information for the observation (SEN_SENSOR_DATA.sensor_data_id)\n     * @type {string}\n     * @memberof ObservationParameters\n     */\n    'sen_id'?: string;\n    /**\n     * A flag to indicate whether details of this observation can be publicly released (set to Y or N)\n     * @type {string}\n     * @memberof ObservationParameters\n     */\n    'publish_yn&quot;'?: string;\n}\n/**\n * \n * @export\n * @interface Observations\n */\nexport interface Observations {\n    /**\n     * The total number of entities in the entityset\n     * @type {number}\n     * @memberof Observations\n     */\n    '@iot.count'?: number;\n    /**\n     * The link to the next page of entities\n     * @type {string}\n     * @memberof Observations\n     */\n    '@iot.nextLink'?: string;\n    /**\n     * \n     * @type {Array<Observation>}\n     * @memberof Observations\n     */\n    'value'?: Array<Observation>;\n}\n/**\n * \n * @export\n * @interface ObservedProperties\n */\nexport interface ObservedProperties {\n    /**\n     * The total number of entities in the entityset\n     * @type {number}\n     * @memberof ObservedProperties\n     */\n    '@iot.count'?: number;\n    /**\n     * The link to the next page of entities\n     * @type {string}\n     * @memberof ObservedProperties\n     */\n    '@iot.nextLink'?: string;\n    /**\n     * \n     * @type {Array<ObservedProperty>}\n     * @memberof ObservedProperties\n     */\n    'value'?: Array<ObservedProperty>;\n}\n/**\n * \n * @export\n * @interface ObservedProperty\n */\nexport interface ObservedProperty {\n    /**\n     * The Id of the observed property\n     * @type {number}\n     * @memberof ObservedProperty\n     */\n    '@iot.id'?: number;\n    /**\n     * The direct link to the entity\n     * @type {string}\n     * @memberof ObservedProperty\n     */\n    '@iot.selfLink'?: string;\n    /**\n     * A URI for the observed property providing a representation of its definition, ideally through reference to a community based vocabulary\n     * @type {string}\n     * @memberof ObservedProperty\n     */\n    'definition'?: string;\n    /**\n     * A description of the observed property\n     * @type {string}\n     * @memberof ObservedProperty\n     */\n    'description'?: string;\n    /**\n     * The label or name of the observed property\n     * @type {string}\n     * @memberof ObservedProperty\n     */\n    'name'?: string;\n    /**\n     * \n     * @type {ObservedPropertyProperties}\n     * @memberof ObservedProperty\n     */\n    'properties'?: ObservedPropertyProperties;\n}\n/**\n * \n * @export\n * @interface ObservedPropertyProperties\n */\nexport interface ObservedPropertyProperties {\n    /**\n     * The Id of the record in the BGS Sensor Database that is the source of information for the observed property (DIC_SEN_PROPERTY_TYPE.code)\n     * @type {string}\n     * @memberof ObservedPropertyProperties\n     */\n    'sen_id'?: string;\n    /**\n     * The type of data provided by the observed property (Measured or Calculated)\n     * @type {string}\n     * @memberof ObservedPropertyProperties\n     */\n    'data_type'?: string;\n    /**\n     * A description of the formula used to derive values for the observed property (data type \\'Calculated\\' only)\n     * @type {string}\n     * @memberof ObservedPropertyProperties\n     */\n    'formula'?: string;\n    /**\n     * A flag to indicate whether details of this observed property can be publicly released (set to Y or N)\n     * @type {string}\n     * @memberof ObservedPropertyProperties\n     */\n    'publish_yn&quot;'?: string;\n}\n/**\n * \n * @export\n * @interface Sensor\n */\nexport interface Sensor {\n    /**\n     * The Id of the sensor type\n     * @type {number}\n     * @memberof Sensor\n     */\n    '@iot.id'?: number;\n    /**\n     * The direct link to the entity\n     * @type {string}\n     * @memberof Sensor\n     */\n    '@iot.selfLink'?: string;\n    /**\n     * A description of the sensor type\n     * @type {string}\n     * @memberof Sensor\n     */\n    'description'?: string;\n    /**\n     * The encoding type of the \\'metadata\\' property\n     * @type {string}\n     * @memberof Sensor\n     */\n    'encodingType'?: string;\n    /**\n     * A detailed description of the sensor type (style based on \\'encodingType\\' property)\n     * @type {string}\n     * @memberof Sensor\n     */\n    'metadata'?: string;\n    /**\n     * The label or name of the sensor type\n     * @type {string}\n     * @memberof Sensor\n     */\n    'name'?: string;\n    /**\n     * \n     * @type {SensorProperties}\n     * @memberof Sensor\n     */\n    'properties'?: SensorProperties;\n}\n/**\n * \n * @export\n * @interface SensorProperties\n */\nexport interface SensorProperties {\n    /**\n     * The Id of the record in the BGS Sensor Database that is the source of information for the sensor type (DIC_SEN_SENSOR_TYPE.code)\n     * @type {string}\n     * @memberof SensorProperties\n     */\n    'sen_id'?: string;\n    /**\n     * A flag to indicate whether data from the sensor type is complex, and its data observations are therefore defined for MultiDatastreams rather than Datastreams (set to Y or N)\n     * @type {string}\n     * @memberof SensorProperties\n     */\n    'complex_data_yn&quot;'?: string;\n    /**\n     * A flag to indicate whether details of this sensor type can be publicly released (set to Y or N)\n     * @type {string}\n     * @memberof SensorProperties\n     */\n    'publish_yn&quot;'?: string;\n}\n/**\n * \n * @export\n * @interface Sensors\n */\nexport interface Sensors {\n    /**\n     * The total number of entities in the entityset\n     * @type {number}\n     * @memberof Sensors\n     */\n    '@iot.count'?: number;\n    /**\n     * The link to the next page of entities\n     * @type {string}\n     * @memberof Sensors\n     */\n    '@iot.nextLink'?: string;\n    /**\n     * \n     * @type {Array<Sensor>}\n     * @memberof Sensors\n     */\n    'value'?: Array<Sensor>;\n}\n/**\n * \n * @export\n * @interface Thing\n */\nexport interface Thing {\n    /**\n     * The Id of the thing\n     * @type {number}\n     * @memberof Thing\n     */\n    '@iot.id'?: number;\n    /**\n     * The direct link to the entity\n     * @type {string}\n     * @memberof Thing\n     */\n    '@iot.selfLink'?: string;\n    /**\n     * A description of the thing\n     * @type {string}\n     * @memberof Thing\n     */\n    'description'?: string;\n    /**\n     * The label or name of the thing\n     * @type {string}\n     * @memberof Thing\n     */\n    'name'?: string;\n    /**\n     * \n     * @type {ThingProperties}\n     * @memberof Thing\n     */\n    'properties'?: ThingProperties;\n}\n/**\n * \n * @export\n * @interface ThingProperties\n */\nexport interface ThingProperties {\n    /**\n     * The Id of the record in the BGS Sensor Database that is the source of information for the thing (DIC_SEN_SENSOR.code)\n     * @type {string}\n     * @memberof ThingProperties\n     */\n    'sen_id'?: string;\n    /**\n     * Indicates the type of thing, set to \\'SENSOR\\'\n     * @type {string}\n     * @memberof ThingProperties\n     */\n    'type'?: string;\n    /**\n     * The serial number of the physical sensor currently installed if known\n     * @type {string}\n     * @memberof ThingProperties\n     */\n    'serial_no'?: string;\n    /**\n     * Indicates how data from the thing is captured (Telemetered, Manual)\n     * @type {string}\n     * @memberof ThingProperties\n     */\n    'data_capture'?: string;\n    /**\n     * The earliest observation date for which data from the thing will be available in the API\n     * @type {string}\n     * @memberof ThingProperties\n     */\n    'observation_start_date'?: string;\n    /**\n     * The elevation (Z) of the thing\\'s datum\n     * @type {number}\n     * @memberof ThingProperties\n     */\n    'datum_z'?: number;\n    /**\n     * The vertical co-ordinate reference system of the \\'datum_z\\' value\n     * @type {string}\n     * @memberof ThingProperties\n     */\n    'datum_z_crs'?: string;\n    /**\n     * The label or name for the thing\\'s datum\n     * @type {string}\n     * @memberof ThingProperties\n     */\n    'datum_name'?: string;\n    /**\n     * The Id of the record in the BGS Sensor Database that is the source of information for the thing (DIC_SEN_SENSOR.code)\n     * @type {string}\n     * @memberof ThingProperties\n     */\n    'borehole_reference'?: string;\n    /**\n     * A description of any access restrictions that apply to metadata and observations associated with this thing\n     * @type {string}\n     * @memberof ThingProperties\n     */\n    'access_restriction'?: string;\n    /**\n     * A description of any restrictions that apply to the use of metadata and observations from this thing\n     * @type {string}\n     * @memberof ThingProperties\n     */\n    'data_usage'?: string;\n    /**\n     * A flag to indicate whether details of this thing can be publicly released (set to Y or N)\n     * @type {string}\n     * @memberof ThingProperties\n     */\n    'publish_yn&quot;'?: string;\n}\n/**\n * \n * @export\n * @interface Things\n */\nexport interface Things {\n    /**\n     * The total number of entities in the entityset\n     * @type {number}\n     * @memberof Things\n     */\n    '@iot.count'?: number;\n    /**\n     * The link to the next page of entities\n     * @type {string}\n     * @memberof Things\n     */\n    '@iot.nextLink'?: string;\n    /**\n     * \n     * @type {Array<Thing>}\n     * @memberof Things\n     */\n    'value'?: Array<Thing>;\n}\n\n/**\n * DatastreamsApi - axios parameter creator\n * @export\n */\nexport const DatastreamsApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * Returns information about the datastream identified by **entityId**\n         * @summary Get information about an individual datastream\n         * @param {number} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11DatastreamsEntityIdGet: async (entityId: number, $select?: string, $expand?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11DatastreamsEntityIdGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Datastreams({entityId})`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns all observations for the datastream identified by **entityId** (subject to any other parameters set)\n         * @summary Get all observations for a datastream\n         * @param {number} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11DatastreamsEntityIdObservationsGet: async (entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11DatastreamsEntityIdObservationsGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Datastreams({entityId})/Observations`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns all datastreams that provide the observed property for the datastream identified by **entityId** (subject to any other parameters set)\n         * @summary Get all datastreams that provide a datastream\\'s observed property\n         * @param {number} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11DatastreamsEntityIdObservedPropertyDatastreamsGet: async (entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11DatastreamsEntityIdObservedPropertyDatastreamsGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Datastreams({entityId})/ObservedProperty/Datastreams`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns information about the observed property for the datastream identified by **entityId**\n         * @summary Get information about a datastream\\'s observed property\n         * @param {number} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11DatastreamsEntityIdObservedPropertyGet: async (entityId: number, $select?: string, $expand?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11DatastreamsEntityIdObservedPropertyGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Datastreams({entityId})/ObservedProperty`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns all datastreams which share the sensor type for the datastream identified by **entityId** (subject to any other parameters set)\n         * @summary Get all datastreams which share a datastream\\'s sensor type\n         * @param {number} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11DatastreamsEntityIdSensorDatastreamsGet: async (entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11DatastreamsEntityIdSensorDatastreamsGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Datastreams({entityId})/Sensor/Datastreams`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns information about the sensor type for the datastream identified by **entityId**\n         * @summary Get information about a datastream\\'s sensor type\n         * @param {number} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11DatastreamsEntityIdSensorGet: async (entityId: number, $select?: string, $expand?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11DatastreamsEntityIdSensorGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Datastreams({entityId})/Sensor`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns all datastreams provided by the thing for the datastream identified by **entityId** (subject to any other parameters set)\n         * @summary Get all datastreams provided by a datastream\\'s thing\n         * @param {number} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11DatastreamsEntityIdThingDatastreamsGet: async (entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11DatastreamsEntityIdThingDatastreamsGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Datastreams({entityId})/Thing/Datastreams`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns information about the thing for the datastream identified by **entityId**\n         * @summary Get information about a datastream\\'s thing\n         * @param {number} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11DatastreamsEntityIdThingGet: async (entityId: number, $select?: string, $expand?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11DatastreamsEntityIdThingGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Datastreams({entityId})/Thing`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns all locations of the thing for the datastream identified by **entityId** (subject to any other parameters set)\n         * @summary Get all locations for a datastream\\'s thing\n         * @param {number} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11DatastreamsEntityIdThingLocationsGet: async (entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11DatastreamsEntityIdThingLocationsGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Datastreams({entityId})/Thing/Locations`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns all the datastreams provided by this api (subject to any parameters set)\n         * @summary Get all datastreams\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11DatastreamsGet: async ($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1.1/Datastreams`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * DatastreamsApi - functional programming interface\n * @export\n */\nexport const DatastreamsApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = DatastreamsApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * Returns information about the datastream identified by **entityId**\n         * @summary Get information about an individual datastream\n         * @param {number} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11DatastreamsEntityIdGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Datastream>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11DatastreamsEntityIdGet(entityId, $select, $expand, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns all observations for the datastream identified by **entityId** (subject to any other parameters set)\n         * @summary Get all observations for a datastream\n         * @param {number} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11DatastreamsEntityIdObservationsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Observations>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11DatastreamsEntityIdObservationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns all datastreams that provide the observed property for the datastream identified by **entityId** (subject to any other parameters set)\n         * @summary Get all datastreams that provide a datastream\\'s observed property\n         * @param {number} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11DatastreamsEntityIdObservedPropertyDatastreamsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Datastreams>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11DatastreamsEntityIdObservedPropertyDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns information about the observed property for the datastream identified by **entityId**\n         * @summary Get information about a datastream\\'s observed property\n         * @param {number} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11DatastreamsEntityIdObservedPropertyGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ObservedProperty>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11DatastreamsEntityIdObservedPropertyGet(entityId, $select, $expand, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns all datastreams which share the sensor type for the datastream identified by **entityId** (subject to any other parameters set)\n         * @summary Get all datastreams which share a datastream\\'s sensor type\n         * @param {number} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11DatastreamsEntityIdSensorDatastreamsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Datastreams>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11DatastreamsEntityIdSensorDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns information about the sensor type for the datastream identified by **entityId**\n         * @summary Get information about a datastream\\'s sensor type\n         * @param {number} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11DatastreamsEntityIdSensorGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Sensor>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11DatastreamsEntityIdSensorGet(entityId, $select, $expand, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns all datastreams provided by the thing for the datastream identified by **entityId** (subject to any other parameters set)\n         * @summary Get all datastreams provided by a datastream\\'s thing\n         * @param {number} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11DatastreamsEntityIdThingDatastreamsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Datastreams>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11DatastreamsEntityIdThingDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns information about the thing for the datastream identified by **entityId**\n         * @summary Get information about a datastream\\'s thing\n         * @param {number} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11DatastreamsEntityIdThingGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Thing>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11DatastreamsEntityIdThingGet(entityId, $select, $expand, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns all locations of the thing for the datastream identified by **entityId** (subject to any other parameters set)\n         * @summary Get all locations for a datastream\\'s thing\n         * @param {number} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11DatastreamsEntityIdThingLocationsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Locations>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11DatastreamsEntityIdThingLocationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns all the datastreams provided by this api (subject to any parameters set)\n         * @summary Get all datastreams\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11DatastreamsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Datastreams>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11DatastreamsGet($skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * DatastreamsApi - factory interface\n * @export\n */\nexport const DatastreamsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = DatastreamsApiFp(configuration)\n    return {\n        /**\n         * Returns information about the datastream identified by **entityId**\n         * @summary Get information about an individual datastream\n         * @param {number} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11DatastreamsEntityIdGet(entityId: number, $select?: string, $expand?: string, options?: any): AxiosPromise<Datastream> {\n            return localVarFp.v11DatastreamsEntityIdGet(entityId, $select, $expand, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns all observations for the datastream identified by **entityId** (subject to any other parameters set)\n         * @summary Get all observations for a datastream\n         * @param {number} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11DatastreamsEntityIdObservationsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Observations> {\n            return localVarFp.v11DatastreamsEntityIdObservationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns all datastreams that provide the observed property for the datastream identified by **entityId** (subject to any other parameters set)\n         * @summary Get all datastreams that provide a datastream\\'s observed property\n         * @param {number} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11DatastreamsEntityIdObservedPropertyDatastreamsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Datastreams> {\n            return localVarFp.v11DatastreamsEntityIdObservedPropertyDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns information about the observed property for the datastream identified by **entityId**\n         * @summary Get information about a datastream\\'s observed property\n         * @param {number} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11DatastreamsEntityIdObservedPropertyGet(entityId: number, $select?: string, $expand?: string, options?: any): AxiosPromise<ObservedProperty> {\n            return localVarFp.v11DatastreamsEntityIdObservedPropertyGet(entityId, $select, $expand, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns all datastreams which share the sensor type for the datastream identified by **entityId** (subject to any other parameters set)\n         * @summary Get all datastreams which share a datastream\\'s sensor type\n         * @param {number} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11DatastreamsEntityIdSensorDatastreamsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Datastreams> {\n            return localVarFp.v11DatastreamsEntityIdSensorDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns information about the sensor type for the datastream identified by **entityId**\n         * @summary Get information about a datastream\\'s sensor type\n         * @param {number} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11DatastreamsEntityIdSensorGet(entityId: number, $select?: string, $expand?: string, options?: any): AxiosPromise<Sensor> {\n            return localVarFp.v11DatastreamsEntityIdSensorGet(entityId, $select, $expand, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns all datastreams provided by the thing for the datastream identified by **entityId** (subject to any other parameters set)\n         * @summary Get all datastreams provided by a datastream\\'s thing\n         * @param {number} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11DatastreamsEntityIdThingDatastreamsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Datastreams> {\n            return localVarFp.v11DatastreamsEntityIdThingDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns information about the thing for the datastream identified by **entityId**\n         * @summary Get information about a datastream\\'s thing\n         * @param {number} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11DatastreamsEntityIdThingGet(entityId: number, $select?: string, $expand?: string, options?: any): AxiosPromise<Thing> {\n            return localVarFp.v11DatastreamsEntityIdThingGet(entityId, $select, $expand, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns all locations of the thing for the datastream identified by **entityId** (subject to any other parameters set)\n         * @summary Get all locations for a datastream\\'s thing\n         * @param {number} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11DatastreamsEntityIdThingLocationsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Locations> {\n            return localVarFp.v11DatastreamsEntityIdThingLocationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns all the datastreams provided by this api (subject to any parameters set)\n         * @summary Get all datastreams\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11DatastreamsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Datastreams> {\n            return localVarFp.v11DatastreamsGet($skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * DatastreamsApi - interface\n * @export\n * @interface DatastreamsApi\n */\nexport interface DatastreamsApiInterface {\n    /**\n     * Returns information about the datastream identified by **entityId**\n     * @summary Get information about an individual datastream\n     * @param {number} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DatastreamsApiInterface\n     */\n    v11DatastreamsEntityIdGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig): AxiosPromise<Datastream>;\n\n    /**\n     * Returns all observations for the datastream identified by **entityId** (subject to any other parameters set)\n     * @summary Get all observations for a datastream\n     * @param {number} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DatastreamsApiInterface\n     */\n    v11DatastreamsEntityIdObservationsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Observations>;\n\n    /**\n     * Returns all datastreams that provide the observed property for the datastream identified by **entityId** (subject to any other parameters set)\n     * @summary Get all datastreams that provide a datastream\\'s observed property\n     * @param {number} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DatastreamsApiInterface\n     */\n    v11DatastreamsEntityIdObservedPropertyDatastreamsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Datastreams>;\n\n    /**\n     * Returns information about the observed property for the datastream identified by **entityId**\n     * @summary Get information about a datastream\\'s observed property\n     * @param {number} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DatastreamsApiInterface\n     */\n    v11DatastreamsEntityIdObservedPropertyGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig): AxiosPromise<ObservedProperty>;\n\n    /**\n     * Returns all datastreams which share the sensor type for the datastream identified by **entityId** (subject to any other parameters set)\n     * @summary Get all datastreams which share a datastream\\'s sensor type\n     * @param {number} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DatastreamsApiInterface\n     */\n    v11DatastreamsEntityIdSensorDatastreamsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Datastreams>;\n\n    /**\n     * Returns information about the sensor type for the datastream identified by **entityId**\n     * @summary Get information about a datastream\\'s sensor type\n     * @param {number} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DatastreamsApiInterface\n     */\n    v11DatastreamsEntityIdSensorGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig): AxiosPromise<Sensor>;\n\n    /**\n     * Returns all datastreams provided by the thing for the datastream identified by **entityId** (subject to any other parameters set)\n     * @summary Get all datastreams provided by a datastream\\'s thing\n     * @param {number} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DatastreamsApiInterface\n     */\n    v11DatastreamsEntityIdThingDatastreamsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Datastreams>;\n\n    /**\n     * Returns information about the thing for the datastream identified by **entityId**\n     * @summary Get information about a datastream\\'s thing\n     * @param {number} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DatastreamsApiInterface\n     */\n    v11DatastreamsEntityIdThingGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig): AxiosPromise<Thing>;\n\n    /**\n     * Returns all locations of the thing for the datastream identified by **entityId** (subject to any other parameters set)\n     * @summary Get all locations for a datastream\\'s thing\n     * @param {number} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DatastreamsApiInterface\n     */\n    v11DatastreamsEntityIdThingLocationsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Locations>;\n\n    /**\n     * Returns all the datastreams provided by this api (subject to any parameters set)\n     * @summary Get all datastreams\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DatastreamsApiInterface\n     */\n    v11DatastreamsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Datastreams>;\n\n}\n\n/**\n * DatastreamsApi - object-oriented interface\n * @export\n * @class DatastreamsApi\n * @extends {BaseAPI}\n */\nexport class DatastreamsApi extends BaseAPI implements DatastreamsApiInterface {\n    /**\n     * Returns information about the datastream identified by **entityId**\n     * @summary Get information about an individual datastream\n     * @param {number} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DatastreamsApi\n     */\n    public v11DatastreamsEntityIdGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig) {\n        return DatastreamsApiFp(this.configuration).v11DatastreamsEntityIdGet(entityId, $select, $expand, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns all observations for the datastream identified by **entityId** (subject to any other parameters set)\n     * @summary Get all observations for a datastream\n     * @param {number} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DatastreamsApi\n     */\n    public v11DatastreamsEntityIdObservationsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return DatastreamsApiFp(this.configuration).v11DatastreamsEntityIdObservationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns all datastreams that provide the observed property for the datastream identified by **entityId** (subject to any other parameters set)\n     * @summary Get all datastreams that provide a datastream\\'s observed property\n     * @param {number} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DatastreamsApi\n     */\n    public v11DatastreamsEntityIdObservedPropertyDatastreamsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return DatastreamsApiFp(this.configuration).v11DatastreamsEntityIdObservedPropertyDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns information about the observed property for the datastream identified by **entityId**\n     * @summary Get information about a datastream\\'s observed property\n     * @param {number} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DatastreamsApi\n     */\n    public v11DatastreamsEntityIdObservedPropertyGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig) {\n        return DatastreamsApiFp(this.configuration).v11DatastreamsEntityIdObservedPropertyGet(entityId, $select, $expand, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns all datastreams which share the sensor type for the datastream identified by **entityId** (subject to any other parameters set)\n     * @summary Get all datastreams which share a datastream\\'s sensor type\n     * @param {number} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DatastreamsApi\n     */\n    public v11DatastreamsEntityIdSensorDatastreamsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return DatastreamsApiFp(this.configuration).v11DatastreamsEntityIdSensorDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns information about the sensor type for the datastream identified by **entityId**\n     * @summary Get information about a datastream\\'s sensor type\n     * @param {number} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DatastreamsApi\n     */\n    public v11DatastreamsEntityIdSensorGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig) {\n        return DatastreamsApiFp(this.configuration).v11DatastreamsEntityIdSensorGet(entityId, $select, $expand, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns all datastreams provided by the thing for the datastream identified by **entityId** (subject to any other parameters set)\n     * @summary Get all datastreams provided by a datastream\\'s thing\n     * @param {number} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DatastreamsApi\n     */\n    public v11DatastreamsEntityIdThingDatastreamsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return DatastreamsApiFp(this.configuration).v11DatastreamsEntityIdThingDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns information about the thing for the datastream identified by **entityId**\n     * @summary Get information about a datastream\\'s thing\n     * @param {number} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DatastreamsApi\n     */\n    public v11DatastreamsEntityIdThingGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig) {\n        return DatastreamsApiFp(this.configuration).v11DatastreamsEntityIdThingGet(entityId, $select, $expand, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns all locations of the thing for the datastream identified by **entityId** (subject to any other parameters set)\n     * @summary Get all locations for a datastream\\'s thing\n     * @param {number} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DatastreamsApi\n     */\n    public v11DatastreamsEntityIdThingLocationsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return DatastreamsApiFp(this.configuration).v11DatastreamsEntityIdThingLocationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns all the datastreams provided by this api (subject to any parameters set)\n     * @summary Get all datastreams\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DatastreamsApi\n     */\n    public v11DatastreamsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return DatastreamsApiFp(this.configuration).v11DatastreamsGet($skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n/**\n * FeaturesOfInterestApi - axios parameter creator\n * @export\n */\nexport const FeaturesOfInterestApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * Returns information about the feature of interest identified by **entityId**\n         * @summary Get information about an individual feature of interest\n         * @param {number} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11FeaturesOfInterestEntityIdGet: async (entityId: number, $select?: string, $expand?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11FeaturesOfInterestEntityIdGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/FeaturesOfInterest({entityId})`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns all observations for the feature of interest identified by **entityId** (subject to any other parameters set)\n         * @summary Get all observations for a feature of interest\n         * @param {number} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11FeaturesOfInterestEntityIdObservationsGet: async (entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11FeaturesOfInterestEntityIdObservationsGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/FeaturesOfInterest({entityId})/Observations`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns all the features of interest provided by this api (subject to any parameters set)\n         * @summary Get all features of interest\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11FeaturesOfInterestGet: async ($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1.1/FeaturesOfInterest`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * FeaturesOfInterestApi - functional programming interface\n * @export\n */\nexport const FeaturesOfInterestApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = FeaturesOfInterestApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * Returns information about the feature of interest identified by **entityId**\n         * @summary Get information about an individual feature of interest\n         * @param {number} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11FeaturesOfInterestEntityIdGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeatureOfInterest>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11FeaturesOfInterestEntityIdGet(entityId, $select, $expand, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns all observations for the feature of interest identified by **entityId** (subject to any other parameters set)\n         * @summary Get all observations for a feature of interest\n         * @param {number} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11FeaturesOfInterestEntityIdObservationsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Observations>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11FeaturesOfInterestEntityIdObservationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns all the features of interest provided by this api (subject to any parameters set)\n         * @summary Get all features of interest\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11FeaturesOfInterestGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeaturesOfInterest>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11FeaturesOfInterestGet($skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * FeaturesOfInterestApi - factory interface\n * @export\n */\nexport const FeaturesOfInterestApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = FeaturesOfInterestApiFp(configuration)\n    return {\n        /**\n         * Returns information about the feature of interest identified by **entityId**\n         * @summary Get information about an individual feature of interest\n         * @param {number} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11FeaturesOfInterestEntityIdGet(entityId: number, $select?: string, $expand?: string, options?: any): AxiosPromise<FeatureOfInterest> {\n            return localVarFp.v11FeaturesOfInterestEntityIdGet(entityId, $select, $expand, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns all observations for the feature of interest identified by **entityId** (subject to any other parameters set)\n         * @summary Get all observations for a feature of interest\n         * @param {number} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11FeaturesOfInterestEntityIdObservationsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Observations> {\n            return localVarFp.v11FeaturesOfInterestEntityIdObservationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns all the features of interest provided by this api (subject to any parameters set)\n         * @summary Get all features of interest\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11FeaturesOfInterestGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<FeaturesOfInterest> {\n            return localVarFp.v11FeaturesOfInterestGet($skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * FeaturesOfInterestApi - interface\n * @export\n * @interface FeaturesOfInterestApi\n */\nexport interface FeaturesOfInterestApiInterface {\n    /**\n     * Returns information about the feature of interest identified by **entityId**\n     * @summary Get information about an individual feature of interest\n     * @param {number} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof FeaturesOfInterestApiInterface\n     */\n    v11FeaturesOfInterestEntityIdGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig): AxiosPromise<FeatureOfInterest>;\n\n    /**\n     * Returns all observations for the feature of interest identified by **entityId** (subject to any other parameters set)\n     * @summary Get all observations for a feature of interest\n     * @param {number} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof FeaturesOfInterestApiInterface\n     */\n    v11FeaturesOfInterestEntityIdObservationsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Observations>;\n\n    /**\n     * Returns all the features of interest provided by this api (subject to any parameters set)\n     * @summary Get all features of interest\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof FeaturesOfInterestApiInterface\n     */\n    v11FeaturesOfInterestGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<FeaturesOfInterest>;\n\n}\n\n/**\n * FeaturesOfInterestApi - object-oriented interface\n * @export\n * @class FeaturesOfInterestApi\n * @extends {BaseAPI}\n */\nexport class FeaturesOfInterestApi extends BaseAPI implements FeaturesOfInterestApiInterface {\n    /**\n     * Returns information about the feature of interest identified by **entityId**\n     * @summary Get information about an individual feature of interest\n     * @param {number} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof FeaturesOfInterestApi\n     */\n    public v11FeaturesOfInterestEntityIdGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig) {\n        return FeaturesOfInterestApiFp(this.configuration).v11FeaturesOfInterestEntityIdGet(entityId, $select, $expand, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns all observations for the feature of interest identified by **entityId** (subject to any other parameters set)\n     * @summary Get all observations for a feature of interest\n     * @param {number} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof FeaturesOfInterestApi\n     */\n    public v11FeaturesOfInterestEntityIdObservationsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return FeaturesOfInterestApiFp(this.configuration).v11FeaturesOfInterestEntityIdObservationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns all the features of interest provided by this api (subject to any parameters set)\n     * @summary Get all features of interest\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof FeaturesOfInterestApi\n     */\n    public v11FeaturesOfInterestGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return FeaturesOfInterestApiFp(this.configuration).v11FeaturesOfInterestGet($skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n/**\n * LocationsApi - axios parameter creator\n * @export\n */\nexport const LocationsApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * Returns information about the location identified by **entityId**\n         * @summary Get information about an individual location\n         * @param {number} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11LocationsEntityIdGet: async (entityId: number, $select?: string, $expand?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11LocationsEntityIdGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Locations({entityId})`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns information about the thing at the location identified by **entityId**\n         * @summary Get information about the thing at the location\n         * @param {number} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11LocationsEntityIdThingsGet: async (entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11LocationsEntityIdThingsGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Locations({entityId})/Things`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns all the locations provided by this api (subject to any parameters set)\n         * @summary Get all locations\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11LocationsGet: async ($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1.1/Locations`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * LocationsApi - functional programming interface\n * @export\n */\nexport const LocationsApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = LocationsApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * Returns information about the location identified by **entityId**\n         * @summary Get information about an individual location\n         * @param {number} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11LocationsEntityIdGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Location>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11LocationsEntityIdGet(entityId, $select, $expand, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns information about the thing at the location identified by **entityId**\n         * @summary Get information about the thing at the location\n         * @param {number} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11LocationsEntityIdThingsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Things>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11LocationsEntityIdThingsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns all the locations provided by this api (subject to any parameters set)\n         * @summary Get all locations\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11LocationsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Locations>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11LocationsGet($skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * LocationsApi - factory interface\n * @export\n */\nexport const LocationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = LocationsApiFp(configuration)\n    return {\n        /**\n         * Returns information about the location identified by **entityId**\n         * @summary Get information about an individual location\n         * @param {number} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11LocationsEntityIdGet(entityId: number, $select?: string, $expand?: string, options?: any): AxiosPromise<Location> {\n            return localVarFp.v11LocationsEntityIdGet(entityId, $select, $expand, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns information about the thing at the location identified by **entityId**\n         * @summary Get information about the thing at the location\n         * @param {number} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11LocationsEntityIdThingsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Things> {\n            return localVarFp.v11LocationsEntityIdThingsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns all the locations provided by this api (subject to any parameters set)\n         * @summary Get all locations\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11LocationsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Locations> {\n            return localVarFp.v11LocationsGet($skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * LocationsApi - interface\n * @export\n * @interface LocationsApi\n */\nexport interface LocationsApiInterface {\n    /**\n     * Returns information about the location identified by **entityId**\n     * @summary Get information about an individual location\n     * @param {number} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof LocationsApiInterface\n     */\n    v11LocationsEntityIdGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig): AxiosPromise<Location>;\n\n    /**\n     * Returns information about the thing at the location identified by **entityId**\n     * @summary Get information about the thing at the location\n     * @param {number} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof LocationsApiInterface\n     */\n    v11LocationsEntityIdThingsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Things>;\n\n    /**\n     * Returns all the locations provided by this api (subject to any parameters set)\n     * @summary Get all locations\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof LocationsApiInterface\n     */\n    v11LocationsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Locations>;\n\n}\n\n/**\n * LocationsApi - object-oriented interface\n * @export\n * @class LocationsApi\n * @extends {BaseAPI}\n */\nexport class LocationsApi extends BaseAPI implements LocationsApiInterface {\n    /**\n     * Returns information about the location identified by **entityId**\n     * @summary Get information about an individual location\n     * @param {number} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof LocationsApi\n     */\n    public v11LocationsEntityIdGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig) {\n        return LocationsApiFp(this.configuration).v11LocationsEntityIdGet(entityId, $select, $expand, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns information about the thing at the location identified by **entityId**\n     * @summary Get information about the thing at the location\n     * @param {number} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof LocationsApi\n     */\n    public v11LocationsEntityIdThingsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return LocationsApiFp(this.configuration).v11LocationsEntityIdThingsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns all the locations provided by this api (subject to any parameters set)\n     * @summary Get all locations\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof LocationsApi\n     */\n    public v11LocationsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return LocationsApiFp(this.configuration).v11LocationsGet($skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n/**\n * ObservationsApi - axios parameter creator\n * @export\n */\nexport const ObservationsApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * Returns information about the datastream for the observation identified by **entityId**\n         * @summary Get information about an observation\\'s datastream\n         * @param {number} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdDatastreamGet: async (entityId: number, $select?: string, $expand?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11ObservationsEntityIdDatastreamGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Observations({entityId})/Datastream`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns all observations for the datastream of the observation identified by **entityId** (subject to any other parameters set)\n         * @summary Get all observations for an observations\\'s datastream\n         * @param {number} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdDatastreamObservationsGet: async (entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11ObservationsEntityIdDatastreamObservationsGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Observations({entityId})/Datastream/Observations`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {number} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdDatastreamObservedPropertyDatastreamsGet: async (entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11ObservationsEntityIdDatastreamObservedPropertyDatastreamsGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Observations({entityId})/Datastream/ObservedProperty/Datastreams`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {number} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdDatastreamObservedPropertyGet: async (entityId: number, $select?: string, $expand?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11ObservationsEntityIdDatastreamObservedPropertyGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Observations({entityId})/Datastream/ObservedProperty`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {number} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdDatastreamSensorDatastreamsGet: async (entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11ObservationsEntityIdDatastreamSensorDatastreamsGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Observations({entityId})/Datastream/Sensor/Datastreams`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {number} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdDatastreamSensorGet: async (entityId: number, $select?: string, $expand?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11ObservationsEntityIdDatastreamSensorGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Observations({entityId})/Datastream/Sensor`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {number} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdDatastreamThingDatastreamsGet: async (entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11ObservationsEntityIdDatastreamThingDatastreamsGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Observations({entityId})/Datastream/Thing/Datastreams`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {number} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdDatastreamThingGet: async (entityId: number, $select?: string, $expand?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11ObservationsEntityIdDatastreamThingGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Observations({entityId})/Datastream/Thing`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {number} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdDatastreamThingLocationsGet: async (entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11ObservationsEntityIdDatastreamThingLocationsGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Observations({entityId})/Datastream/Thing/Locations`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns information about the feature of interest for the observation identified by **entityId**\n         * @summary Get information about an observation\\'s feature of interest\n         * @param {number} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdFeatureOfInterestGet: async (entityId: number, $select?: string, $expand?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11ObservationsEntityIdFeatureOfInterestGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Observations({entityId})/FeatureOfInterest`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {number} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdFeatureOfInterestObservationsGet: async (entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11ObservationsEntityIdFeatureOfInterestObservationsGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Observations({entityId})/FeatureOfInterest/Observations`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns information about the observation identified by **entityId**\n         * @summary Get information about an individual observation\n         * @param {number} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdGet: async (entityId: number, $select?: string, $expand?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11ObservationsEntityIdGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Observations({entityId})`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns all the observations provided by this api (subject to any parameters set)\n         * @summary Get all observations\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsGet: async ($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1.1/Observations`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * ObservationsApi - functional programming interface\n * @export\n */\nexport const ObservationsApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = ObservationsApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * Returns information about the datastream for the observation identified by **entityId**\n         * @summary Get information about an observation\\'s datastream\n         * @param {number} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11ObservationsEntityIdDatastreamGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Datastream>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ObservationsEntityIdDatastreamGet(entityId, $select, $expand, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns all observations for the datastream of the observation identified by **entityId** (subject to any other parameters set)\n         * @summary Get all observations for an observations\\'s datastream\n         * @param {number} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11ObservationsEntityIdDatastreamObservationsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Observations>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ObservationsEntityIdDatastreamObservationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @param {number} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11ObservationsEntityIdDatastreamObservedPropertyDatastreamsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Datastreams>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ObservationsEntityIdDatastreamObservedPropertyDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @param {number} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11ObservationsEntityIdDatastreamObservedPropertyGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ObservedProperty>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ObservationsEntityIdDatastreamObservedPropertyGet(entityId, $select, $expand, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @param {number} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11ObservationsEntityIdDatastreamSensorDatastreamsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Datastreams>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ObservationsEntityIdDatastreamSensorDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @param {number} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11ObservationsEntityIdDatastreamSensorGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Sensor>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ObservationsEntityIdDatastreamSensorGet(entityId, $select, $expand, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @param {number} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11ObservationsEntityIdDatastreamThingDatastreamsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Datastreams>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ObservationsEntityIdDatastreamThingDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @param {number} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11ObservationsEntityIdDatastreamThingGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Thing>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ObservationsEntityIdDatastreamThingGet(entityId, $select, $expand, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @param {number} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11ObservationsEntityIdDatastreamThingLocationsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Locations>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ObservationsEntityIdDatastreamThingLocationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns information about the feature of interest for the observation identified by **entityId**\n         * @summary Get information about an observation\\'s feature of interest\n         * @param {number} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11ObservationsEntityIdFeatureOfInterestGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeatureOfInterest>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ObservationsEntityIdFeatureOfInterestGet(entityId, $select, $expand, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @param {number} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11ObservationsEntityIdFeatureOfInterestObservationsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Observations>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ObservationsEntityIdFeatureOfInterestObservationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns information about the observation identified by **entityId**\n         * @summary Get information about an individual observation\n         * @param {number} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11ObservationsEntityIdGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Observation>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ObservationsEntityIdGet(entityId, $select, $expand, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns all the observations provided by this api (subject to any parameters set)\n         * @summary Get all observations\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11ObservationsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Observations>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ObservationsGet($skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * ObservationsApi - factory interface\n * @export\n */\nexport const ObservationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = ObservationsApiFp(configuration)\n    return {\n        /**\n         * Returns information about the datastream for the observation identified by **entityId**\n         * @summary Get information about an observation\\'s datastream\n         * @param {number} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdDatastreamGet(entityId: number, $select?: string, $expand?: string, options?: any): AxiosPromise<Datastream> {\n            return localVarFp.v11ObservationsEntityIdDatastreamGet(entityId, $select, $expand, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns all observations for the datastream of the observation identified by **entityId** (subject to any other parameters set)\n         * @summary Get all observations for an observations\\'s datastream\n         * @param {number} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdDatastreamObservationsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Observations> {\n            return localVarFp.v11ObservationsEntityIdDatastreamObservationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {number} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdDatastreamObservedPropertyDatastreamsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Datastreams> {\n            return localVarFp.v11ObservationsEntityIdDatastreamObservedPropertyDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {number} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdDatastreamObservedPropertyGet(entityId: number, $select?: string, $expand?: string, options?: any): AxiosPromise<ObservedProperty> {\n            return localVarFp.v11ObservationsEntityIdDatastreamObservedPropertyGet(entityId, $select, $expand, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {number} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdDatastreamSensorDatastreamsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Datastreams> {\n            return localVarFp.v11ObservationsEntityIdDatastreamSensorDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {number} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdDatastreamSensorGet(entityId: number, $select?: string, $expand?: string, options?: any): AxiosPromise<Sensor> {\n            return localVarFp.v11ObservationsEntityIdDatastreamSensorGet(entityId, $select, $expand, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {number} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdDatastreamThingDatastreamsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Datastreams> {\n            return localVarFp.v11ObservationsEntityIdDatastreamThingDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {number} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdDatastreamThingGet(entityId: number, $select?: string, $expand?: string, options?: any): AxiosPromise<Thing> {\n            return localVarFp.v11ObservationsEntityIdDatastreamThingGet(entityId, $select, $expand, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {number} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdDatastreamThingLocationsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Locations> {\n            return localVarFp.v11ObservationsEntityIdDatastreamThingLocationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns information about the feature of interest for the observation identified by **entityId**\n         * @summary Get information about an observation\\'s feature of interest\n         * @param {number} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdFeatureOfInterestGet(entityId: number, $select?: string, $expand?: string, options?: any): AxiosPromise<FeatureOfInterest> {\n            return localVarFp.v11ObservationsEntityIdFeatureOfInterestGet(entityId, $select, $expand, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {number} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdFeatureOfInterestObservationsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Observations> {\n            return localVarFp.v11ObservationsEntityIdFeatureOfInterestObservationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns information about the observation identified by **entityId**\n         * @summary Get information about an individual observation\n         * @param {number} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdGet(entityId: number, $select?: string, $expand?: string, options?: any): AxiosPromise<Observation> {\n            return localVarFp.v11ObservationsEntityIdGet(entityId, $select, $expand, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns all the observations provided by this api (subject to any parameters set)\n         * @summary Get all observations\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Observations> {\n            return localVarFp.v11ObservationsGet($skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * ObservationsApi - interface\n * @export\n * @interface ObservationsApi\n */\nexport interface ObservationsApiInterface {\n    /**\n     * Returns information about the datastream for the observation identified by **entityId**\n     * @summary Get information about an observation\\'s datastream\n     * @param {number} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApiInterface\n     */\n    v11ObservationsEntityIdDatastreamGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig): AxiosPromise<Datastream>;\n\n    /**\n     * Returns all observations for the datastream of the observation identified by **entityId** (subject to any other parameters set)\n     * @summary Get all observations for an observations\\'s datastream\n     * @param {number} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApiInterface\n     */\n    v11ObservationsEntityIdDatastreamObservationsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Observations>;\n\n    /**\n     * \n     * @param {number} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApiInterface\n     */\n    v11ObservationsEntityIdDatastreamObservedPropertyDatastreamsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Datastreams>;\n\n    /**\n     * \n     * @param {number} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApiInterface\n     */\n    v11ObservationsEntityIdDatastreamObservedPropertyGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig): AxiosPromise<ObservedProperty>;\n\n    /**\n     * \n     * @param {number} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApiInterface\n     */\n    v11ObservationsEntityIdDatastreamSensorDatastreamsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Datastreams>;\n\n    /**\n     * \n     * @param {number} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApiInterface\n     */\n    v11ObservationsEntityIdDatastreamSensorGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig): AxiosPromise<Sensor>;\n\n    /**\n     * \n     * @param {number} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApiInterface\n     */\n    v11ObservationsEntityIdDatastreamThingDatastreamsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Datastreams>;\n\n    /**\n     * \n     * @param {number} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApiInterface\n     */\n    v11ObservationsEntityIdDatastreamThingGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig): AxiosPromise<Thing>;\n\n    /**\n     * \n     * @param {number} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApiInterface\n     */\n    v11ObservationsEntityIdDatastreamThingLocationsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Locations>;\n\n    /**\n     * Returns information about the feature of interest for the observation identified by **entityId**\n     * @summary Get information about an observation\\'s feature of interest\n     * @param {number} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApiInterface\n     */\n    v11ObservationsEntityIdFeatureOfInterestGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig): AxiosPromise<FeatureOfInterest>;\n\n    /**\n     * \n     * @param {number} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApiInterface\n     */\n    v11ObservationsEntityIdFeatureOfInterestObservationsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Observations>;\n\n    /**\n     * Returns information about the observation identified by **entityId**\n     * @summary Get information about an individual observation\n     * @param {number} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApiInterface\n     */\n    v11ObservationsEntityIdGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig): AxiosPromise<Observation>;\n\n    /**\n     * Returns all the observations provided by this api (subject to any parameters set)\n     * @summary Get all observations\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApiInterface\n     */\n    v11ObservationsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Observations>;\n\n}\n\n/**\n * ObservationsApi - object-oriented interface\n * @export\n * @class ObservationsApi\n * @extends {BaseAPI}\n */\nexport class ObservationsApi extends BaseAPI implements ObservationsApiInterface {\n    /**\n     * Returns information about the datastream for the observation identified by **entityId**\n     * @summary Get information about an observation\\'s datastream\n     * @param {number} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApi\n     */\n    public v11ObservationsEntityIdDatastreamGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig) {\n        return ObservationsApiFp(this.configuration).v11ObservationsEntityIdDatastreamGet(entityId, $select, $expand, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns all observations for the datastream of the observation identified by **entityId** (subject to any other parameters set)\n     * @summary Get all observations for an observations\\'s datastream\n     * @param {number} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApi\n     */\n    public v11ObservationsEntityIdDatastreamObservationsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return ObservationsApiFp(this.configuration).v11ObservationsEntityIdDatastreamObservationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {number} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApi\n     */\n    public v11ObservationsEntityIdDatastreamObservedPropertyDatastreamsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return ObservationsApiFp(this.configuration).v11ObservationsEntityIdDatastreamObservedPropertyDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {number} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApi\n     */\n    public v11ObservationsEntityIdDatastreamObservedPropertyGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig) {\n        return ObservationsApiFp(this.configuration).v11ObservationsEntityIdDatastreamObservedPropertyGet(entityId, $select, $expand, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {number} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApi\n     */\n    public v11ObservationsEntityIdDatastreamSensorDatastreamsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return ObservationsApiFp(this.configuration).v11ObservationsEntityIdDatastreamSensorDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {number} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApi\n     */\n    public v11ObservationsEntityIdDatastreamSensorGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig) {\n        return ObservationsApiFp(this.configuration).v11ObservationsEntityIdDatastreamSensorGet(entityId, $select, $expand, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {number} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApi\n     */\n    public v11ObservationsEntityIdDatastreamThingDatastreamsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return ObservationsApiFp(this.configuration).v11ObservationsEntityIdDatastreamThingDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {number} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApi\n     */\n    public v11ObservationsEntityIdDatastreamThingGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig) {\n        return ObservationsApiFp(this.configuration).v11ObservationsEntityIdDatastreamThingGet(entityId, $select, $expand, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {number} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApi\n     */\n    public v11ObservationsEntityIdDatastreamThingLocationsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return ObservationsApiFp(this.configuration).v11ObservationsEntityIdDatastreamThingLocationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns information about the feature of interest for the observation identified by **entityId**\n     * @summary Get information about an observation\\'s feature of interest\n     * @param {number} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApi\n     */\n    public v11ObservationsEntityIdFeatureOfInterestGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig) {\n        return ObservationsApiFp(this.configuration).v11ObservationsEntityIdFeatureOfInterestGet(entityId, $select, $expand, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {number} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApi\n     */\n    public v11ObservationsEntityIdFeatureOfInterestObservationsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return ObservationsApiFp(this.configuration).v11ObservationsEntityIdFeatureOfInterestObservationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns information about the observation identified by **entityId**\n     * @summary Get information about an individual observation\n     * @param {number} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApi\n     */\n    public v11ObservationsEntityIdGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig) {\n        return ObservationsApiFp(this.configuration).v11ObservationsEntityIdGet(entityId, $select, $expand, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns all the observations provided by this api (subject to any parameters set)\n     * @summary Get all observations\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApi\n     */\n    public v11ObservationsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return ObservationsApiFp(this.configuration).v11ObservationsGet($skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n/**\n * ObservedPropertiesApi - axios parameter creator\n * @export\n */\nexport const ObservedPropertiesApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * Returns all datastreams for the observed property identified by **entityId** (subject to any other parameters set)\n         * @summary Get all datastreams for an observed property\n         * @param {number} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservedPropertiesEntityIdDatastreamsGet: async (entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11ObservedPropertiesEntityIdDatastreamsGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/ObservedProperties({entityId})/Datastreams`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns information about the observed property identified by **entityId**\n         * @summary Get information about an individual observed property\n         * @param {number} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservedPropertiesEntityIdGet: async (entityId: number, $select?: string, $expand?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11ObservedPropertiesEntityIdGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/ObservedProperties({entityId})`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns all the observed properties provided by this api (subject to any parameters set)\n         * @summary Get all observed properties\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservedPropertiesGet: async ($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1.1/ObservedProperties`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * ObservedPropertiesApi - functional programming interface\n * @export\n */\nexport const ObservedPropertiesApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = ObservedPropertiesApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * Returns all datastreams for the observed property identified by **entityId** (subject to any other parameters set)\n         * @summary Get all datastreams for an observed property\n         * @param {number} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11ObservedPropertiesEntityIdDatastreamsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Datastreams>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ObservedPropertiesEntityIdDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns information about the observed property identified by **entityId**\n         * @summary Get information about an individual observed property\n         * @param {number} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11ObservedPropertiesEntityIdGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ObservedProperty>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ObservedPropertiesEntityIdGet(entityId, $select, $expand, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns all the observed properties provided by this api (subject to any parameters set)\n         * @summary Get all observed properties\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11ObservedPropertiesGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ObservedProperties>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ObservedPropertiesGet($skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * ObservedPropertiesApi - factory interface\n * @export\n */\nexport const ObservedPropertiesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = ObservedPropertiesApiFp(configuration)\n    return {\n        /**\n         * Returns all datastreams for the observed property identified by **entityId** (subject to any other parameters set)\n         * @summary Get all datastreams for an observed property\n         * @param {number} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservedPropertiesEntityIdDatastreamsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Datastreams> {\n            return localVarFp.v11ObservedPropertiesEntityIdDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns information about the observed property identified by **entityId**\n         * @summary Get information about an individual observed property\n         * @param {number} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservedPropertiesEntityIdGet(entityId: number, $select?: string, $expand?: string, options?: any): AxiosPromise<ObservedProperty> {\n            return localVarFp.v11ObservedPropertiesEntityIdGet(entityId, $select, $expand, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns all the observed properties provided by this api (subject to any parameters set)\n         * @summary Get all observed properties\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservedPropertiesGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<ObservedProperties> {\n            return localVarFp.v11ObservedPropertiesGet($skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * ObservedPropertiesApi - interface\n * @export\n * @interface ObservedPropertiesApi\n */\nexport interface ObservedPropertiesApiInterface {\n    /**\n     * Returns all datastreams for the observed property identified by **entityId** (subject to any other parameters set)\n     * @summary Get all datastreams for an observed property\n     * @param {number} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservedPropertiesApiInterface\n     */\n    v11ObservedPropertiesEntityIdDatastreamsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Datastreams>;\n\n    /**\n     * Returns information about the observed property identified by **entityId**\n     * @summary Get information about an individual observed property\n     * @param {number} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservedPropertiesApiInterface\n     */\n    v11ObservedPropertiesEntityIdGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig): AxiosPromise<ObservedProperty>;\n\n    /**\n     * Returns all the observed properties provided by this api (subject to any parameters set)\n     * @summary Get all observed properties\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservedPropertiesApiInterface\n     */\n    v11ObservedPropertiesGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<ObservedProperties>;\n\n}\n\n/**\n * ObservedPropertiesApi - object-oriented interface\n * @export\n * @class ObservedPropertiesApi\n * @extends {BaseAPI}\n */\nexport class ObservedPropertiesApi extends BaseAPI implements ObservedPropertiesApiInterface {\n    /**\n     * Returns all datastreams for the observed property identified by **entityId** (subject to any other parameters set)\n     * @summary Get all datastreams for an observed property\n     * @param {number} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservedPropertiesApi\n     */\n    public v11ObservedPropertiesEntityIdDatastreamsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return ObservedPropertiesApiFp(this.configuration).v11ObservedPropertiesEntityIdDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns information about the observed property identified by **entityId**\n     * @summary Get information about an individual observed property\n     * @param {number} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservedPropertiesApi\n     */\n    public v11ObservedPropertiesEntityIdGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig) {\n        return ObservedPropertiesApiFp(this.configuration).v11ObservedPropertiesEntityIdGet(entityId, $select, $expand, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns all the observed properties provided by this api (subject to any parameters set)\n     * @summary Get all observed properties\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservedPropertiesApi\n     */\n    public v11ObservedPropertiesGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return ObservedPropertiesApiFp(this.configuration).v11ObservedPropertiesGet($skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n/**\n * SensorsApi - axios parameter creator\n * @export\n */\nexport const SensorsApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * Returns all datastreams for the sensor type identified by **entityId** (subject to any other parameters set)\n         * @summary Get all datastreams for a sensor type\n         * @param {number} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11SensorsEntityIdDatastreamsGet: async (entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11SensorsEntityIdDatastreamsGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Sensors({entityId})/Datastreams`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns information about the sensor type identified by **entityId**\n         * @summary Get information about an individual sensor type\n         * @param {number} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11SensorsEntityIdGet: async (entityId: number, $select?: string, $expand?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11SensorsEntityIdGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Sensors({entityId})`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns all the sensor types provided by this api (subject to any parameters set)\n         * @summary Get all sensor types\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11SensorsGet: async ($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1.1/Sensors`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * SensorsApi - functional programming interface\n * @export\n */\nexport const SensorsApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = SensorsApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * Returns all datastreams for the sensor type identified by **entityId** (subject to any other parameters set)\n         * @summary Get all datastreams for a sensor type\n         * @param {number} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11SensorsEntityIdDatastreamsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Datastreams>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11SensorsEntityIdDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns information about the sensor type identified by **entityId**\n         * @summary Get information about an individual sensor type\n         * @param {number} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11SensorsEntityIdGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Sensor>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11SensorsEntityIdGet(entityId, $select, $expand, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns all the sensor types provided by this api (subject to any parameters set)\n         * @summary Get all sensor types\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11SensorsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Sensors>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11SensorsGet($skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * SensorsApi - factory interface\n * @export\n */\nexport const SensorsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = SensorsApiFp(configuration)\n    return {\n        /**\n         * Returns all datastreams for the sensor type identified by **entityId** (subject to any other parameters set)\n         * @summary Get all datastreams for a sensor type\n         * @param {number} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11SensorsEntityIdDatastreamsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Datastreams> {\n            return localVarFp.v11SensorsEntityIdDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns information about the sensor type identified by **entityId**\n         * @summary Get information about an individual sensor type\n         * @param {number} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11SensorsEntityIdGet(entityId: number, $select?: string, $expand?: string, options?: any): AxiosPromise<Sensor> {\n            return localVarFp.v11SensorsEntityIdGet(entityId, $select, $expand, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns all the sensor types provided by this api (subject to any parameters set)\n         * @summary Get all sensor types\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11SensorsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Sensors> {\n            return localVarFp.v11SensorsGet($skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * SensorsApi - interface\n * @export\n * @interface SensorsApi\n */\nexport interface SensorsApiInterface {\n    /**\n     * Returns all datastreams for the sensor type identified by **entityId** (subject to any other parameters set)\n     * @summary Get all datastreams for a sensor type\n     * @param {number} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SensorsApiInterface\n     */\n    v11SensorsEntityIdDatastreamsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Datastreams>;\n\n    /**\n     * Returns information about the sensor type identified by **entityId**\n     * @summary Get information about an individual sensor type\n     * @param {number} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SensorsApiInterface\n     */\n    v11SensorsEntityIdGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig): AxiosPromise<Sensor>;\n\n    /**\n     * Returns all the sensor types provided by this api (subject to any parameters set)\n     * @summary Get all sensor types\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SensorsApiInterface\n     */\n    v11SensorsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Sensors>;\n\n}\n\n/**\n * SensorsApi - object-oriented interface\n * @export\n * @class SensorsApi\n * @extends {BaseAPI}\n */\nexport class SensorsApi extends BaseAPI implements SensorsApiInterface {\n    /**\n     * Returns all datastreams for the sensor type identified by **entityId** (subject to any other parameters set)\n     * @summary Get all datastreams for a sensor type\n     * @param {number} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SensorsApi\n     */\n    public v11SensorsEntityIdDatastreamsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return SensorsApiFp(this.configuration).v11SensorsEntityIdDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns information about the sensor type identified by **entityId**\n     * @summary Get information about an individual sensor type\n     * @param {number} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SensorsApi\n     */\n    public v11SensorsEntityIdGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig) {\n        return SensorsApiFp(this.configuration).v11SensorsEntityIdGet(entityId, $select, $expand, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns all the sensor types provided by this api (subject to any parameters set)\n     * @summary Get all sensor types\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SensorsApi\n     */\n    public v11SensorsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return SensorsApiFp(this.configuration).v11SensorsGet($skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n/**\n * ThingsApi - axios parameter creator\n * @export\n */\nexport const ThingsApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * Returns all datastreams for the thing identified by **entityId** (subject to any other parameters set)\n         * @summary Get all datastreams for a thing\n         * @param {number} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ThingsEntityIdDatastreamsGet: async (entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11ThingsEntityIdDatastreamsGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Things({entityId})/Datastreams`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns information about the thing identified by **entityId**\n         * @summary Get information about an individual thing\n         * @param {number} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ThingsEntityIdGet: async (entityId: number, $select?: string, $expand?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11ThingsEntityIdGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Things({entityId})`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns information about the location for the thing identified by **entityId**\n         * @summary Get information about a things\\'s location\n         * @param {number} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ThingsEntityIdLocationsGet: async (entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11ThingsEntityIdLocationsGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Things({entityId})/Locations`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns all the things provided by this api (subject to any parameters set)\n         * @summary Get all things\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ThingsGet: async ($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1.1/Things`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * ThingsApi - functional programming interface\n * @export\n */\nexport const ThingsApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = ThingsApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * Returns all datastreams for the thing identified by **entityId** (subject to any other parameters set)\n         * @summary Get all datastreams for a thing\n         * @param {number} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11ThingsEntityIdDatastreamsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Datastreams>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ThingsEntityIdDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns information about the thing identified by **entityId**\n         * @summary Get information about an individual thing\n         * @param {number} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11ThingsEntityIdGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Thing>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ThingsEntityIdGet(entityId, $select, $expand, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns information about the location for the thing identified by **entityId**\n         * @summary Get information about a things\\'s location\n         * @param {number} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11ThingsEntityIdLocationsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Locations>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ThingsEntityIdLocationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns all the things provided by this api (subject to any parameters set)\n         * @summary Get all things\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11ThingsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Things>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ThingsGet($skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * ThingsApi - factory interface\n * @export\n */\nexport const ThingsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = ThingsApiFp(configuration)\n    return {\n        /**\n         * Returns all datastreams for the thing identified by **entityId** (subject to any other parameters set)\n         * @summary Get all datastreams for a thing\n         * @param {number} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ThingsEntityIdDatastreamsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Datastreams> {\n            return localVarFp.v11ThingsEntityIdDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns information about the thing identified by **entityId**\n         * @summary Get information about an individual thing\n         * @param {number} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ThingsEntityIdGet(entityId: number, $select?: string, $expand?: string, options?: any): AxiosPromise<Thing> {\n            return localVarFp.v11ThingsEntityIdGet(entityId, $select, $expand, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns information about the location for the thing identified by **entityId**\n         * @summary Get information about a things\\'s location\n         * @param {number} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ThingsEntityIdLocationsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Locations> {\n            return localVarFp.v11ThingsEntityIdLocationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns all the things provided by this api (subject to any parameters set)\n         * @summary Get all things\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ThingsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Things> {\n            return localVarFp.v11ThingsGet($skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * ThingsApi - interface\n * @export\n * @interface ThingsApi\n */\nexport interface ThingsApiInterface {\n    /**\n     * Returns all datastreams for the thing identified by **entityId** (subject to any other parameters set)\n     * @summary Get all datastreams for a thing\n     * @param {number} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ThingsApiInterface\n     */\n    v11ThingsEntityIdDatastreamsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Datastreams>;\n\n    /**\n     * Returns information about the thing identified by **entityId**\n     * @summary Get information about an individual thing\n     * @param {number} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ThingsApiInterface\n     */\n    v11ThingsEntityIdGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig): AxiosPromise<Thing>;\n\n    /**\n     * Returns information about the location for the thing identified by **entityId**\n     * @summary Get information about a things\\'s location\n     * @param {number} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ThingsApiInterface\n     */\n    v11ThingsEntityIdLocationsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Locations>;\n\n    /**\n     * Returns all the things provided by this api (subject to any parameters set)\n     * @summary Get all things\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ThingsApiInterface\n     */\n    v11ThingsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Things>;\n\n}\n\n/**\n * ThingsApi - object-oriented interface\n * @export\n * @class ThingsApi\n * @extends {BaseAPI}\n */\nexport class ThingsApi extends BaseAPI implements ThingsApiInterface {\n    /**\n     * Returns all datastreams for the thing identified by **entityId** (subject to any other parameters set)\n     * @summary Get all datastreams for a thing\n     * @param {number} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ThingsApi\n     */\n    public v11ThingsEntityIdDatastreamsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return ThingsApiFp(this.configuration).v11ThingsEntityIdDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns information about the thing identified by **entityId**\n     * @summary Get information about an individual thing\n     * @param {number} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ThingsApi\n     */\n    public v11ThingsEntityIdGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig) {\n        return ThingsApiFp(this.configuration).v11ThingsEntityIdGet(entityId, $select, $expand, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns information about the location for the thing identified by **entityId**\n     * @summary Get information about a things\\'s location\n     * @param {number} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ThingsApi\n     */\n    public v11ThingsEntityIdLocationsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return ThingsApiFp(this.configuration).v11ThingsEntityIdLocationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns all the things provided by this api (subject to any parameters set)\n     * @summary Get all things\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ThingsApi\n     */\n    public v11ThingsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return ThingsApiFp(this.configuration).v11ThingsGet($skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n","var render = function render(){var _vm=this,_c=_vm._self._c,_setup=_vm._self._setupProxy;return (_vm.data && _vm.data.data)?_c('div',{staticClass:\"plane is-vertical\"},[(_vm.data.type === 'FMM_LOC')?_c('Location',{attrs:{\"data\":_vm.data.data}}):_vm._e(),(_vm.data.type === 'FMM_THING')?_c('Thing',{attrs:{\"data\":_vm.data.data}}):_vm._e(),(_vm.data.type === 'FMM_DATASTREAM')?_c('Datastreams',{attrs:{\"data\":_vm.data.data}}):_vm._e()],1):_vm._e()\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","var render = function render(){var _vm=this,_c=_vm._self._c,_setup=_vm._self._setupProxy;return _c('div',{staticClass:\"t1\"},[_c('b-loading',{attrs:{\"active\":_vm.loading,\"can-cancel\":false,\"is-full-page\":false}}),(_vm.data)?_c('div',[_c('b-tabs',{staticClass:\"nopad\",model:{value:(_vm.activeTab),callback:function ($$v) {_vm.activeTab=$$v},expression:\"activeTab\"}},[_c('b-tab-item',{attrs:{\"label\":\"Location\"}},[_c('div',{staticClass:\"dtable\"},[_c('perfect-scrollbar',[_c('div',{staticClass:\"cap\"},[_vm._v(_vm._s(this.$i18n.t('description'))+\": \")]),_c('div',[_vm._v(_vm._s(_vm.data.description))]),_c('div',{staticClass:\"cap\"},[_vm._v(_vm._s(this.$i18n.t('encodingType'))+\": \")]),_c('div',[_vm._v(_vm._s(_vm.data.encodingType))]),_c('div',{staticClass:\"cap\"},[_vm._v(_vm._s(this.$i18n.t('name'))+\": \")]),_c('div',[_vm._v(_vm._s(_vm.data.name))]),_c('div',{staticClass:\"cap\"},[_vm._v(_vm._s(this.$i18n.t('location'))+\": \")]),(_vm.data.location)?_c('div',[_vm._v(\"[\"+_vm._s(_vm.data.location.coordinates.join(';'))+\"]\")]):_vm._e()])],1)]),_c('b-tab-item',{attrs:{\"label\":this.$i18n.t('properties').toString()}},[_c('div',{staticClass:\"dtable\"},[_c('perfect-scrollbar',_vm._l((_vm.data.properties),function(value,key){return _c('div',{key:key,staticClass:\"item\"},[_c('div',{staticClass:\"key cap\"},[_vm._v(_vm._s(key)+\":\")]),_c('div',{staticClass:\"value\"},[_vm._v(_vm._s(value))])])}),0)],1)])],1)],1):_vm._e()],1)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","var render = function render(){var _vm=this,_c=_vm._self._c,_setup=_vm._self._setupProxy;return _c('div',{staticClass:\"t1\"},[_c('b-loading',{attrs:{\"active\":_vm.loading,\"can-cancel\":false,\"is-full-page\":false}}),(_vm.data)?_c('div',[_c('b-tabs',{staticClass:\"nopad\",model:{value:(_vm.activeTab),callback:function ($$v) {_vm.activeTab=$$v},expression:\"activeTab\"}},[_c('b-tab-item',{attrs:{\"label\":\"Thing\"}},[_c('div',{staticClass:\"dtable\"},[_c('perfect-scrollbar',[_c('div',{staticClass:\"cap\"},[_vm._v(_vm._s(this.$i18n.t('name'))+\": \")]),_c('div',[_vm._v(_vm._s(_vm.data.name))]),_c('div',{staticClass:\"cap\"},[_vm._v(_vm._s(this.$i18n.t('description'))+\": \")]),_c('div',[_vm._v(_vm._s(_vm.data.description))])])],1)]),_c('b-tab-item',{attrs:{\"label\":this.$i18n.t('properties').toString()}},[_c('div',{staticClass:\"dtable\"},[_c('perfect-scrollbar',_vm._l((_vm.data.properties),function(value,key){return _c('div',{staticClass:\"item\",attrs:{\"v-key\":key}},[_c('div',{staticClass:\"key cap\"},[_vm._v(_vm._s(key)+\":\")]),_c('div',{staticClass:\"value\"},[_vm._v(_vm._s(value))])])}),0)],1)])],1)],1):_vm._e()],1)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","\n\nimport {Component, Prop, Vue, Watch} from \"vue-property-decorator\";\nimport { Thing} from \"../../openapi/client\";\n@Component\nexport default class ThingC extends Vue{\n  private loading:boolean = false;\n  private activeTab:number = 0;\n  @Prop() readonly data: Thing | undefined;\n\n\n\n}\n","import mod from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??clonedRuleSet-41.use[2]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Thing.vue?vue&type=script&lang=ts&\"; export default mod; export * from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??clonedRuleSet-41.use[2]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Thing.vue?vue&type=script&lang=ts&\"","import { render, staticRenderFns } from \"./Thing.vue?vue&type=template&id=78505d43&scoped=true&\"\nimport script from \"./Thing.vue?vue&type=script&lang=ts&\"\nexport * from \"./Thing.vue?vue&type=script&lang=ts&\"\nimport style0 from \"./Thing.vue?vue&type=style&index=0&id=78505d43&prod&scoped=true&lang=scss&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"78505d43\",\n  null\n  \n)\n\nexport default component.exports","\n\nimport {Component, Prop, Vue, Watch} from \"vue-property-decorator\";\nimport {Location, LocationsApi} from \"../../openapi/client\";\nimport ThingsC from \"@/components/Thing.vue\";\n@Component({components:{\n    ThingsC\n  }})\nexport default class LocationC extends Vue{\n\n  private loading:boolean = false;\n  private activeTab:number = 0;\n  @Prop() readonly data:any;\n\n\n}\n","import mod from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??clonedRuleSet-41.use[2]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Location.vue?vue&type=script&lang=ts&\"; export default mod; export * from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??clonedRuleSet-41.use[2]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Location.vue?vue&type=script&lang=ts&\"","import { render, staticRenderFns } from \"./Location.vue?vue&type=template&id=d9f140b0&scoped=true&\"\nimport script from \"./Location.vue?vue&type=script&lang=ts&\"\nexport * from \"./Location.vue?vue&type=script&lang=ts&\"\nimport style0 from \"./Location.vue?vue&type=style&index=0&id=d9f140b0&prod&scoped=true&lang=scss&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"d9f140b0\",\n  null\n  \n)\n\nexport default component.exports","var render = function render(){var _vm=this,_c=_vm._self._c,_setup=_vm._self._setupProxy;return _c('div',{staticClass:\"t1\"},[_c('b-loading',{attrs:{\"active\":_vm.loading,\"can-cancel\":false,\"is-full-page\":false}}),(_vm.data)?_c('div',[_c('b-tabs',{staticClass:\"nopad\",model:{value:(_vm.activeTab),callback:function ($$v) {_vm.activeTab=$$v},expression:\"activeTab\"}},[_c('b-tab-item',{attrs:{\"label\":\"Datastream\"}},[(_vm.data)?_c('div',{staticClass:\"dtable\"},[_c('perfect-scrollbar',_vm._l((_vm.data),function(value,key){return (key!='properties')?_c('div',{key:key,staticClass:\"item\"},[_c('div',{staticClass:\"key cap\"},[_vm._v(_vm._s(key)+\":\")]),_c('div',{staticClass:\"value\"},[_vm._v(_vm._s(value))])]):_vm._e()}),0)],1):_vm._e()]),_c('b-tab-item',{attrs:{\"label\":\"Eigenschaften\"}},[(_vm.data.properties)?_c('div',{staticClass:\"dtable\"},[_c('perfect-scrollbar',_vm._l((_vm.data.properties),function(value,key){return _c('div',{key:key,staticClass:\"item\"},[_c('div',{staticClass:\"key cap\"},[_vm._v(_vm._s(key)+\":\")]),_c('div',{staticClass:\"value\"},[_vm._v(_vm._s(value))])])}),0)],1):_vm._e()]),_c('b-tab-item',{attrs:{\"label\":\"Observations\"}},[(_vm.activeTab===2)?_c('Observations',{attrs:{\"id\":_vm.data['@iot.id'],\"title\":_vm.data.name}}):_vm._e()],1)],1)],1):_vm._e()],1)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","var render = function render(){var _vm=this,_c=_vm._self._c,_setup=_vm._self._setupProxy;return _c('div',{staticClass:\"t1\"},[_c('b-loading',{attrs:{\"active\":_vm.loading,\"can-cancel\":false,\"is-full-page\":false}}),_c('div',{staticClass:\"chart\"},[_vm._v(\" \"+_vm._s(_vm.comp_title)+\" \"),_c('Bar',{staticStyle:{\"{width\":\"100%\",\"height\":\"250px}\"},attrs:{\"data\":_vm.chartdata,\"options\":_vm.chartOptions,\"css-classes\":\"chart\"}})],1)],1)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","\nimport 'chartjs-adapter-moment';\nimport {Component, Prop, Vue, Watch} from \"vue-property-decorator\";\nimport {Datastream, DatastreamsApi, Observations, Thing} from \"../../openapi/client\";\n\nimport { Bar } from 'vue-chartjs'\nimport {Chart as ChartJS, Title, Tooltip, Legend, BarElement, CategoryScale, LinearScale, TimeScale} from 'chart.js'\nimport moment from \"moment\";\n\nChartJS.register(Title, Tooltip, Legend, BarElement, CategoryScale, LinearScale,TimeScale)\n\n@Component({components:{Bar}})\nexport default class ObservationsC extends Vue{\n  private loading:boolean = false;\n  @Prop() readonly id: string | undefined;\n  @Prop({default:()=>''}) readonly title: string | undefined ;\n  private observations:Observations|null = null;\n  private chartOptions:any ={\n    maxBarThickness: 2, // number (pixels)\n    barThickness: 'flex',\n    plugins:{\n      legend: {\n        display: true\n      }\n    },\n      responsive: true,\n      maintainAspectRatio: false,\n      scales: {\n        'x': {\n          type: 'time',\n          time: {\n            displayFormats: {\n              'millisecond': 'MMM DD',\n              'second': 'MMM DD',\n              'minute': 'MMM DD',\n              'hour': 'MMM DD',\n              'day': 'MMM DD',\n              'week': 'MMM DD',\n              'month': 'MMM DD',\n              'quarter': 'MMM DD',\n              'year': 'MMM DD',\n            }\n          },\n          /*ticks: {\n            // For a category axis, the val is the index so the lookup via getLabelForValue is needed\n            callback: function (val: any, index: any): any {\n              // Hide every 2nd tick label\n              //@ts-ignore\n              return index % 2 === 0 ? this.getLabelForValue(val) : '';\n            }\n          }*/\n        }\n      }\n  }\n  @Watch('id')\n  dataChanged(newD:any){\n    this.loadData()\n  }\n  mounted(){\n    this.loadData()\n  }\n  async loadData(){\n    this.loading = true;\n    try{\n      this.observations = (await new DatastreamsApi().v11DatastreamsEntityIdObservationsGet(parseInt(this.id!))).data;\n      console.log(this.observations)\n    }catch (e){\n      console.log(e);\n    }finally {\n      this.loading = false;\n    }\n  }\n  get chartdata(){\n    if(this.observations){\n      return {\n        labels: this.observations.value!.map(e=>moment(e.resultTime,\"YYYY-MM-DD'T'HH:mm:ss.SSSZZ\")),\n        datasets: [\n          {\n            label: this.title,\n            backgroundColor: 'rgb(36,97,162)',\n            data: this.observations.value!.map(e=>e.result)\n          }\n        ]\n      }\n    }else{\n      return {\n        labels: [],\n        datasets: [\n          {\n            label: '',\n            backgroundColor: 'rgba(36,97,162,0.81)',\n            data:  [],\n          }\n        ]\n      }\n    }\n  }\n\n\n}\n","import mod from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??clonedRuleSet-41.use[2]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Observations.vue?vue&type=script&lang=ts&\"; export default mod; export * from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??clonedRuleSet-41.use[2]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Observations.vue?vue&type=script&lang=ts&\"","import { render, staticRenderFns } from \"./Observations.vue?vue&type=template&id=15980a19&scoped=true&\"\nimport script from \"./Observations.vue?vue&type=script&lang=ts&\"\nexport * from \"./Observations.vue?vue&type=script&lang=ts&\"\nimport style0 from \"./Observations.vue?vue&type=style&index=0&id=15980a19&prod&scoped=true&lang=scss&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"15980a19\",\n  null\n  \n)\n\nexport default component.exports","\n\nimport {Component, Prop, Vue, Watch} from \"vue-property-decorator\";\nimport {Datastream, Thing} from \"../../openapi/client\";\nimport Observations from \"@/components/Observations.vue\";\n@Component({\n  components: {Observations}\n})\nexport default class DatastreamsC extends Vue{\n  private loading:boolean = false;\n  private activeTab:number = 0;\n  @Prop() readonly data: Datastream | undefined;\n\n  @Watch('data')\n  dataChanged(newD:any){\n    console.log(newD)\n  }\n\n}\n","import mod from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??clonedRuleSet-41.use[2]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Datastreams.vue?vue&type=script&lang=ts&\"; export default mod; export * from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??clonedRuleSet-41.use[2]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Datastreams.vue?vue&type=script&lang=ts&\"","import { render, staticRenderFns } from \"./Datastreams.vue?vue&type=template&id=36d8a2aa&scoped=true&\"\nimport script from \"./Datastreams.vue?vue&type=script&lang=ts&\"\nexport * from \"./Datastreams.vue?vue&type=script&lang=ts&\"\nimport style0 from \"./Datastreams.vue?vue&type=style&index=0&id=36d8a2aa&prod&scoped=true&lang=scss&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"36d8a2aa\",\n  null\n  \n)\n\nexport default component.exports","\nimport {Component, Prop, Vue} from \"vue-property-decorator\";\nimport Location from \"@/components/Location.vue\";\nimport Thing from \"@/components/Thing.vue\";\nimport Datastreams from \"@/components/Datastreams.vue\";\n\n@Component({\n  components: {Datastreams, Location,Thing}\n})\nexport default class PropertiesC extends Vue{\n  @Prop() readonly data:any;\n\n\n\n}\n","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/ts-loader/index.js??clonedRuleSet-41.use[2]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Properties.vue?vue&type=script&lang=ts&\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/ts-loader/index.js??clonedRuleSet-41.use[2]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Properties.vue?vue&type=script&lang=ts&\"","import { render, staticRenderFns } from \"./Properties.vue?vue&type=template&id=5e5cd02e&scoped=true&\"\nimport script from \"./Properties.vue?vue&type=script&lang=ts&\"\nexport * from \"./Properties.vue?vue&type=script&lang=ts&\"\nimport style0 from \"./Properties.vue?vue&type=style&index=0&id=5e5cd02e&prod&scoped=true&lang=scss&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"5e5cd02e\",\n  null\n  \n)\n\nexport default component.exports","\nimport {Component, Vue, Watch} from \"vue-property-decorator\";\nimport {LIcon, LMap, LMarker, LTileLayer} from \"vue2-leaflet\";\nimport {LocationsApi, Location, Locations} from \"../../openapi/client\";\nimport PropertiesC from \"@/components/PropertiesView/Properties.vue\";\n\n@Component({components:{\n    PropertiesC,\n    LMap,\n    LTileLayer,\n    LMarker,\n    LIcon\n  }})\nexport default class Map extends Vue{\n  private url:string =  'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png';\n  private attribution:string =\n      '&copy; <a target=\"_blank\" href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors';\n  private zoom:number = 15;\n  private center = [55.8382551745062, -4.20119980206699];\n  private markerLatLng =[55.8382551745062, -4.20119980206699]\n  private points:Array<Location>|undefined = [];\n  private selected:Location|null = {'@iot.id':undefined};\n  private treeData:any|null = null;\n\n  async mounted(){\n    await this.load();\n  }\n  async load(){\n    this.points = ((await new LocationsApi().v11LocationsGet()).data as Locations)!.value;\n  }\n\n  res(arr:any){\n    return [arr[1],arr[0]]\n  }\n  markerWasClicked(point:Location){\n\n    this.$router.push('/location/'+point[\"@iot.id\"])\n    //this.$route.params\n  }\n  @Watch('$route.params',{immediate:true})\n  params_chanded(params:any){\n    this.selected = params.id;\n  }\n\n\n}\n","import mod from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??clonedRuleSet-41.use[2]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Map.vue?vue&type=script&lang=ts&\"; export default mod; export * from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??clonedRuleSet-41.use[2]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Map.vue?vue&type=script&lang=ts&\"","import { render, staticRenderFns } from \"./Map.vue?vue&type=template&id=4c0ce0b5&scoped=true&\"\nimport script from \"./Map.vue?vue&type=script&lang=ts&\"\nexport * from \"./Map.vue?vue&type=script&lang=ts&\"\nimport style0 from \"./Map.vue?vue&type=style&index=0&id=4c0ce0b5&prod&scoped=true&lang=scss&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"4c0ce0b5\",\n  null\n  \n)\n\nexport default component.exports","var render = function render(){var _vm=this,_c=_vm._self._c,_setup=_vm._self._setupProxy;return _c('div',{staticClass:\"plane tree\"},[_c('b-loading',{attrs:{\"active\":_vm.loading,\"can-cancel\":false,\"is-full-page\":false}}),_c('perfect-scrollbar',[_c('v-treeview',{attrs:{\"treeTypes\":_vm.treeTypes,\"openAll\":_vm.openAll,\"contextItems\":_vm.contextItems},on:{\"selected\":_vm.selected,\"contextSelected\":_vm.contextSelected},model:{value:(_vm.treeData),callback:function ($$v) {_vm.treeData=$$v},expression:\"treeData\"}})],1)],1)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","\n\nimport {Component, Vue, Watch} from \"vue-property-decorator\";\nimport {\n  Datastream,\n  Datastreams,\n  DatastreamsApi,\n  Location,\n  LocationsApi, Observation, Observations,\n  Thing,\n  Things,\n  ThingsApi\n} from \"../../openapi/client\";\nimport ThingsC from \"@/components/Thing.vue\";\n//@ts-ignore\nimport VTreeview from \"v-treeview\"\n@Component({components:{\n    ThingsC,\n    VTreeview\n  }})\nexport default class TreeC extends Vue{\n\n  private loading:boolean = false;\n  private location:Location|null = null;\n  private openAll:boolean = true;\n  private treeTypes = [\n    {\n      type: \"#\",\n      max_children: 6,\n      max_depth: 25,\n      valid_children: [\n        \"FMM_THINGS\",\n        \"FMM_LOC\",\n        \"FMM_THING\",\n        \"FMM_DATASTREAMS\",\n        \"FMM_DATASTREAM\",\n        \"FMM_OBSERVATION\"\n      ]\n    },\n    {\n      type: \"FMM_THINGS\",\n      icon: \"fa-regular fa-circle\",\n      valid_children: [\"Basic\", \"Top-up\",'FMM_THING']\n    },\n    {\n      type: \"FMM_LOC\",\n      icon: \"fa-regular fa-map\",\n      valid_children: [\"Basic\", \"Top-up\",'FMM_THINGS']\n    },\n    {\n      type: \"FMM_THING\",\n      icon: \"fa-solid fa-circle\",\n      valid_children: [\"Basic\", \"Top-up\",\"FMM_DATASTREAMS\"]\n    },\n    {\n      type: \"FMM_DATASTREAMS\",\n      icon: \"fa-solid fa-rss\",\n      valid_children: [\"Basic\", \"Top-up\",\"FMM_DATASTREAM\"]\n    },\n    {\n      type: \"FMM_DATASTREAM\",\n      icon: \"fa-solid fa-rss\",\n      valid_children: [\"Basic\", \"Top-up\",\"FMM_OBSERVATION\"]\n    },\n    {\n      type: \"FMM_OBSERVATION\",\n      icon: \"far fa-user\",\n      valid_children: [\"Basic\", \"Top-up\"]\n    },\n    {\n      type: \"FMM_PARENT_IN_LAW\",\n      icon: \"far fa-user\",\n      valid_children: [\"Basic\", \"Top-up\"]\n    },\n    {\n      type: \"Basic\",\n      icon: \"far fa-hospital\",\n      valid_children: [\"Top-up\"]\n    },\n    {\n      type: \"Top-up\",\n      icon: \"far fa-plus-square\",\n      valid_children: []\n    }\n  ];\n  private treeData:any = [];\n  private contextItems:any = [];\n  private selectedNode:any = null\n\n  mounted(){\n    this.loadData()\n  }\n  async loadData(){\n    try{\n      this.treeData = [];\n      this.loading = true;\n      this.location = (await new LocationsApi().v11LocationsEntityIdGet(parseInt(this.$route.params.id))).data;\n\n      this.treeData.push({\n        id: Math.random()*100000, text: \"Location \"+this.location.name, type: \"FMM_LOC\", count: 0,\n        children: [\n          {id: Math.random()*100000, text: \"THINGS\", type: \"FMM_THINGS\", children:[]}\n        ]\n      },)\n\n    }catch (e){\n      console.log(e);\n      this.$router.push({name:'Map'})\n    }\n    finally{\n      this.loading = false;\n    }\n  }\n  @Watch('$route.params.id')\n  id_changed(){\n    this.loadData()\n  }\n  async selected(node:any){\n    this.selectedNode = node;\n    switch(node.model.type){\n      case 'FMM_LOC':\n        this.$emit('TreeSelect',{type:'FMM_LOC',data:this.location})\n        break;\n      case 'FMM_THINGS':\n          this.$emit('TreeSelect',{type:'FMM_THINGS',data:null})\n          const childs:Object[] = await this.getThingsTree()\n          node.model.children=[]\n          childs.forEach((child:Object)=>{\n            node.addNode(child)\n          })\n        break;\n      case 'FMM_THING':\n        this.$emit('TreeSelect',{type:'FMM_THING',data: node.model._data})\n        node.model.children=[]\n        const datastreams:Object[] = await this.getDatascreamsTree(node.model._data['@iot.id'])\n        const datastreamsNode:any = {id: Math.random()*100000, text:'DATASTREAMS', type: \"FMM_DATASTREAMS\", children: []}\n        datastreams.forEach((child:Object)=>{\n           datastreamsNode.children.push(child);\n        })\n        node.addNode(datastreamsNode)\n        break;\n      case 'FMM_DATASTREAMS':\n        this.$emit('TreeSelect',{type:'FMM_DATASTREAMS',data:null});\n        break;\n      case 'FMM_DATASTREAM':\n        this.$emit('TreeSelect',{type:'FMM_DATASTREAM',data: node.model._data});\n        /*node.model.children=[]\n        const observations:Object[] = await this.getObservationTree(node.model._data['@iot.id'])\n        node.children = [];\n        observations.forEach((child:Object)=>{\n          node.addNode(child)\n        })*/\n        break;\n    }\n  }\n  async getThingsTree(): Promise<Object[]>{\n    this.loading = true;\n    const things = (await new LocationsApi().v11LocationsEntityIdThingsGet(parseInt(this.$route.params.id))).data as Things\n    this.loading = false;\n    let ret:Object[] = [];\n    things.value?.forEach((thing:Thing)=>{\n      let node = {id: Math.random()*100000, text:  (thing as Thing).name, type: \"FMM_THING\", children: [],_data:thing}\n      ret.push(node);\n    });\n    return ret;\n  }\n\n  async getDatascreamsTree(id:string): Promise<Object[]>{\n    this.loading = true;\n    const datastreams = (await new ThingsApi().v11ThingsEntityIdDatastreamsGet(parseInt(id))).data as Datastreams\n    this.loading = false;\n    let ret:Object[] = [];\n    datastreams.value?.forEach((datastream:Datastream)=>{\n      let node = {id: Math.random()*100000, text:  (datastream as Datastream).name, type: \"FMM_DATASTREAM\", children: [],_data:datastream}\n      ret.push(node);\n    });\n    return ret;\n  }\n  async getObservationTree(id:string): Promise<Object[]>{\n    this.loading = true;\n    const observations = (await new DatastreamsApi().v11DatastreamsEntityIdObservationsGet(parseInt(id))).data as Observations\n    this.loading = false;\n    let ret:Object[] = [];\n    observations.value?.forEach((observation:Observation)=>{\n      let node = {id: Math.random()*100000, text:  (observation as Observation)[\"@iot.id\"], type: \"FMM_OBSERVATION\", children: [],_data:observation}\n      ret.push(node);\n    });\n    return ret;\n  }\n\n  getTypeRule(type:any) {\n    var typeRule = this.treeTypes.filter(t => t.type == type)[0];\n    return typeRule;\n  }\n  contextSelected(command:any) {\n    switch (command) {\n      case \"Create Basic\":\n        var node = {\n          text: \"New Basic Plan\",\n          type: \"Basic\",\n          children: []\n        };\n        this.selectedNode.addNode(node);\n        break;\n      case \"Create Top-up\":\n        var node = {\n          text: \"New Top-up\",\n          type: \"Top-up\",\n          children: []\n        };\n        this.selectedNode.addNode(node);\n        break;\n      case \"Rename\":\n        this.selectedNode.editName();\n        break;\n      case \"Remove\":\n        break;\n    }\n  }\n\n\n}\n","import mod from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??clonedRuleSet-41.use[2]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Tree.vue?vue&type=script&lang=ts&\"; export default mod; export * from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??clonedRuleSet-41.use[2]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Tree.vue?vue&type=script&lang=ts&\"","import { render, staticRenderFns } from \"./Tree.vue?vue&type=template&id=3c9b6e66&scoped=true&\"\nimport script from \"./Tree.vue?vue&type=script&lang=ts&\"\nexport * from \"./Tree.vue?vue&type=script&lang=ts&\"\nimport style0 from \"./Tree.vue?vue&type=style&index=0&id=3c9b6e66&prod&scoped=true&lang=scss&\"\nimport style1 from \"./Tree.vue?vue&type=style&index=1&id=3c9b6e66&prod&lang=scss&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"3c9b6e66\",\n  null\n  \n)\n\nexport default component.exports","import Vue from 'vue'\nimport VueRouter, { RouteConfig } from 'vue-router'\nimport HomeView from '../views/HomeView.vue'\nimport Map from \"@/views/Map.vue\";\nimport LocationC from \"@/components/Location.vue\";\nimport Tree from \"@/components/Tree.vue\";\n\nVue.use(VueRouter)\n\nconst routes: Array<RouteConfig> = [\n  {\n    path: '/',\n    name: 'map',\n    component: Map,\n    children:[{\n      path: 'location/:id',\n      component: Tree,\n    }]\n  }\n]\n\nconst router = new VueRouter({\n  mode: 'history',\n  base: process.env.BASE_URL,\n  routes\n})\n\nexport default router\n","import VueI18n from \"vue-i18n\";\nimport TranslationDE from \"@/locales/de/translation.json\";\n\nimport Vue from \"vue\";\n\nVue.use(VueI18n);\nconst i18n:VueI18n = new VueI18n({\n    locale: 'de', // set locale\n    messages:{\n        de:TranslationDE,\n    },\n\n});\nexport default i18n;\n","import Vue from 'vue'\nimport App from './App.vue'\nimport router from './router'\nimport 'leaflet/dist/leaflet.css';\nimport {Icon} from \"leaflet\";\nimport Buefy from 'buefy'\nimport 'buefy/dist/buefy.css'\nimport i18n from \"@/i18n\";\nimport VueI18n from \"vue-i18n\";\n// @ts-ignore\nimport VueTreeList from 'vue-tree-list';\nimport './scss/general.scss';\nimport '@mdi/font/css/materialdesignicons.css'\nimport PerfectScrollbar from \"vue2-perfect-scrollbar\";\nimport \"vue2-perfect-scrollbar/dist/vue2-perfect-scrollbar.css\";\n\nVue.use(PerfectScrollbar);\nVue.use(VueTreeList)\n\nVue.config.productionTip = false\n//@ts-ignore\ndelete Icon.Default.prototype._getIconUrl;\nIcon.Default.mergeOptions({\n  iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\n  iconUrl: require('leaflet/dist/images/marker-icon.png'),\n  shadowUrl: require('leaflet/dist/images/marker-shadow.png'),\n});\n\ntype D = Icon.Default & {\n  _getIconUrl?: string;\n};\n\ndelete (Icon.Default.prototype as D)._getIconUrl;\nVue.use(Buefy);\nVue.use(VueI18n);\n\nnew Vue({\n  router,\n  i18n,\n  render: h => h(App)\n}).$mount('#app')\n","var map = {\n\t\"./af\": 2496,\n\t\"./af.js\": 2496,\n\t\"./ar\": 186,\n\t\"./ar-dz\": 6881,\n\t\"./ar-dz.js\": 6881,\n\t\"./ar-kw\": 6265,\n\t\"./ar-kw.js\": 6265,\n\t\"./ar-ly\": 451,\n\t\"./ar-ly.js\": 451,\n\t\"./ar-ma\": 8625,\n\t\"./ar-ma.js\": 8625,\n\t\"./ar-sa\": 8819,\n\t\"./ar-sa.js\": 8819,\n\t\"./ar-tn\": 7092,\n\t\"./ar-tn.js\": 7092,\n\t\"./ar.js\": 186,\n\t\"./az\": 4421,\n\t\"./az.js\": 4421,\n\t\"./be\": 7067,\n\t\"./be.js\": 7067,\n\t\"./bg\": 3871,\n\t\"./bg.js\": 3871,\n\t\"./bm\": 4242,\n\t\"./bm.js\": 4242,\n\t\"./bn\": 8189,\n\t\"./bn-bd\": 2507,\n\t\"./bn-bd.js\": 2507,\n\t\"./bn.js\": 8189,\n\t\"./bo\": 5799,\n\t\"./bo.js\": 5799,\n\t\"./br\": 7803,\n\t\"./br.js\": 7803,\n\t\"./bs\": 8434,\n\t\"./bs.js\": 8434,\n\t\"./ca\": 4581,\n\t\"./ca.js\": 4581,\n\t\"./cs\": 8004,\n\t\"./cs.js\": 8004,\n\t\"./cv\": 4464,\n\t\"./cv.js\": 4464,\n\t\"./cy\": 163,\n\t\"./cy.js\": 163,\n\t\"./da\": 803,\n\t\"./da.js\": 803,\n\t\"./de\": 233,\n\t\"./de-at\": 7607,\n\t\"./de-at.js\": 7607,\n\t\"./de-ch\": 6777,\n\t\"./de-ch.js\": 6777,\n\t\"./de.js\": 233,\n\t\"./dv\": 6969,\n\t\"./dv.js\": 6969,\n\t\"./el\": 9618,\n\t\"./el.js\": 9618,\n\t\"./en-au\": 9245,\n\t\"./en-au.js\": 9245,\n\t\"./en-ca\": 5036,\n\t\"./en-ca.js\": 5036,\n\t\"./en-gb\": 1438,\n\t\"./en-gb.js\": 1438,\n\t\"./en-ie\": 6053,\n\t\"./en-ie.js\": 6053,\n\t\"./en-il\": 134,\n\t\"./en-il.js\": 134,\n\t\"./en-in\": 847,\n\t\"./en-in.js\": 847,\n\t\"./en-nz\": 1363,\n\t\"./en-nz.js\": 1363,\n\t\"./en-sg\": 9022,\n\t\"./en-sg.js\": 9022,\n\t\"./eo\": 8990,\n\t\"./eo.js\": 8990,\n\t\"./es\": 9817,\n\t\"./es-do\": 8155,\n\t\"./es-do.js\": 8155,\n\t\"./es-mx\": 952,\n\t\"./es-mx.js\": 952,\n\t\"./es-us\": 9358,\n\t\"./es-us.js\": 9358,\n\t\"./es.js\": 9817,\n\t\"./et\": 5396,\n\t\"./et.js\": 5396,\n\t\"./eu\": 4338,\n\t\"./eu.js\": 4338,\n\t\"./fa\": 7030,\n\t\"./fa.js\": 7030,\n\t\"./fi\": 2292,\n\t\"./fi.js\": 2292,\n\t\"./fil\": 3578,\n\t\"./fil.js\": 3578,\n\t\"./fo\": 8900,\n\t\"./fo.js\": 8900,\n\t\"./fr\": 6067,\n\t\"./fr-ca\": 8362,\n\t\"./fr-ca.js\": 8362,\n\t\"./fr-ch\": 9404,\n\t\"./fr-ch.js\": 9404,\n\t\"./fr.js\": 6067,\n\t\"./fy\": 6742,\n\t\"./fy.js\": 6742,\n\t\"./ga\": 8152,\n\t\"./ga.js\": 8152,\n\t\"./gd\": 6920,\n\t\"./gd.js\": 6920,\n\t\"./gl\": 7234,\n\t\"./gl.js\": 7234,\n\t\"./gom-deva\": 2759,\n\t\"./gom-deva.js\": 2759,\n\t\"./gom-latn\": 7054,\n\t\"./gom-latn.js\": 7054,\n\t\"./gu\": 8166,\n\t\"./gu.js\": 8166,\n\t\"./he\": 8927,\n\t\"./he.js\": 8927,\n\t\"./hi\": 2153,\n\t\"./hi.js\": 2153,\n\t\"./hr\": 9329,\n\t\"./hr.js\": 9329,\n\t\"./hu\": 6680,\n\t\"./hu.js\": 6680,\n\t\"./hy-am\": 5023,\n\t\"./hy-am.js\": 5023,\n\t\"./id\": 6655,\n\t\"./id.js\": 6655,\n\t\"./is\": 0,\n\t\"./is.js\": 0,\n\t\"./it\": 5107,\n\t\"./it-ch\": 3045,\n\t\"./it-ch.js\": 3045,\n\t\"./it.js\": 5107,\n\t\"./ja\": 9175,\n\t\"./ja.js\": 9175,\n\t\"./jv\": 4853,\n\t\"./jv.js\": 4853,\n\t\"./ka\": 8684,\n\t\"./ka.js\": 8684,\n\t\"./kk\": 312,\n\t\"./kk.js\": 312,\n\t\"./km\": 1271,\n\t\"./km.js\": 1271,\n\t\"./kn\": 7256,\n\t\"./kn.js\": 7256,\n\t\"./ko\": 4833,\n\t\"./ko.js\": 4833,\n\t\"./ku\": 5258,\n\t\"./ku.js\": 5258,\n\t\"./ky\": 3430,\n\t\"./ky.js\": 3430,\n\t\"./lb\": 7665,\n\t\"./lb.js\": 7665,\n\t\"./lo\": 2238,\n\t\"./lo.js\": 2238,\n\t\"./lt\": 920,\n\t\"./lt.js\": 920,\n\t\"./lv\": 8769,\n\t\"./lv.js\": 8769,\n\t\"./me\": 818,\n\t\"./me.js\": 818,\n\t\"./mi\": 5722,\n\t\"./mi.js\": 5722,\n\t\"./mk\": 7117,\n\t\"./mk.js\": 7117,\n\t\"./ml\": 9904,\n\t\"./ml.js\": 9904,\n\t\"./mn\": 8590,\n\t\"./mn.js\": 8590,\n\t\"./mr\": 9544,\n\t\"./mr.js\": 9544,\n\t\"./ms\": 176,\n\t\"./ms-my\": 8850,\n\t\"./ms-my.js\": 8850,\n\t\"./ms.js\": 176,\n\t\"./mt\": 291,\n\t\"./mt.js\": 291,\n\t\"./my\": 4830,\n\t\"./my.js\": 4830,\n\t\"./nb\": 4893,\n\t\"./nb.js\": 4893,\n\t\"./ne\": 8782,\n\t\"./ne.js\": 8782,\n\t\"./nl\": 8337,\n\t\"./nl-be\": 2297,\n\t\"./nl-be.js\": 2297,\n\t\"./nl.js\": 8337,\n\t\"./nn\": 8272,\n\t\"./nn.js\": 8272,\n\t\"./oc-lnc\": 277,\n\t\"./oc-lnc.js\": 277,\n\t\"./pa-in\": 6198,\n\t\"./pa-in.js\": 6198,\n\t\"./pl\": 5231,\n\t\"./pl.js\": 5231,\n\t\"./pt\": 3141,\n\t\"./pt-br\": 9626,\n\t\"./pt-br.js\": 9626,\n\t\"./pt.js\": 3141,\n\t\"./ro\": 2797,\n\t\"./ro.js\": 2797,\n\t\"./ru\": 48,\n\t\"./ru.js\": 48,\n\t\"./sd\": 23,\n\t\"./sd.js\": 23,\n\t\"./se\": 7339,\n\t\"./se.js\": 7339,\n\t\"./si\": 2851,\n\t\"./si.js\": 2851,\n\t\"./sk\": 9764,\n\t\"./sk.js\": 9764,\n\t\"./sl\": 646,\n\t\"./sl.js\": 646,\n\t\"./sq\": 1751,\n\t\"./sq.js\": 1751,\n\t\"./sr\": 9016,\n\t\"./sr-cyrl\": 1368,\n\t\"./sr-cyrl.js\": 1368,\n\t\"./sr.js\": 9016,\n\t\"./ss\": 1943,\n\t\"./ss.js\": 1943,\n\t\"./sv\": 5095,\n\t\"./sv.js\": 5095,\n\t\"./sw\": 6014,\n\t\"./sw.js\": 6014,\n\t\"./ta\": 1571,\n\t\"./ta.js\": 1571,\n\t\"./te\": 4819,\n\t\"./te.js\": 4819,\n\t\"./tet\": 8646,\n\t\"./tet.js\": 8646,\n\t\"./tg\": 8641,\n\t\"./tg.js\": 8641,\n\t\"./th\": 5714,\n\t\"./th.js\": 5714,\n\t\"./tk\": 7082,\n\t\"./tk.js\": 7082,\n\t\"./tl-ph\": 9830,\n\t\"./tl-ph.js\": 9830,\n\t\"./tlh\": 8757,\n\t\"./tlh.js\": 8757,\n\t\"./tr\": 3571,\n\t\"./tr.js\": 3571,\n\t\"./tzl\": 6785,\n\t\"./tzl.js\": 6785,\n\t\"./tzm\": 4924,\n\t\"./tzm-latn\": 9126,\n\t\"./tzm-latn.js\": 9126,\n\t\"./tzm.js\": 4924,\n\t\"./ug-cn\": 2134,\n\t\"./ug-cn.js\": 2134,\n\t\"./uk\": 3350,\n\t\"./uk.js\": 3350,\n\t\"./ur\": 3397,\n\t\"./ur.js\": 3397,\n\t\"./uz\": 8556,\n\t\"./uz-latn\": 3562,\n\t\"./uz-latn.js\": 3562,\n\t\"./uz.js\": 8556,\n\t\"./vi\": 7751,\n\t\"./vi.js\": 7751,\n\t\"./x-pseudo\": 1505,\n\t\"./x-pseudo.js\": 1505,\n\t\"./yo\": 5943,\n\t\"./yo.js\": 5943,\n\t\"./zh-cn\": 4186,\n\t\"./zh-cn.js\": 4186,\n\t\"./zh-hk\": 2243,\n\t\"./zh-hk.js\": 2243,\n\t\"./zh-mo\": 5437,\n\t\"./zh-mo.js\": 5437,\n\t\"./zh-tw\": 3843,\n\t\"./zh-tw.js\": 3843\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 6700;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = function(result, chunkIds, fn, priority) {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","__webpack_require__.nmd = function(module) {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t143: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = function(chunkId) { return installedChunks[chunkId] === 0; };\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = function(parentChunkLoadingFunction, data) {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some(function(id) { return installedChunks[id] !== 0; })) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunksensor_thing_api_map\"] = self[\"webpackChunksensor_thing_api_map\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [998], function() { return __webpack_require__(1259); })\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["render","_vm","this","_c","_self","attrs","_v","staticRenderFns","script","component","_setupProxy","staticClass","zoom","center","url","attribution","_l","points","point","key","res","location","coordinates","on","$event","markerWasClicked","class","selected","data","treeData","BASE_PATH","replace","BaseAPI","constructor","configuration","basePath","axios","globalAxios","RequiredError","Error","field","msg","super","name","DUMMY_BASE_URL","assertParamExists","functionName","paramName","paramValue","undefined","setFlattenedQueryParams","urlSearchParams","parameter","Array","isArray","forEach","item","Object","keys","currentKey","has","append","set","setSearchParams","objects","searchParams","URLSearchParams","search","toString","toPathString","pathname","hash","createRequestFunction","axiosArgs","axiosRequestArgs","options","request","DatastreamsApiAxiosParamCreator","v11DatastreamsEntityIdGet","async","entityId","$select","$expand","localVarPath","encodeURIComponent","String","localVarUrlObj","URL","baseOptions","localVarRequestOptions","method","localVarHeaderParameter","localVarQueryParameter","headersFromBaseOptions","headers","v11DatastreamsEntityIdObservationsGet","$skip","$top","$count","$filter","v11DatastreamsEntityIdObservedPropertyDatastreamsGet","v11DatastreamsEntityIdObservedPropertyGet","v11DatastreamsEntityIdSensorDatastreamsGet","v11DatastreamsEntityIdSensorGet","v11DatastreamsEntityIdThingDatastreamsGet","v11DatastreamsEntityIdThingGet","v11DatastreamsEntityIdThingLocationsGet","v11DatastreamsGet","DatastreamsApiFp","localVarAxiosParamCreator","localVarAxiosArgs","DatastreamsApi","then","LocationsApiAxiosParamCreator","v11LocationsEntityIdGet","v11LocationsEntityIdThingsGet","v11LocationsGet","LocationsApiFp","LocationsApi","ThingsApiAxiosParamCreator","v11ThingsEntityIdDatastreamsGet","v11ThingsEntityIdGet","v11ThingsEntityIdLocationsGet","v11ThingsGet","ThingsApiFp","ThingsApi","type","_e","loading","model","value","activeTab","callback","$$v","expression","_s","$i18n","t","description","encodingType","join","properties","ThingC","Vue","__decorate","Prop","Component","LocationC","components","ThingsC","comp_title","staticStyle","chartdata","chartOptions","ChartJS","Title","Tooltip","Legend","BarElement","CategoryScale","LinearScale","TimeScale","ObservationsC","maxBarThickness","barThickness","plugins","legend","display","responsive","maintainAspectRatio","scales","time","displayFormats","dataChanged","newD","loadData","mounted","observations","parseInt","id","console","log","e","labels","map","moment","resultTime","datasets","label","title","backgroundColor","result","default","Watch","Bar","DatastreamsC","Observations","PropertiesC","Datastreams","Location","Thing","Map","load","arr","$router","push","params_chanded","params","immediate","LMap","LTileLayer","LMarker","LIcon","treeTypes","openAll","contextItems","contextSelected","TreeC","max_children","max_depth","valid_children","icon","$route","Math","random","text","count","children","id_changed","node","selectedNode","$emit","childs","getThingsTree","child","addNode","_data","datastreams","getDatascreamsTree","datastreamsNode","things","ret","thing","datastream","observation","getTypeRule","typeRule","filter","command","editName","VTreeview","VueRouter","routes","path","Tree","router","mode","base","process","VueI18n","i18n","locale","messages","de","TranslationDE","PerfectScrollbar","VueTreeList","Icon","iconRetinaUrl","require","iconUrl","shadowUrl","Buefy","h","App","$mount","webpackContext","req","webpackContextResolve","__webpack_require__","o","code","resolve","module","exports","__webpack_module_cache__","moduleId","cachedModule","loaded","__webpack_modules__","call","m","deferred","O","chunkIds","fn","priority","notFulfilled","Infinity","i","length","fulfilled","j","every","splice","r","n","getter","__esModule","d","a","definition","defineProperty","enumerable","get","g","globalThis","Function","window","obj","prop","prototype","hasOwnProperty","nmd","paths","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","some","chunkLoadingGlobal","self","bind","__webpack_exports__"],"sourceRoot":""}